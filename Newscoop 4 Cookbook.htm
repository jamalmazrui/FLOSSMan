<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <meta name="author" content="The Contributors" />
  <title>Newscoop 3 Cookbook</title>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <style type="text/css">
a.sourceLine { display: inline-block; line-height: 1.25; }
a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; }
a.sourceLine:empty { height: 1.2em; position: absolute; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
a.sourceLine { text-indent: -1em; padding-left: 1em; }
}
pre.numberSource a.sourceLine
  { position: relative; }
pre.numberSource a.sourceLine:empty
  { position: absolute; }
pre.numberSource a.sourceLine::before
  { content: attr(data-line-number);
    position: absolute; left: -5em; text-align: right; vertical-align: baseline;
    border: none; pointer-events: all;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {  }
@media screen {
a.sourceLine::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<header>
<h1 class="title">Newscoop 3 Cookbook</h1>
<p class="author">The Contributors</p>
<p class="date">2011.04.30-15.18</p>
</header>
<p><span id="ch001_ready-to-cook.xhtml"></span></p>
<h1>Ready to cook?</h1>
<p><img src="static/cooking_utensils_brittany_silverstein.jpg" /></p>
<p><em>Have your tools ready. Photo by Brittany Silverstein (CC-BY).</em></p>
<p>Welcome to the Newscoop 4 Cookbook! Newscoop is an open content management system for professional journalists. Designed by newsroom experts, it powers professional newspapers and magazines worldwide. It meets the demands of modern journalism with intuitive interfaces, flexible publishing, multilinguality, geolocation tools, social media integration, and powerful templates compatible with HTML5 and mobile devices. You can find out more about Newscoop at <a href="http://newscoop.sourcefabric.org" class="uri">http://newscoop.sourcefabric.org</a></p>
<p>Like every good cookbook, this book has lots of good recipes, ideas and tips for creating online publications with good taste, and which taste good too. And, like every good cook, there are a few utensils and ingredients you should have in your kitchen and ready to go. This manual will provide you with enough advice and code examples to get a high-quality site up and running with Newscoop.<br />
</p>
<p>The Newscoop 4 Cookbook will walk you through all the stages of creating an online publication. We start at the planning stage, because in our experience at Sourcefabric, careful planning helps avoid future obstacles. Then we walk through the design process, into the stage of converting the design into templates. The following chapters guide you from the essential need-to-know, to the advanced, and finally more exotic ways of using Newscoop for your publication.</p>
<p>You can get going quickly with the template packs from the Sourcefabric website. It's possible to adjust these pre-made template packs to your needs. In the long term, spending time to understand the possibilities of Newscoop will help you to create a unique publication that stands out from the crowd. It also allows time to reflect on the organic processes unique to each news organization, and therefore to each Newscoop deployment.</p>
<h2>Where to go for information, help and services</h2>
<p>We have more documentation on Newscoop. There is a manual aimed at journalists and editors, a wiki based reference guide, and more. You can access these resources at:<br />
<a href="http://manuals.sourcefabric.org" class="uri">http://manuals.sourcefabric.org</a></p>
<p>There are support and developer forums provided by Sourcefabric. Meet the Newscoop teams, ask for help and offer support if you know the answers. These forums can also be followed via e-mail.<br />
<a href="http://forum.sourcefabric.org/" class="uri">http://forum.sourcefabric.org/</a></p>
<p>You can subscribe to our newsletter and read the latest blog posts at:<br />
<a href="http://www.sourcefabric.org/newsletter" class="uri">http://www.sourcefabric.org/newsletter</a></p>
<p>And see the development milestones, report bugs and request features at:<br />
<a href="http://dev.sourcefabric.org/">http://dev.sourcefabric.org</a></p>
<p>Our development wiki with the latest documentation can be found here:<br />
<a href="http://wiki.sourcefabric.org/">http://wiki.sourcefabric.org</a></p>
<p>If you need help or want Sourcefabric to do the job for you, get in contact with Services at:<br />
<a href="http://services.sourcefabric.org" class="uri">http://services.sourcefabric.org</a></p>
<p>Sourcefabric provides guaranteed paid support and services for Newscoop, including custom template development, consulting, project management and implementation.</p>
<p><span id="ch002_newscoop-sites-to-get-you-inspired.xhtml"></span></p>
<h1>Newscoop sites to get you inspired</h1>
<p>Before we get right into Newscoop templates, first we can take a look at what others have achieved. Newscoop's community is diverse and international, and the sites it powers are also quite diverse in their coverage and specialization. Some are daily newspaper sites, some are online portals, some are radio stations, and some are superpowered blogs.</p>
<h2>fluter.de</h2>
<p><img src="static/fluter.png" width="550" height="324" /></p>
<p>A youth culture portal based in Berlin, <a href="http://www.fluter.de" class="uri">http://www.fluter.de</a> has been an active member of the Newscoop community almost since its beginning. Fluter's installation makes effective use of jQuery (notably Superfish pulldown menus - described later in this cookbook). Fluter's 'Mediathek' is also notable - it's an online archive of video and audio that uses Newscoop's media archive and enables site visitors to make their own video playlists.</p>
<h2>West Africa Democracy Radio</h2>
<p><img src="static/wadr.png" /></p>
<p>West Africa Democracy Radio <a href="http://www.wadr.org" class="uri">http://www.wadr.org</a> is a news and talk radio network, with content broadcast on FM, satellite, and online. It has more than thirty affiliate stations covering the region. WADR's website makes extensive use of Newscoop's multilinguality, Soundcloud plugin, news ticker, topics, and maps - all of which are documented in this Cookbook.</p>
<h2>El Periodico</h2>
<p><img src="static/elperiodico.png" /></p>
<p>Guatemala's acclaimed investigative newspaper has two notable sites running on Newscoop - its main site at <a href="http://www.elperiodico.com.gt" class="uri">http://www.elperiodico.com.gt</a> and a sports site at <a href="http://deportes.elperiodico.com.gt" class="uri">http://deportes.elperiodico.com.gt</a>.</p>
<p><img src="static/elperiodico_sports.png" /></p>
<p>Both sites make extensive use of jQuery; the news site enables readers to customize their home pages, for example. ElPeriodico also provides access to an important archive which serves all articles since the site launched in 2004 (check the chapter <em>Ways to create archives</em> in this book).</p>
<h2>El Faro</h2>
<p><img src="static/elfaro.png" /></p>
<p>Central America's first online news site <a href="http://www.elfaro.net" class="uri">http://www.elfaro.net</a> is updated continuously, every day. El Faro's &quot;Radionoticias&quot; service uses article attachments and a Flash audio player to serve a large amount of audio (see the Cookbook chapter <em>Audio player for attached files</em>). They also make extensive use of photojournalism, based on Newscoop's media archive (see the chapter <em>Working with images</em>).</p>
<h2>Gorad.by</h2>
<p><img src="static/gorad_by.png" /></p>
<p>Minsk's <a href="http://www.gorad.by" class="uri">http://www.gorad.by</a> is an online newspaper which posts about twenty items per day. The Newscoop-powered site uses jQuery slideshows extensively (see the chapter here on <em>Image galleries with jQuery</em>), calendar-based archives (explained in the chapter <em>Calendars with jQuery</em>), and Facebook integration (described in the chapter <em>Working with Facebook</em>).</p>
<h2>Kosmoblog</h2>
<p><img src="static/kosmoblog.png" /></p>
<p>Jakub Gornicki is a leading blogger in Poland, who moved his blog to Newscoop at the beginning of 2011 when he started working with Sourcefabric. Using a new sample template set based on Lucian Marin's &quot;The Journalist&quot; theme adapted for Newscoop, Kosmoblog makes use of Newscoop's multilingual features (he blogs in Polish and English), search engine optimization techniques like keywords in the URL and sitemap (described in the chapter <em>Search Engine Optimization</em>) and Disqus comments (also described later).</p>
<p>You can find a wide-ranging list of sites using Newscoop on the Sourcefabric website:<br />
<a href="http://sourcefabric.org/en/products/newscoop_whosusing/" class="uri">http://sourcefabric.org/en/products/newscoop_whosusing/</a></p>
<p> </p>
<p><span id="ch003_about-this-book.xhtml"></span></p>
<h1>About this book</h1>
<p><em>Updated to Newscoop 4.0.0</em><br />
</p>
<p>The Newscoop 4 Cookbook is a work in progress and open to your input. Dedicated to Open Source software development, Sourcefabric believes that the software and its documentation are open to the community. The more contributors add to the products, the more errors get caught and fixed, the more features are implemented. We also believe that software improves from good documentation, and documentation improves with the wide use of software.</p>
<p>If you experience the Newscoop 4 Cookbook in its printed form, it might be difficult to see how this book is open to your contribution. If you have come across the Newscoop 4 Cookbook online at FLOSS Manuals, you might get a better idea about how you can participate in improving this documentation. Register, log in and add your knowledge, use cases, your code snippets, comments and best practices to make this a better publication. Working with the online book production platform Booktype, the content of this book is continuously evolving. Chances are, the latest PDF, ePub or the online version on the site <a href="http://www.flossmanuals.net" class="uri">http://www.flossmanuals.net</a> contains more details than the printed copy.</p>
<p><img src="static/team-group-2.jpg" width="550" height="367" /></p>
<p><em>&quot;All work and no play...&quot; - the Newscoop Cookbook team at work.</em></p>
<p>Sourcefabric started this publication with a one-week Book Sprint in Schloss Neuhausen, Germany, two hours north of Berlin. Authors for the Newscoop 4 Cookbook include (in reverse alphabetical order): Holman Romero, Ljuba Ranković, Lucian Marin, Micz Flor, Alexei Danilchuk and Douglas Arellanes. Our facilitator, chef, sprintmaster, captain and all-around make-it-happen person was Adam Hyde of FLOSS Manuals. Thanks also go to Katerina Michailidis for her logistical support and to Daniel James for copy and style editing.</p>
<p>If you contribute to this book, you may also want to add yourself as an author here...</p>
<p><span id="ch004_who-we-are.xhtml"></span></p>
<h1>Who we are</h1>
<p>The Newscoop community comes from a diverse and international background of journalists, editors, developers, implementers, trainers, designers, documentation writers and others who care about Free Software and Free Media. The community finds its focus in Sourcefabric <a href="http://www.sourcefabric.org" class="uri">http://www.sourcefabric.org</a>, the non-profit foundation which maintains the Newscoop project, as well as other tools and activities related to its mission of providing media organisations with the open source software, tools and support to produce quality journalism.</p>
<p><img src="static/sourcecamp-sourcecamp.jpg" width="550" height="337" /></p>
<p><em>A last minute photo shoot from the annual &quot;Sourcecamp&quot; community gathering, held in Berlin in 2010, before the participants - who came from 12 countries - got into their trains, planes and automobiles back home.</em></p>
<p>Newscoop was first released under the name of &quot;Campsite&quot; in 2000. After substantial rewriting, it was renamed to &quot;Newscoop&quot; in January, 2011. Newscoop and Campsite have always been free and open source (always under the GNU General Public License) and will remain so.</p>
<h3>About Sourcefabric</h3>
<p>Sourcefabric o.p.s. is a not-for-profit organisation based in Prague, Czech Republic, with branches in Berlin, Germany and Toronto, Canada, and satellite offices in Warsaw, Minsk, Cluj, and Guatemala City.</p>
<p>The Sourcefabric partners Sava Tatić, Micz Flor and Douglas Arellanes were among the key people behind an initiative led by the Media Development Loan Fund <a href="http://www.mdlf.org" class="uri">http://www.mdlf.org</a> to support open source solutions for independent media organizations in emerging democracies. The Media Development Loan Fund's Center for Advanced Media, Prague, or CAMP, consolidated a lot of work that had been happening since 1999 to develop user-centric, financially-viable, multilingual platforms for journalists. Sourcefabric is the continuation of that endeavour, but with greatly expanded aims and a new organisational structure.</p>
<h3>Why 'Sourcefabric'?</h3>
<p>Both the journalist's 'source' (the origin of information) and the programmer's 'source' (the code on which software is built) are vital to the work we do.</p>
<p>We are concerned with the 'fabric' of these things - their structures, relations and interactions. At the core of our experience and vision is a commitment to enable quality journalism. We do this through open source software and services that address these structures with solutions that are flexible, strong and interwoven; just like fabric.</p>
<p><span id="ch005_resources.xhtml"></span></p>
<h1>Resources</h1>
<p>In this Cookbook we often refer to the Newscoop theme called &quot;The Journal&quot;. If you are interested in sniffing out some other sneaky tricks in this (or other) themes, you can go to the Sourcefabric website and download themes from <a href="http://www.sourcefabric.org/en/newscoop/themes/" class="uri" title="Newscoop themes">http://www.sourcefabric.org/en/newscoop/themes/</a></p>
<h2>Tools</h2>
<p>Before you begin a Newscoop implementation, getting these things together really should be your first steps.</p>
<ul>
<li>Working Newscoop installation</li>
<li>Text editor, preferably one with PHP markup</li>
<li>Image editor for preparing designs and images (GIMP, Photoshop, etc.)</li>
<li>Site specification (see the next chapter, <em>Turning your idea into a publication</em>)</li>
</ul>
<p>The steps to successfully install Newscoop can be found in the &quot;Newscoop for Journalists and Editors&quot; manual at <a href="http://manuals.sourcefabric.org" class="uri" title="Sourcefabric manuals">http://manuals.sourcefabric.org</a></p>
<p>While Newscoop includes a template editor which works perfectly well, you'll probably prefer to work locally on your computer. Good text editors include Gedit on Ubuntu, Kate on Kubuntu, Notepad++ or even Dreamweaver on Windows, and of course command line editors like Emacs, vi, pico and nano.</p>
<p><span id="ch007_turning-your-idea-into-a-publication.xhtml"></span></p>
<h1>Turning your idea into a publication</h1>
<p>While it's a natural impulse to want to jump right into the more hands-on chapters of the Newscoop Cookbook, you'll save yourself a lot of time and trouble if you approach your Newscoop implementation project in the way we recommend here. These recommendations represent consensus among our community on best practices for Newscoop implementations.</p>
<p>One very important initial step is to understand the human element to the technology you're about to implement - who is involved in the project? You can benefit a lot from understanding who fulfils the following:</p>
<ul>
<li>Who makes decisions? Who makes decisions on the site project? Who makes decisions on coverage, articles and resource allocation?</li>
<li>Who is the technical person? Who's the person in charge of the operation of the site, e-mail accounts and the like?</li>
<li>Who has which role in the current workflow? How do things get done now, and who does it?</li>
<li>What is the expected new workflow? How will things work for the staff after the new site project is finished?</li>
<li>What are the current and expected visitation patterns for readers of your publication?</li>
</ul>
<p>Being thorough at this stage helps to avoid making incorrect decisions or getting your decisions overturned at a later stage. In the worst case, you could end up with a dysfunctional design, and quite likely a dysfunctional project.</p>
<p>Draft a site specification that goes into as much detail as possible for the implementation, but remains flexible enough in the event of inevitable changes. This site specification, essentially the project's blueprint, should especially take into consideration the following:</p>
<h2>When is this project considered a success?</h2>
<p>What are the criteria for considering the project a success? For example, is the goal to increase page views or decrease the bounce rate? Is the goal to increase readership among a certain demographic or country?</p>
<p>Does the project do enough to make sure those goals are met?</p>
<p>Are the solutions you're proposing appropriate for the task at hand? If increasing reader time on site is a goal, does the site display enough &quot;additional stories&quot; links?</p>
<h2>Do you know enough about the organisation?</h2>
<p>Make sure you get as much information as possible on the following:</p>
<p>What do you know about your audience? Has market research been conducted? If so, what does it say? If your publication is using the Google Analytics tool, what does it say? What are the audience's needs, interests and technical capabilities? Needs and interests can also be things that the team can provide, but your users' technical capabilities (especially as delivered by Google Analytics) can help you determine the optimal design and level of interactivity for the project, affecting everything from font size to browser compatibility.</p>
<p>What is the functionality required? As much as you can, list and describe the functionality required in the project. Brief descriptions should suffice, but if you're thorough enough, you'll minimize the inevitable &quot;Uh-oh, we forgot about &lt;$fill_in_the_blank&gt;&quot; moments.</p>
<p>Which functionality is top priority? Which things are &quot;nice-to-have,&quot; as opposed to &quot;must-have?&quot; When the success criteria are clear, the answers to these questions should get a lot clearer too. Limited budgets also work pretty well to force clearer prioritization.</p>
<h3>Sitemap and features</h3>
<p>Get or produce a site map of the existing content structure. What content does the site have, and how is it arranged? How often is the site currently updated? Is there content being created that is going underutilized?</p>
<p>For example, the current site may be a blog publishing 10 items per day, and because it's a blog, items are published in a reverse chronological order with newest articles first. But major stories are getting buried by newer, less-important entries. This would be something to address with the new site structure.</p>
<p>Discuss the proposed new site structure. Does the new site involve multiple languages? Issues and sections, or topics? How often will the site be updated? Will you create a new issue every day/week/month? How many sections will the new site have, and what are their names?</p>
<h3>Subscriptions or no subscriptions?</h3>
<p>If you plan to use subscriptions on your site, find out as much as you can about the subscription and paywall mechanisms involved. What are the revenue expectations for the new subscription-based site? What are those expectations based on (market research or a snowball's chance in hell)? Are there markets for the content that have not previously been considered? For example, many countries have significant diasporas interested in getting news from home, and they're often willing to pay for quality news. For more on this, see the chapter about contemplating <em>Subscriptions and revenue</em>.</p>
<h3>Workflow</h3>
<p>What is the content workflow? Who on the staff is responsible for which content? You'll find a lot more on this in the chapter on <em>Planning your workflow</em>.</p>
<h3>Mashups, social media and other third-party services</h3>
<p>What third party services are involved? List the intended integration with third-party services (if any). Social media, video, audio, comments and other widgets would count here. How complicated will the envisioned integration be?</p>
<p>This Cookbook includes examples and code snippets for Soundcloud, Disqus, YouTube, Vimeo, Flickr, Twitter, Facebook, Gravatar and others.</p>
<h3>Custom development to set you apart</h3>
<p>What additional custom development is required (if any)? Are you going to do any of this custom development yourself, or will there be another contractor to handle it? If your project requires custom development, it's very important to clearly specify not only the functionality required, but also the ways it will extend or interact with Newscoop's APIs. Also, it's helpful to work closely with the Newscoop core developers, so that they can provide advice and feedback, as well as including any plugins or add-ons in future Newscoop releases.</p>
<h2>Final steps and time table</h2>
<p>Once the draft of the specification is ready, have all team members go over it and comment, and then when everybody's OK with it, finalize it. If you're in an organization with one or more big bosses, get them to sign off on it. Then your team can make binding time/work estimates for the project.</p>
<p>While such a specification might seem like a lot of work (it usually is), it will give you a much better idea of the overall scope of the project, and will also help you to make a more realistic estimate of the time and labor involved.</p>
<p><span id="ch008_planning-your-workflow.xhtml"></span></p>
<h1>Planning your workflow</h1>
<p><img src="static/workflow_nestan_tsetskhladze_eteri_turbadze_netgazeti.jpg" alt="Nestan Tsetskhladze and Eteri Turbadze of Netgazeti.ge" /></p>
<p><em>Newscoop users Nestan Tsetskhladze and Eteri Turadze of Netgazeti.ge in Batumi, Georgia. Photo by Douglas Arellanes (CC-BY)</em></p>
<p>Who is doing what? And when? What does it require and what depends on it? Who can do it? Who has to do it? And who signs off what's being done? All those questions can be grouped together into one concept: Workflow.</p>
<p>&quot;Workflow&quot; is one of those terms that gets discussed a lot among newsroom technology types, but workflow means many things to many people.</p>
<p>&quot;A workflow consists of a sequence of connected steps. It is a depiction of a sequence of operations, declared as work of a person, a group of persons, an organization of staff, or one or more simple or complex mechanisms&quot; is how Wikipedia describes it.</p>
<p>In Newscoop, workflow refers to the steps that must be taken in order to accomplish a certain task, usually related to publishing content on your site. Inside Newscoop there are three main milestones hardwired into the system which have proven to capture the essence of the article publishing process:</p>
<ul>
<li>New - the article has been generated, either by your staff or a citizen journalist</li>
<li>Submitted - the article has been fact checked, images are added, the sub editor approves</li>
<li>Published - either manually or automatically, the article goes live</li>
</ul>
<p>You can fine tune this process in Newscoop with custom switches for Article Types. For more detailed technical information, please see the chapter on <em>Topics, switches and keywords to structure content</em>, as well as the chapter in the manual Newscoop 4 for Journalists and Editors titled <em>Publishing Articles</em>.</p>
<p>But publishing articles is only a small part of the overall workflow of running a site, in fact: Newscoop has built-in publishing automation to do the job for you, once you have lined up the articles. There are a lot more aspects that you will need to consider at the beginning of your site planning, such as:</p>
<p>What are the steps the editors will have to take in order to place an article in the top position on the site? The top position might be determined by most recently published, by having the editor click and drag items in the section, by assigning a topic to an article with a name of &quot;top story&quot;, or maybe by attaching a custom switch. All of those approaches are valid and possible, but it's up to you (and your point of contact at the organization) to figure out what's best for their purposes.</p>
<p>Does the proposed workflow correspond to current staff levels? Does the functionality you're planning for the new site require a much larger staff? In other words, who's going to take and prepare all the photos for the very cool JQuery slideshow widget you want to implement? (What, you're a radio station and don't have too many photos in your archive?) Who's going to be in charge of monitoring site comments? Who's in charge of the overnight shift on the site? (Wait, you mean there's going to be an overnight shift?!?)</p>
<p>What are the issues that could lead to staff resistance to the project? While you may think that your slideshow widget is cool, the staff may say &quot;this stupid slideshow widget means my workload is doubled!&quot; The more you can anticipate issues with staffing and work with your point of contact to address them, the better off your project will be.</p>
<p>Who are the staff members capable of taking on the new roles your project introduces? For example, who are the avid social media advocates on the staff, and can they be brought in to take on the publication's social media tasks?<br />
</p>
<p>Where are the project's time and work savings for the staff, or will the project mean that everyone will have to stay late every day? Explaining time savings or additional burdens accurately and clearly will make you a lot of friends both on the staff and with the publisher.</p>
<p>Is your proposed workflow too complicated for non-technical staff? For example, when you have a dynamic page layout based on custom switches, are the steps clearly communicated to the staff, and are they clear on how to do it?</p>
<p>What are the ways your proposed workflow can fail? What can you do to simplify things without giving up basic functionality? Often, a proposed design and its accompanying workflow is too complicated for the staff to execute on a regular basis. If the staff can't do it, you'll need to make sure your design and approach doesn't fail.</p>
<h2>Keep an open mind</h2>
<p>Editors on tight deadlines love things that are simple to use. Well, as simple as possible, anyway. Such solutions never work on live sites!</p>
<p>Instead, try to solve undesired situations by fine-tuning your templates. Try to put yourself in the position of an editor, and predict the possible mistakes they'll make when they have to live with your work on a daily basis. Stay flexible and implement changes soon after the team agrees on them. A website is like a living organism; you'll have to look after it.</p>
<p><span id="ch009_subscriptions-and-revenue.xhtml"></span></p>
<h1>Subscriptions and revenue</h1>
<p>Newscoop provides the means to manage access to content with subscriptions. A subscription means that parts of your publication are only visible to users who are registered and logged in. By default, subscriptions are disabled - and planning your publication is completely unaffected by this chapter. Just proceed and make your publication. If you change your mind, come back to this chapter later and activate the Newscoop subscription system without changing your publication structure or content. If, on the other hand, you came to Newscoop because it provides an in-built subscription system, by all means, read on.</p>
<p>Because of the ongoing difficulties news organizations face in bringing in revenue, many have turned to subscriptions as a way of making money for their content. There's been a lot of heated debate about subscriptions or &quot;paywalls&quot; around content, but it's important to note that subscription management has been part of the code base in Newscoop since 1999, and has represented a significant source of revenue for many media organizations.</p>
<p>It's also important to point out that subscriptions do not necessarily have to be paid. You may decide that your publication will require that visitors share certain demographic information in return for site access, or you may decide that certain areas of the site are for members only. Or perhaps membership is sponsored by an advertiser, who provides free site access in return for the opportunity to promote their product to subscribers.</p>
<p>Newscoop flexibly supports subscription models. This allows you to switch from free to paid services and back again. Users can register themselves on your publication. The payments made for subscriptions need to be handled by your staff and applied to user profiles. Newscoop currently does not support fully automated transactions, where, for example, a user signs up for a subscription, pays by credit card and then immediately has site access.</p>
<h2>Access control for content and features</h2>
<p>Newscoop provides a fine-grained way to manage content in relation to subscribers and non-subscribers. You can set content to be subscriber-only:</p>
<ul>
<li>For all content in a publication</li>
<li>For all content in a specific section</li>
<li>For all content in a specific language</li>
<li>On an article-by-article basis</li>
<li>For an IP address range (useful when selling corporate subscriptions or to libraries)</li>
</ul>
<p>If a reader ventures into an area on your site where they do not have access, you can manage in your templates what they will get to see - or what they will be able to do (like writing comments). Newscoop is very flexible in changing this access on the template level. In another chapter of this Cookbook, you will find the nitty-gritty of templating for subscriber pages. Also, below you will find details of how to administer subscriptions in the administration interface.</p>
<p>When preparing your publication's site map, it's a very good idea to map out which parts of the site - if any - will be visible to subscribers only. It's also important to try to figure out how much of each article you want to display to non-subscribers. According to these decisions you might also plan the fields in an article - there could be a part of the article which is only available to subscribers, like the phone number in classifieds, while everything else is available to all readers.</p>
<p>For our purposes as site implementers, here are some things to consider:</p>
<ul>
<li>Is the entire publication for subscribers only?</li>
<li>Which sections are for subscribers only?</li>
<li>Which pages are free to non-subscribers? The front page? The section page?</li>
<li>How much of the article is free to non-subscribers?</li>
<li>What will your page &quot;sorry, this page is for subscribers only&quot; say, and how will it look?</li>
<li>What information will you require from your subscribers?</li>
</ul>
<p>Once you do work out your site's subscription strategy, you should read the chapter about <em>Subscriptions, registration and content access</em> in this Cookbook for specific templating approaches.</p>
<h2>Managing subscriptions in the admin interface</h2>
<p>The list of subscribers is available in the Newscoop administration interface by clicking on Users in the main navigation menu, then Subscribers:</p>
<p><img src="static/Screenshot184-Users_subscribers_menu.png" width="550" height="208" /></p>
<p>The subscription management interface includes a search tool which enables you to list readers according to several criteria, including subscription expiry date:</p>
<p><img src="static/Screenshot185-Subscriber_management.png" width="550" height="351" /></p>
<p>The duration of paid or trial subscriptions is determined by the default time periods set when you created the publication. (You can change these settings for your publication by clicking the Configure icon in the Publication list). During a trial period, the reader has a chance to make a payment, and consequently to have their subscription extended by an administrator.</p>
<p>The publication's administrator is automatically notified by e-mail of all new subscriptions. Subscribers also receive automatically generated e-mail reminders that their subscription will expire in two weeks. The text of the subscription expiry message is created in a Newscoop template. The default system template reads as follows:</p>
<pre><code>&quot;Dear &lt;reader&gt;,

This is an automatically generated e-mail message. Your &lt;subs_type&gt;
subscription (started on &lt;start_date&gt;) to publication &lt;publication&gt; will
expire on &lt;date&gt; (in &lt;number&gt; days).

Please enter the site http://&lt;pub_site&gt; to update subscription.&quot;</code></pre>
<p>This file is located in the system_templates folder and is named _subscription_notifier.tpl. It can and should be customized to best suit your needs and style.</p>
<h3>IP address access</h3>
<p>Publishers often sell corporate or institutional subscriptions, and Newscoop has support for these out of the box. Newscoop's IP based access feature can be used to automatically log in subscribers that have IP (Internet Protocol) addresses in a known range. This means that groups of readers with computers within that IP range do not need account names or passwords to access your subscription-only content.</p>
<p>To create an IP Address subscription, go to the subscriber management page in the administration interface, in the drop-down menu under Users -&gt; Subscribers.</p>
<p>First, create a subscriber account by clicking on the 'Add new subscriber' link, next to the green plus sign icon. Enter an account name, a password, and a full name with an e-mail address and phone number for a contact at the subscribing group or institution. You do not need to inform individual readers using IP address access of the existence of this account name and password; it's only for the subscriber contact.</p>
<p><img src="static/Screenshot186-Add_institutional_subscriber.png" width="550" height="508" /></p>
<p>Once the new subscription account has been created, click on the <strong>Add new</strong> link in the User IP access list management table on the right hand side of the page.</p>
<p><img src="static/Screenshot187-Add_new_IP.png" width="550" height="263" /></p>
<p>The form allows the input of a range of consecutive IP addresses. If necessary, more ranges can be added later. The start IP address is the lowest address in the range, while the number of addresses sets the size of the range, including any address ending in zero. For example, if a university library had the range of IP addresses 198.51.100.0 to 198.51.100.63, then you would enter:</p>
<ul>
<li>start IP address: 198.51.100.0</li>
<li>number of addresses: 64</li>
</ul>
<p><img src="static/Screenshot188-IP_range.png" width="380" height="265" /></p>
<p>It is not necessary to add anything to the Newscoop templates for IP based subscriptions to work.</p>
<p>It is also possible to search for subscribers based on known IP addresses. In the search box on the Subscriber management page, enter a number in at least one box in the field labelled IP address, starting on the left side. Click the <strong>Search</strong> button, and the page will display all subscribers that have known IP addresses which match that number (or numbers).</p>
<h2>Advertising and Newscoop</h2>
<p>The other side of the revenue equation for most online publishers is advertising. For this purpose, we recommend the robust and open source OpenX system <a href="http://www.openx.org/publisher/open-source-ad-server">http://www.openx.org</a></p>
<p>Ad insert codes - whether they are served from your own OpenX server, a banner ad display network or a service like Google AdWords - can be included in any template or sub-template, so you have complete flexibility in both placement and size.</p>
<p>You can also build your own templates to manage your banners. All three options are explored in greater detail in the chapter <em>Working with advertising</em>.</p>
<p><span id="ch010_structuring-your-content.xhtml"></span></p>
<h1>Structuring your content</h1>
<p>Newscoop's built-in logic for organizing content follows a logical and hierarchical structure derived from print publications. The following structure is built in by default:</p>
<ul>
<li>Publication, which consists of chronologically ordered issues</li>
<li>Issue, which consists of sections</li>
<li>Sections, which store articles</li>
<li>Articles, which can be of different Types</li>
<li>Article Types, which you can build specifically for your publication</li>
</ul>
<p>You can overrule this structure and change this hierarchy to fit your publication. For example, you could use issues as containers for storing the site's substructure (without chronological importance, for example). Or you could have only one issue with lots of sections. Some situations are best handled with multiple publications, while others might work best with an emphasis on Topics, not Sections.</p>
<p>How you organize your content usually depends on:</p>
<ul>
<li>The nature of the content being published</li>
<li>The workflow inside your team</li>
<li>The amount of content to be published</li>
<li>The rate new content is added</li>
</ul>
<h2>Example: Magazine</h2>
<p>Let's imagine the website of an existing weekly print magazine. In this Cookbook, we often use the template pack &quot;The Journal&quot; which reflects magazine structure. &quot;The Journal&quot; covers topics like politics, business, science and technology, health, entertainment and sports. In such a situation, it's logical to use the built-in publication &gt; issue &gt; section &gt; article structure in a straightforward way.</p>
<p>In Newscoop, you don't need to create a new issue from scratch every time - just select 'Add new issue' and then 'Use the structure of the previous issue' - you'll get an empty copy of the previous issue with all of its sections, settings and assigned templates.</p>
<p>&quot;The Journal&quot; can be seen at<span> </span><a href="http://journal.templates.sourcefabric.org/" class="uri">http://journal.templates.sourcefabric.org/</a><br />
</p>
<p>And another example, &quot;Newsport&quot;, can be seen at <a href="http://newsport.templates.sourcefabric.org/" class="uri">http://newsport.templates.sourcefabric.org/</a></p>
<h2>Example: Radio station site</h2>
<p>Newscoop can be used to power a radio station website, where content is bilingual, and where the 'publication' only has one issue. Each radio show has a section, and individual articles can be added into this section when a new episode of the show has been broadcast. Breaking news items are presented on the front page.</p>
<p>Newscoop's Soundcloud plugin can be used to upload individual audio clips and attach them to news articles. Recordings of entire shows can be uploaded and displayed on show articles. In addition, Sourcefabric's Airtime broadcast software can be used to automatically record live shows and upload them to Soundcloud.</p>
<p>An example of this approach can be seen at West Africa Democracy Radio's site at<span> </span><a href="http://www.wadr.org" class="uri">http://www.wadr.org</a>.</p>
<h2>Example: Blog</h2>
<p>Newscoop can be used as a blogging platform, which is especially suitable for group blogs or blogs with multiple authors and sections. For this purpose you might choose a structure where issues are months, or you could have yearly issues. The website front-end doesn't have to reflect the issue structure, as Newscoop can generate the listing of articles regardless of where they are in the structure; for example, ordering them by publication date.</p>
<p>Inside the blog, you can structure your content with Newscoop Topics. Topics are flexible and could either be used like tags, or in a hierarchical structure like categories or a taxonomy. Find out more about topics later in this manual.</p>
<p>An example of how Newscoop can be used as a high-end multi-lingual blogging platform can be seen in &quot;The Journalist&quot; template from Sourcefabric. The online demo is at <a href="http://journalist.templates.sourcefabric.org/" class="uri">http://journalist.templates.sourcefabric.org/</a></p>
<p>Any other structure logic can be developed and used with Newscoop. It's really a matter of good planning, and analysis of the factors discussed at the beginning of this chapter.</p>
<p><span id="ch012_the-power-of-gimme.xhtml"></span></p>
<h1>The power of $gimme</h1>
<p>Now that you're venturing into the territory of Newscoop, $gimme serves as your map and compass. $gimme is your reliable friend, your eager spy and the keeper of all knowledge. $gimme will give you information and answer your questions. &quot;Give me the name of the article&quot;, &quot;Give me the number of the issue&quot;, are requests $gimme will follow without even a shrug. Obviously, &quot;give me&quot; is how $gimme got its name. And $gimme speaks a simple language, along the lines of &quot;gimme publication name&quot; or &quot;gimme user email.&quot;</p>
<h2>$gimme and the Newscoop template language</h2>
<p>We like to refer to Newscoop's template language as a programming language for news. $gimme lets you list and arrange articles, display text and multimedia, prepare content for third-party services and include external content. It allows editors total design freedom and doesn't push them into a single way of presenting their stories.</p>
<h2>Easy to use, easy to read</h2>
<p>The philosophy behind the Newscoop template language (and $gimme) has been to make it as intuitive and easy to use as possible. Here's how you would use $gimme to display the name (or headline) of an article, like &quot;Newscoop 4 Cookbook now in shops&quot;:</p>
<pre class="prettyprint"><code>{{ $gimme-&gt;article-&gt;name }}</code></pre>
<p>Here's how you would use $gimme to display a section's description, such as &quot;Film Reviews from the Venice Film Festival&quot;</p>
<pre class="prettyprint"><code>{{ $gimme-&gt;section-&gt;description }}</code></pre>
<p>Display the date when an issue was published:</p>
<pre class="prettyprint"><code>{{ $gimme-&gt;issue-&gt;publish_date }}</code></pre>
<p>Display the file name of an article attachment:</p>
<pre class="prettyprint"><code>{{ $gimme-&gt;article-&gt;attachment-&gt;file_name }}</code></pre>
<p>Display the caption of an image, like &quot;Work started at Berlin's new airport&quot;:</p>
<pre class="prettyprint"><code>{{ $gimme-&gt;image-&gt;caption }}</code></pre>
<p>Display the map provider you're using for your site's base maps:</p>
<pre class="prettyprint"><code>{{ $gimme-&gt;map-&gt;provider }}</code></pre>
<p>Here are some more examples along the same lines:</p>
<pre class="prettyprint linenums"><code>{{ $gimme-&gt;article-&gt;keywords }}
{{ $gimme-&gt;article-&gt;comment-&gt;subject }}
{{ $gimme-&gt;publication-&gt;default_language }}
{{ $gimme-&gt;author-&gt;name }}
{{ $gimme-&gt;author-&gt;biography-&gt;text }}
{{ $gimme-&gt;image-&gt;photographer }}
{{ $gimme-&gt;user-&gt;name }}
{{ $gimme-&gt;user-&gt;phone }}</code></pre>
<p>And there's more. In the following chapters you'll see $gimme in action, providing all kinds of information added by editors and journalists.</p>
<h2>Separation of Presentation and Content</h2>
<p>Web designers use the concept of &quot;separation of presentation and content&quot; every day when developing in HTML and CSS. In the HTML you can emphasize parts of the content with the <strong>em</strong> element, so whatever is wrapped inside &lt;em&gt; tags is &quot;what&quot; needs to be emphasized. &quot;How&quot; the emphasis is being displayed can be set in the CSS file, assigning font family, size, style, color and so on.</p>
<h3>Develop your design without touching any code</h3>
<p>The Newscoop template engine gives you maximum flexibility to develop templates in HTML, CSS and JavaScript any way you like. You don't need to think in terms of blocks or widgets, and you can use sample text like &quot;Lorem ipsum&quot; when fine-tuning your layout. Turning your design into a template for Newscoop means to replace the sample text with $gimme. Here is a simple example. Here's the HTML we want to serve:</p>
<pre class="prettyprint linenums"><code>&lt;div&gt;Media and Journalism&lt;/div&gt;
&lt;h2&gt;Newscoop Cookbook released&lt;/h2&gt;
Anything web developers need to know about the CMS for professional journalists in one comprehensive desktop reference</code></pre>
<p>Separating content from presentation in the Newscoop template engine, we call in $gimme to give us what we need:</p>
<pre class="prettyprint linenums"><code>&lt;div&gt;{{ $gimme-&gt;section-&gt;name }}&lt;/div&gt;
&lt;h2&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/h2&gt;
{{ $gimme-&gt;article-&gt;subtitle }}</code></pre>
<p>Note that $gimme-&gt;article-&gt;name is wrapped in two curly brackets on either side. There's also a white space between the brackets on either side - while it's not mandatory, it's a good practice to make the template code more readable - but there are no whitespaces in $gimme-&gt;article-&gt;name. The template engine operates on the simple premise that it finds two opening and closing brackets, takes out anything in between and tries to make sense of it, replacing it with content from the database.</p>
<p>Once the logic is in place, the design can be changed any way you want:</p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;section&quot;&gt;{{ $gimme-&gt;section-&gt;name }}&lt;/div&gt;
&lt;h2 class=&quot;title&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/h2&gt;
&lt;span&gt;{{ $gimme-&gt;article-&gt;subtitle }}&lt;/span&gt;</code></pre>
<p>Or you can add even more material to control the design with CSS later:</p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;wrapper&quot;&gt;
    &lt;h2 class=&quot;title section{{ $gimme-&gt;section-&gt;number }}&quot;&gt;
       {{ $gimme-&gt;article-&gt;name }}&lt;/h2&gt;
    &lt;span&gt;{{ $gimme-&gt;article-&gt;subtitle }}&lt;/span&gt;
    &lt;div class=&quot;section&quot;&gt;{{ $gimme-&gt;section-&gt;name }}&lt;/div&gt;
&lt;/div&gt;</code></pre>
<p>Note how in the &lt;h2&gt; tag, a class is being added here that will change its value depending on the section the article is coming from. The interface designer can develop the look and feel of the site without having to go back to the programmer. Instead, all that needs to be changed is the template.</p>
<h2>Watch $gimme at work</h2>
<p>On its own, $gimme can pull information out of the content database and place it inside your template. When you set it loose inside Newscoop templates, it advances to become the project leader of your publication; beyond simple retrievals and replacements, $gimme is then in charge of making design decisions. Checking information with $gimme can create the most complex designs in very few lines of code.</p>
<p>To put $gimme into action, you'll use functions from the Newscoop template language. These functions are developed with the news organisation in mind, delivering publication content with simple commands. The functions available are being expanded continuously alongside new features in Newscoop, and an expanding range of features for already existing functionality. A complete Newscoop template design reference is included at the end of this Cookbook.</p>
<p>Now let's take a peek into an actual code snippet using $gimme. In this case you'll see a Newscoop function alongside $gimme. The function is called list_article_authors. Everything inside this function (it has a closing tag like in HTML) is repeated as many times as there are authors who have worked on this article.</p>
<p>The following example - in plain English - would be like asking $gimme: &quot;Could you please list all the authors that worked on this article?&quot;</p>
<p>Lets look at the code step by step and keep telling $gimme what to do.</p>
<pre class="prettyprint linenums"><code>&lt;ul&gt;
{{ list_article_authors }}
    &lt;li style=&quot;clear: left;&quot;&gt;</code></pre>
<p>For each author, we want the last name and then the first name separated by a comma.</p>
<pre><code>&lt;strong&gt;{{ $gimme-&gt;author-&gt;last_name }}&lt;/strong&gt;,
{{ $gimme-&gt;author-&gt;first_name }}&lt;br /&gt;</code></pre>
<p>Also show their image.<br />
</p>
<pre class="prettyprint"><code>&lt;img src=&quot;{{ $gimme-&gt;author-&gt;picture-&gt;imageurl }}&quot; align=&quot;left&quot; width=&quot;66px&quot; /&gt;</code></pre>
<p>Very important, show their full name alongside their work field (author, photographer, etc.), followed by their e-mail and their biography.</p>
<pre class="prettyprint linenums"><code>{{ $gimme-&gt;author-&gt;name }} ({{ $gimme-&gt;author-&gt;type }}):
&lt;a href=&quot;mailto:{{ $gimme-&gt;author-&gt;email }}&quot;&gt;
   {{ $gimme-&gt;author-&gt;email }}&lt;/a&gt;
{{ $gimme-&gt;author-&gt;biography-&gt;text }}</code></pre>
<p>When you are done, close this list. Thanks.<br />
</p>
<pre class="prettyprint linenums"><code>    &lt;/li&gt;
{{ /list_article_authors }}
&lt;/ul&gt;</code></pre>
<p>You can see how $gimme makes it easy to pull up information in your templates. There is a quite a lot happening in twelve lines of code. We are delivering a list of authors alongside images, biography and e-mail. This will look great in the header of the article.</p>
<p>After this very straightforward example, we'll leap ahead into using maps inside articles (covered in detail later in this Cookbook). The following code will list the name and geo-location information for an article. Note that only &quot;enabled&quot; locations are listed, because the journalist might still be working on the map in the administration interface. Once a location is set to be seen by the public, it shows up using this code:</p>
<pre class="prettyprint linenums"><code>Location(s):
{{ list_article_locations }}
    {{ if $gimme-&gt;location-&gt;enabled }}
        &lt;p&gt;
        {{ $gimme-&gt;location-&gt;name }}&lt;br /&gt;
        {{ $gimme-&gt;location-&gt;longitude }}, {{ $gimme-&gt;location-&gt;latitude }}
        &lt;/p&gt;
    {{ /if }}
{{ /list_article_locations }}</code></pre>
<p>We bet you've already started loving the power of $gimme. Besides $gimme, the Newscoop template language includes a complete set of functions and several other powerful capabilities that are condensed in the Newscoop Template Reference.</p>
<h2>There's more...</h2>
<p>The Newscoop template language is an extension to a popular and powerful template engine called Smarty, which itself is written in PHP. Smarty is popular among PHP users and developers, and comes with a rich set of functionality you can use in your templates. You will see some examples in this cookbook and find a full reference online at <a href="http://www.smarty.net" class="uri">http://www.smarty.net</a></p>
<p>With every new Newscoop version the template language and $gimme become more powerful. We keep developing and integrating new features, and extending the current ones, but we do also care about backward compatibility, which means we are not going to break your current website.</p>
<p>Once you understand the power of $gimme, you will start getting a sense of the freedom it offers you when building websites. Enjoy!</p>
<p><span id="ch013_best-practices-in-designing-your-content.xhtml"></span></p>
<h1>Best practices for designing your content</h1>
<p>Publications can have multiple types of content: editorial copy, interviews, graphics, photos, audio and video recordings, and other digital assets. When designing pages for these types of content, you should keep focussed on the vision and style you want to convey. The importance of good design cannot be valued highly enough, because it creates the readers' emotional response to your publication. This has been proven on numerous occasions where the redesign process dramatically changed a site's traffic, even though the content remained the same.</p>
<p>It will be helpful to keep the potential of the Newscoop template engine in mind when creating your site's design. As a designer, this allows you to not think in boxes, but to think outside the box.</p>
<p>In this chapter, we want to lay down some general guidelines helping you to deliver the best structure possible for your design. This can be seen as a number of steps that a template designer should follow, like defining the grid of the template, and designing sections and pages based on that grid.</p>
<p><img src="static/grid-system-2.png" /></p>
<p>The diagram above shows you how to structure the design and also provide a good experience for your readers. Please notice the white space between sections; it can provide room to breathe, and also make clear distinctions between sections.</p>
<h2>The template grid and the golden ratio</h2>
<p>Typical desktop and laptop computer displays have a resolution of at least 1024x768 pixels. 960 pixels is very close to the minimum limit of monitor resolution and is also divisible by 2, 3, 4, 5, 6, 8, 10, 12, 15, 16, 20, 24, 30, 32, 40, 48, 60, 64, 80, 96, 120, 160, 192, 240, 320 and 480. This makes it a highly flexible base number to work with.<br />
</p>
<p>With Newscoop and with most news sites we recommend using a template that is 960 pixels wide. Fluid templates can provide more flexibility, but they defy the purpose of having a grid. A 960-pixel-wide grid (<a href="http://960.gs/" class="uri">http://960.gs/</a>) can help you divide your design structure into Newscoop's template elements like header, article area, sidebar and footer. This grid can also provide enough space for photographs and videos, things most media outlets use in great quantities.</p>
<p>An important part of defining the template grid is using the golden ratio (<a href="http://en.wikipedia.org/wiki/Golden_ratio" class="uri">http://en.wikipedia.org/wiki/Golden_ratio</a>). The value of the golden ratio is 1.618, but approximations can also be used, such as a ratio of 5:3. The golden ratio is most often found in nature. Nautilus shells are a perfect example; the spirals get smaller and smaller in the same proportion to each other.</p>
<p>Using the golden ratio can provide your readers with a clear perspective over your content. To give you a good example of how the golden ratio can be used for template design, you can set the content area to 600 pixels wide and the sidebar to 360 pixels wide, so that the ratio between the content area and sidebar is pretty close to 1.6 (600 divided by 360).</p>
<p>Aesthetics can be measured and more importantly can be constructed, even built from the ground up. Following a few guidelines can help you make sure you're on the right path to having a publication that not only is compositionally balanced, but also aesthetically pleasing, so that people can enjoy reading each article or part of the site. Designing a template grid doesn't have to be exact math, it's more of an experimentation of ratios and white space along with text and images.<br />
</p>
<h2>Article design</h2>
<p>When putting your design into HTML, you should follow web standards and the common uses of HTML tags. This is important to make your content machine-readable, which will enable search engines to understand your content and rank it higher.</p>
<p>The use of headings (H1, H2, etc.) for titles and subtitles, DT for dialogs, CITE for citations, BLOCKQUOTE for quotations can be seen as limited, but they can provide a very clear definition of the elements that should be designed and then styled in CSS. Usually H1 is kept for the site title, which is positioned in the header area. Remaining headings are used for article titles and subtitles of the other parts of a story.</p>
<p>A good way to design the article content would be using only the inline elements mentioned above and also paragraphs for the text, keeping block tags like DIV only for the presentation layer. You'll find more information on the use of tags and their importance in the chapter titled <em>Search Engine Optimisation (SEO)</em>.</p>
<p>The template grid defines what goes inside an article and what goes outside of it. The same conventions established for the site's design can also be used for article design; don't try to reinvent the wheel. The ratios, subdivisions and modularizations should be the same across the entire site.<br />
</p>
<h2>Comments design</h2>
<p>Comments are not only the feedback received for a news story, but also the conversation of the community behind your site. When you design a comments structure you should take into account that people are not only communicating their ideas about the article, but also communicating with each other. Threaded comments reflect this dialogue very well. Adding profile pictures so that each reader has his/her own picture shown next to the comment is also a good idea.</p>
<p>When designing comments and comment forms, you do not have to follow and modify existing HTML structures. Because of Newscoop's advanced templating system, comment submission forms can be designed and styled completely using HTML and CSS.</p>
<p>There's a particular chapter in this manual titled <em>Profile pictures: Gravatar, Facebook, Twitter</em> where you can find more details about how users can set up profile pictures and display their pictures along with their comments.<br />
</p>
<h2>Designing the other parts of a Newscoop site<br />
</h2>
<p>Newscoop's header area is the part where the masthead and the main navigation take place. The masthead is your publication's logo or title. It should be the first thing your reader sees. It must be legible, tell people about your publication's intent and convey what they can expect. It's important to remember that while you may have looked at your own publication thousands of times, your readers may have not.</p>
<p>Archive design must have a clear structure, so the reader can quickly identify the article they are looking for. Usually it is shown in reverse chronological order, grouped by years, months or weeks. In Newscoop you can also use calendars to design your archives. More about this can be found in the chapter <em>Calendars with jQuery</em>.</p>
<p>A well-designed search results page can provide readers with a pleasant experience, so they won't be afraid to look for articles published in the past. This manual also has a chapter titled <em>Search Templates</em>, where you can find more information on getting the most out of search results pages. Don't forget that your search results page should display not only the article's name, but also small pieces of supporting information about the articles (developers like to call this &quot;metadata&quot;), like the date it was published, the author's name and the topics assigned to the article.</p>
<p>There's more information about the structure of other parts of Newscoop sites in the chapter <em>Understanding Templates, HTML &amp; CSS</em>.<br />
</p>
<h2>Typography</h2>
<p>Newscoop allows total control over font usage; you can even embed font faces using CSS3. Actually, one of the important parts of the design is not the choice of a single font, but all of the site's typography as a whole.</p>
<p>A principal part of typography is setting the line height. As mentioned before, line height is a good place to make use of the golden ratio. A value of 1.6 em should work just fine, but the recommended value is 1.5 em for the kinds of content mentioned in the beginning of this chapter.</p>
<p>An example of good typography for web design is to set the font size to 13 pixels and the line height to 21 pixels. The ratio between line height and font size is very close to the golden ratio.<br />
</p>
<p>Using too many font faces might have major impact on the professionalism a publication conveys. Displaying fewer font faces might be less confusing for the reader. Consider using one font face for titles and a different one for article content.</p>
<pre><code>&lt;link href=&quot;http://fonts.googleapis.com/css?family=Droid+Sans&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code></pre>
<p>The above line of code is an example of how to use Google Web Fonts for embedding new font faces in your design. There are several services that can provide this functionality; some are paid services like TypeKit, and some are available for free like Google Web Fonts. These services take care of providing the right font format for each browser. Some browsers are using standard font formats like OTF or WOFF (Web Open Font Format), while many mobile browsers use technologies like SVG for displaying font faces.</p>
<p><span id="ch014_preparing-designs-for-templates.xhtml"></span></p>
<h1>Preparing designs for templates</h1>
<p>One way to design for Newscoop templates involves slicing a static mock-up of your publication into multiple images. A graphics application such as GIMP or Adobe Photoshop can be used for this task. The resulting images can then be re-created using HTML and CSS. The main advantage of slicing up and re-creating the design is that it reduces the bandwidth load for your site, which means increases in your readership will scale better, and your readers will get the pages faster. For instance, design elements such as horizontal rules and colored backgrounds can be styled using CSS, and therefore do not need to be served as image files.<br />
</p>
<p>Let's look at the sample Template Package &quot;The Journal&quot;.</p>
<p><img src="static/screen-thejournal-front-topcut.png" /></p>
<p><em>Front page of the sample Template Package &quot;The Journal&quot;.</em></p>
<p>Before you begin the slicing process, you need to identify the main structural elements of the design, so that you know how to arrange and structure your HTML files. Dividing the design should follow the grid established in the previous chapter. The main divisions should end up being &lt;div&gt; tags. A &lt;div&gt; is a block containing images and text that can be positioned using CSS.</p>
<p>An important thing to remember when creating HTML files is that you should use IDs for &lt;div&gt; tags that are present only once in your site pages (e.g. navigation, sidebar, footer, etc.). You should use classes for &lt;div&gt; tags that are repeated more than once on the same page (e.g. links, pages, etc.)</p>
<h2>Dividing the front page template<br />
</h2>
<p>The diagram below shows how the design for &quot;The Journal&quot; front page template is divided:</p>
<p><img src="static/screen-thejournal-front_4.jpg" class="noborder" /></p>
<p>Your HTML files will end up being .tpl files, which are Newscoop template files. For &quot;The Journal&quot;, the front page template <strong>front.tpl</strong> is a skeleton which includes and positions the following sub-templates:</p>
<ul>
<li><strong>_html-head.tpl</strong> This is not visible in the diagram above, but it is an important template used on all site pages. It defines the 'head' tag section of HTML pages.</li>
<li><strong>top.tpl</strong> Includes all templates with prefix 'top', and creates remaining elements of the header section of the page (date, RSS link, logo). This template is repeated on all site pages.</li>
<li><strong>top-login.tpl</strong> Template used to generate the login form and register link. If a reader is logged in, it makes links to the reader's account page and to logout.</li>
<li><strong>top-highlights.tpl</strong> Lists the three newest articles with the switch 'highlight' switched on.</li>
<li><strong>top-recent-entries.tpl</strong> Lists the three last published news articles.</li>
<li><strong>top-search-box.tpl</strong> Generates the search form.</li>
<li><strong>top-nav.tpl</strong> Used for site-wide navigation.</li>
<li><strong>front-top-story.tpl</strong> Displays just the newest article with the switch 'On front page is on'.</li>
<li><strong>front-tabs.tpl</strong> Makes tabs with most-read and most-commented articles, and then lists the actual articles.</li>
<li><strong>front-three-categories.tpl</strong> Lists three articles (regardless of section) which have the switch 'On section page is on'.</li>
<li><strong>front-also-categories.tpl</strong> Makes a horizontally-scrollable list of 12 articles that don't have any special switch on.</li>
<li><strong>front-bottom-about.tpl</strong> Template with hard-coded 'About this site' content.</li>
<li><strong>front-bottom-meta.tpl</strong> Makes hard-coded links to important pages that are used for Newscoop administration, such as the administrator login.<br />
</li>
<li><strong>front-bottom-poll.tpl</strong> Displays the latest defined poll.</li>
<li><strong>footer.tpl</strong> This is the part of every page that contains links to 'about' pages and legal information.</li>
</ul>
<h2>Dividing the article and section templates<br />
</h2>
<p>The diagram below shows how article and section page designs can be divided into sub-templates. The <strong>top.tpl</strong> and <strong>footer.tpl</strong> sub-templates are re-used from the front page design, but in between these are different sub-templates. Some of these sub-templates may have been created for just one specific purpose, while others will be re-used again and again. </p>
<p><img src="static/screen-thejournal-templates_1.jpg" class="noborder" /><br />
</p>
<p><span id="ch015_organising-template-files.xhtml"></span></p>
<h1>Organising template files<br />
</h1>
<p>Every template package available for download from Sourcefabric has four main templates:</p>
<ul>
<li>Front page</li>
<li>Section page</li>
<li>Article page</li>
<li>404 page<br />
</li>
</ul>
<p>These are called - no surprise here - front.tpl, section.tpl, article.tpl and 404.tpl.</p>
<p>You could run a publication with these four templates and nothing else. But to make the most of the template engine's power, you should divide up your templates further, creating sub-templates which can be easily reused and edited.</p>
<p>There are some parts of pages which are identical, regardless of the section or the article. This is usually the case for the header, navigation and footer, for example. But it could also be an image stream from flickr, a Twitter feed, a 'Like' button from Facebook, or a similar icon for sharing content from a third party provider.</p>
<p>You don't have to duplicate this part of the template. In fact, it's even better to hand off these functions to sub-templates. Then when you apply a change to the sub-template, it will show up across your entire site.</p>
<p>You can take out sub-templates, place them in a subfolder and call them with an include, like this:</p>
<pre><code>{{ include file=&quot;set_thejournal/_tpl/article-comments.tpl&quot; }}</code></pre>
<p>As you can see in this example, the path to the template which is being included needs to be named. Planning your templates' folder structure carefully will save you time later, especially when you run more than one publication on Newscoop and have several different designs in action.</p>
<p>We encourage you to follow the folder structure described below. It's not set in stone; you can structure your templates and folders however you prefer, but the Newscoop community has agreed on this structure after years of working with templates. We consider it to be best practice. Also, the template packs Sourcefabric provides all feature this structure. If you use the same logic it will be easier to use examples or copy sub-templates from one template package to another. Read on to find out what we recommend when it comes to naming templates and placing them in your file system.</p>
<h2>Template naming<br />
</h2>
<p>Besides the main templates (front.tpl, section.tpl, article.tpl) you will probably have many sub-templates to run your publication. Depending on whether they're common across multiple pages, or unique to a page, you may follow these rules. But you don't have to, because Newscoop doesn't have reserved names for specific templates; it's really up to you to create your environment the way you like.</p>
<ol>
<li>_html-head.tpl is the template we provide for all links, meta tags and information globally needed for your publication, like jQuery, webfonts, CSS files and universal JavaScript.</li>
<li>Unique code for sections or articles can be called from _html-head.tpl using {{ if $gimme-&gt;template-&gt;name == &quot;path/to/article.tpl&quot; }} or with other IF conditions like switches, topics or keywords. Such additional includes could be slideshows or special CSS files. For quick development, having one template (for example _html-head.tpl) saves you lot of time when you have to introduce some changes, and keeps things consistent. You can always chop it up later.</li>
<li>Includes that are used on more/all pages can have short names, like header.tpl, main-nav.tpl, footer.tpl</li>
<li>Included templates that are specific for a single page (or a few pages from the same context) can have a prefix, like article-sidebar.tpl or front-top-story.tpl. This way you will have templates for article page grouped together in the template file listing. The same goes for archive, front page, search and so on.</li>
<li>Special templates that are not directly used to output content on the web page but to define context (for example the _html-head.tpl which defines the HEAD section of web pages, or some RSS or sitemap generators) can have the '_' (underscore) sign as the first character; this way, all such templates are grouped together on the top of the template listing page.</li>
</ol>
<h2>Folder structure</h2>
<p>Your templates will always be inside the filesystem path:</p>
<pre><code>/path/to/documentroot/templates/</code></pre>
<p>These files are accessible through the template editor of the Newscoop administration interface. Inside this folder you can add sub-folders. We recommend the following structure:</p>
<p><em><img src="static/template-structure.jpg" /></em></p>
<p>Here's some practical advice on how to make your life easier with a clean and functional folder structure:</p>
<ol>
<li>templates/<strong>set_name/</strong><br />
Replace &quot;name&quot; with the name of your template package. For example, we are using &quot;set_thejournal&quot; for the template package &quot;The Journal&quot;. The main templates are placed inside this folder, like front.tpl, section.tpl, article.tpl or universally used templates like search.tpl, archive.tpl, gallery.tpl etc. The include path is:<br />
{{ include file=&quot;set_thejournal/gallery.tpl&quot; }}</li>
<li>templates/<strong>set_name/_tpl/</strong><br />
All your sub-templates are collected inside this sub-folder. In our experience it isn't necessary to divide this into further sub-folders. Instead you should use the name of sub-templates for further clustering, like article-comments.tpl, article-author.tpl, etc. The include path is:<br />
{{ include file=&quot;set_thejournal/_tpl/article-comments.tpl&quot; }}</li>
<li>templates/<strong>set_name/_img/</strong><br />
If you need images on the file system for your publication, place them here. The source path is:<br />
&lt;img src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_name/_img/logo.png&quot; /&gt;</li>
<li>templates/<strong>set_name/_js/</strong><br />
Place all the JavaScript files you need in this folder. They are included like this in the header:<br />
&lt;script type=&quot;text/javascript&quot; src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_thejournal/_js/tabs.js&quot;&gt;&lt;/script&gt;</li>
<li>templates/<strong>set_name/_css/</strong><br />
You can place universal CSS files into this folder, things like grid, or font sizes. Alternatively you can use a subfolder (see next point). These CSS files are included like this:<br />
&lt;link href=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_thejournal/_css/default.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</li>
<li>templates/<strong>set_name/_css/skinname/</strong><br />
For the CSS files, we decided to introduce a subfolder, which is best being described as a skin. For example, the CSS in this folder could change the colour of your site, in which case you might have folders like &quot;red&quot;, &quot;blue&quot; and &quot;morning mist&quot; in here. You call these files with:<br />
&lt;link href=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_thejournal/_css/green/green-skin.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</li>
<li>templates/<strong>set_name/_misc/</strong><br />
Use this folder for additional code, like a Flash Player which is being embedded in your templates. The URL path is:<br />
http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_thejournal/_misc/<br />
If you need the folder path it would be:<br />
/path_to_document_root/templates/set_thejournal/_misc/<br />
</li>
</ol>
<p>If you check out our template packages you will see that beyond this strict structure, we actually get a bit looser and let our hair down. For example, you'll find image folders inside the CSS folders, providing background images. A good rule of thumb would be keep your ship in order for as long as you can. Then get flexible and sail with the wind.</p>
<p><span id="ch016_tips-and-tricks-for-the-template-novice.xhtml"></span></p>
<h1>Tips and tricks for the template novice</h1>
<p>This chapter is a collection of snippets offering a quick overview of the inclusion of files, modification of strings, working with date and time, and managing line breaks. The following chapters will bring these snippets to life. For more modifications, you can consult the <a href="http://www.smarty.net" class="uri">http://www.smarty.net</a> documentation.</p>
<h2>Including files </h2>
<p>Templates and sub-templates are included using the template path starting inside the <em>templates</em> folder:</p>
<pre><code>{{ include file=&quot;set_thejournal/_tpl/article-comments.tpl&quot; }}</code></pre>
<h2>Date and time</h2>
<p>For full date and time formatting options, see the template reference at the end of this manual.</p>
<p>Print <strong>current</strong> <strong>time</strong> (e.g. format: 25 April 2011, 16:20:45)</p>
<pre><code>{{$smarty.now|camp_date_format:&quot;%e %M %Y, %H:%i:%S&quot;}} </code></pre>
<p>Print <strong>date and time of publication</strong> of an article</p>
<pre><code>{{ $gimme-&gt;article-&gt;publish_date|camp_date_format:&quot;%e %M %Y, %H:%i:%S&quot; }} </code></pre>
<h2>Modifying strings</h2>
<p><strong>Stripping tags</strong> from WYSIWYG content</p>
<pre><code>{{ $gimme-&gt;article-&gt;intro|strip_tags }}</code></pre>
<p><strong>Truncate string</strong> to specific length</p>
<pre><code>{{ $gimme-&gt;article-&gt;intro|truncate:70 }}</code></pre>
<p><strong>Escaping HTML</strong> and stripping tags (e.g. for meta description)</p>
<pre><code>{{ $gimme-&gt;article-&gt;intro|strip_tags|escape:&#39;html&#39; }}</code></pre>
<p><strong>Upper</strong> and <strong>lower</strong> case</p>
<pre><code>{{ $gimme-&gt;article-&gt;name|upper }}
{{ $gimme-&gt;article-&gt;name|lower }}</code></pre>
<p> </p>
<p><span class="Apple-style-span">Replacing and chopping strings</span></p>
<p>Replacing parts of the string (example: whitespace into underscore)</p>
<pre><code>{{ $gimme-&gt;article-&gt;name|replace:&#39; &#39;:&#39;_&#39; }}</code></pre>
<p>You can also use a <strong>regular expression</strong> with regex_replace</p>
<pre><code>{{ $gimme-&gt;browser-&gt;moz_data.2|regex_replace:&quot;/\./&quot;:&quot;-&quot; }}</code></pre>
<p>|regex_replace:&quot;/\./&quot;:&quot;-&quot; replaces all dots with dashes. This can be useful in JavaScript elements. The following line uses regex_replace to replace fancy quotes like &amp;raquo; &amp;laquo; &amp;rdquo; and so on with &amp;quot;</p>
<pre><code>{{$gimme-&gt;article-&gt;name|regex_replace:&#39;/&amp;(.*?)quo;/&#39;:&#39;&amp;quot;&#39;}} </code></pre>
<p><strong>Trim a string</strong> (chop off whitespace at the beginning and end)</p>
<pre><code>{{ $gimme-&gt;article-&gt;seo_title|trim }} </code></pre>
<h2>Counting and statistics</h2>
<p>Counting characters, words, sentences and paragraphs:</p>
<pre><code>Headline &quot;{{ $gimme-&gt;article-&gt;name }}&quot; has 
{{ $gimme-&gt;article-&gt;name|count_characters }} characters and
{{ $gimme-&gt;article-&gt;name|count_words }} words.
The full article has
{{ $gimme-&gt;article-&gt;full_text|count_sentences }} sentences and
{{ $gimme-&gt;article-&gt;full_text|count_paragraphs }} paragraphs. </code></pre>
<h2>Useful conditions</h2>
<p>Checking <strong>if variable is empty</strong></p>
<pre><code>{{ if $gimme-&gt;article-&gt;seo_title|strip_tags|trim !== &quot;&quot; }}</code></pre>
<p>Using the if condition with these string modifiers makes sure that no HTML tags or whitespace is in the field. </p>
<h2>Avoiding line breaks</h2>
<p>Anything within {{strip}} {{/strip}} tags is stripped of extra spaces or carriage returns at the beginnings and ends of the lines before they are displayed. Let's say you had a publication where the value of the seo_title field often contained leading spaces, sometimes editors even get HTML tags into the field:</p>
<pre><code>                   &lt;strong&gt;Newscoop&lt;/strong&gt; Rocks!</code></pre>
<p>The following example will output a single line starting and ending with quotes, but without leading spaces, like &quot;STARTNewscoop Rocks!END&quot;. Any HTML code will be stripped out.</p>
<pre><code>&quot;{{ strip }}START
{{ if $teststring|strip_tags|trim !== &quot;&quot; }}
  {{ $teststring|strip_tags|trim }}
{{ /if }}END
{{ /strip }}&quot;</code></pre>
<p>If you want to keep whitespace between elements, use a workaround with:</p>
<pre><code> {{ textformat wrap=200 }}</code></pre>
<p>This will turn everything into a single line with a space between each element, and applying a line break every 200 characters. Adjust the value of 200 to meet your needs. The example below will list various values in one line inside the body tag:</p>
<pre><code>&lt;body class=&quot;{{ textformat wrap=200 }}
{{ $gimme-&gt;browser-&gt;browser_working }}
{{ $gimme-&gt;browser-&gt;ua_type }}
{{ $gimme-&gt;browser }}
{{ /textformat }}&quot; &gt; </code></pre>
<p> </p>
<p><span id="ch018_publication.xhtml"></span></p>
<h1>Publication</h1>
<p>Newscoop content is organized in a hierarchical structure which conforms to the tradition of newspapers and magazines: publications, issues, sections and articles. Each publication is made up of issues, each issue is in turn made up of sections, which are comprised of articles.</p>
<p>In this chapter we'll look at how publication settings can be set in the admin interface and then accessed by $gimme-&gt;publication and its variants.</p>
<p><img src="static/Screenshot29-General_attributes.png" width="490" height="725" /></p>
<p><em>Configure Publication view for general attributes and comments in the administration interface</em></p>
<p>You can set a range of parameters in the configuration when creating or editing a publication in the administration interface. This chapter will explain only those parameters related to the $gimme-&gt;publication object through the template language.</p>
<p>Each publication has an attributes menu (accessible in the administration interface under Content-&gt;Publication and then by clicking on the wrench-and-screwdriver icon for configure).</p>
<p>There are three sections in the publication attributes menu for each publication:</p>
<ul>
<li><strong>General attributes</strong> and <strong>Comments</strong> on the left side of the menu</li>
<li>Subscription defaults on the right side of the menu</li>
</ul>
<h2>General Attributes</h2>
<p>The fields in the general attributes section present in $gimme-&gt;publication are listed below:</p>
<p>Name of the publication (e.g. &quot;The Journal&quot;)</p>
<pre><code>{{ $gimme-&gt;publication-&gt;name }}</code></pre>
<p>Default Site Alias is the name of the web server on which your publication will be hosted (e.g. www.example.com). Newscoop enables multiple publications to be hosted on the same web server, provided that a unique alias has been set up for each publication by your system administrator. If you try to access the alias URL before this setting is made, you will see an error message indicating that the alias was not yet assigned to a publication.</p>
<pre><code>{{ $gimme-&gt;publication-&gt;site }}</code></pre>
<p>Here is an example using $gimme-&gt;publication-&gt;site taken from The Journal's _tpl/_html-head.tpl:</p>
<pre class="prettyprint linenums"><code>&lt;script type=&quot;text/javascript&quot;&gt;
var tb_pathToImage = &#39;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_thejournal/_img/loadingAnimation.gif&#39;;
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_thejournal/_js/tabs.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_thejournal/_js/scripts.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_thejournal/_js/easing.js&quot;&gt;&lt;/script&gt;
&lt;link rel=&quot;index&quot; title=&quot;The Journal&quot; href=&quot;http://{{ $gimme-&gt;publication-&gt;site }}&quot;&gt;</code></pre>
<p>$gimme-&gt;publication-&gt;default_language returns information related to the publication's default language. Here are a few examples:</p>
<pre class="prettyprint linenums"><code>&lt;ul&gt;
    &lt;li&gt;name: {{ $gimme-&gt;publication-&gt;default_language-&gt;name }}
        is the language name&lt;/li&gt;
    &lt;li&gt;number: {{ $gimme-&gt;publication-&gt;default_language-&gt;number }}
        is language identifier in the Newscoop database (integer value)&lt;/li&gt;
    &lt;li&gt;english_name: {{ $gimme-&gt;publication-&gt;default_language-&gt;english_name }}
        is language name in English&lt;/li&gt;
    &lt;li&gt;code: {{ $gimme-&gt;publication-&gt;default_language-&gt;code }}
        is language international code&lt;/li&gt;
    &lt;li&gt;defined: {{ if $gimme-&gt;publication-&gt;default_language-&gt;defined }}SET{{ else }}NOT SET{{ /if }}
        is boolean value (true/false) - true if the language was set in the current environment; false otherwise&lt;/li&gt;
&lt;/ul&gt;</code></pre>
<p>A full reference to all properties of the template objects is given at the end of this book. The examples covered here might not cover all possibilities.</p>
<h2>Comments</h2>
<p>The fields in the Comments section in the screenshot above are accessible through $gimme-&gt;publication as follows:</p>
<p>Public allowed to comment? Check this box if non-subscribers will be allowed to make comments on articles</p>
<pre class="prettyprint"><code>{{ if $gimme-&gt;publication-&gt;public_comments }}YES{{ /if }}</code></pre>
<p>Public comments moderated? If you check this box, non-subscriber comments will be hidden from readers until they have been reviewed by a staff member</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode prettyprint&gt; {{ if $gimme-&gt;publication-&gt;moderated_comments }}MODERATED{{ /if }} &lt;/pre&gt; &lt;p&gt;Use CAPTCHA to prevent spam? The reader must type in random letters or numbers shown before they can post a comment&lt;/p&gt; &lt;pre class="><code class="sourceCode ada"><a class="sourceLine" id="cb44-1" data-line-number="1">{{ <span class="kw">if</span> $gimme-&gt;publication-&gt;captcha_enabled }}CAPTCHA{{ /<span class="kw">if</span> }}</a></code></pre></div>
<p>You can see some of these examples in action in the advanced section of this Cookbook.</p>
<h2>Subscription Defaults</h2>
<p>The rest of the fields are related to subscriptions, which you can adjust later if you wish. First, you have to select a time unit for your subscriptions; which could be days, months, weeks or years.</p>
<p><img src="static/Screenshot30-Subscription_defaults.png" width="340" height="400" /></p>
<p><em>Configure Subscription default view in the administration interface</em> </p>
<p>You can set two types of subscriptions: paid and trial. Paid subscriptions have the following properties:</p>
<ul>
<li>Currency: the subscription currency. Even if a subscription request is sent and the currency setting is changed before payment, the information about the subscriber's payment due is correctly recorded</li>
<li>Time unit cost per one section:
<ul>
<li>for one language: the price for access to a particular section in a single language</li>
<li>for all languages: the price for access to a section in all available languages</li>
</ul></li>
<li>Default time period: the usual duration of the paid subscription. This value is used when a reader subscribes through the website. The period for a particular subscription can be modified from the administration interface</li>
</ul>
<p>Here is some sample code for subscriptions:</p>
<pre class="prettyprint linenums"><code>&lt;h3&gt;Subscriptions&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Trial subscription: {{ $gimme-&gt;publication-&gt;subscription_trial_time }} {{ $gimme-&gt;publication-&gt;subscription_time_unit }}&lt;/li&gt;
    &lt;li&gt;Paid subscription: {{ $gimme-&gt;publication-&gt;subscription_paid_time }} {{ $gimme-&gt;publication-&gt;subscription_time_unit }}&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Subscription costs:&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;{{ $gimme-&gt;publication-&gt;subscription_currency }} {{ $gimme-&gt;publication-&gt;subscription_unit_cost }} (access one language)&lt;/li&gt;
    &lt;li&gt;{{ $gimme-&gt;publication-&gt;subscription_currency }} {{ $gimme-&gt;publication-&gt;subscription_unit_cost_all_lang }} (access all languages)&lt;/li&gt;
&lt;/ul&gt;</code></pre>
<p>Controlling access based on subscriptions is described in the chapter titled &quot;Subscriptions, Registration and Content Access.&quot;</p>
<p><span id="ch019_issues.xhtml"></span></p>
<h1>Issues</h1>
<p>If you've worked on a periodical publication (meaning that it's regularly published on a daily, weekly, monthly or quarterly schedule), you're familiar with the concept of issues. If you come from a blogging background, you're probably used to an unstructured process of publishing your articles. Often blogging systems will create arbitrary issues in your archive by clustering articles, for example in months.</p>
<p>In this chapter we'll look at how Newscoop works with issues, and how each issue's characteristics such as name, publish date and URL can be accessed in the template language.</p>
<p>In Newscoop, each issue can have a separate template assigned to it, meaning that you can have a different layout for different seasons, events or even different layouts for 1-, 2- or 3-column headlines (especially useful for breaking news coverage or slow news days). You can also translate individual issues. And, from the administration interface, you set automated publishing for an entire issue.</p>
<p>From the Newscoop administration interface for The Journal, you can access the issue details menu by going to Content-&gt;The Journal and then clicking on the wrench-and-screwdriver Configure icon.</p>
<p>Here is an example template that returns a number of attributes for a given issue:</p>
<pre class="prettyprint linenums"><code>&lt;h3&gt;Issue No.{{ $gimme-&gt;issue-&gt;number }}: {{ $gimme-&gt;issue-&gt;name }}&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Published: {{ $gimme-&gt;issue-&gt;publish_date|camp_date_format:&quot;%e. %M %Y&quot; }}&lt;/li&gt;
    &lt;li&gt;Using template: {{ $gimme-&gt;issue-&gt;template-&gt;name }}&lt;/li&gt;
    &lt;li&gt;Inside publication: {{ $gimme-&gt;issue-&gt;publication-&gt;name }}&lt;/li&gt;
    &lt;li&gt;URL name: .../{{ $gimme-&gt;issue-&gt;url_name }}/&lt;/li&gt;
    &lt;li&gt;Latest issue? {{ if $gimme-&gt;issue-&gt;is_current }}yes{{ else }}no{{ /if }}&lt;/li&gt;
&lt;/ul&gt;</code></pre>
<p>For &quot;The Journal,&quot; this displays something like this:</p>
<blockquote>
<p><strong>Issue No.13: January 2011</strong></p>
</blockquote>
<div>
<ul>
<li>Published: 1. January 2011</li>
<li>Using template: set_thejournal/front.tpl</li>
<li>Inside publication: The Journal</li>
<li>URL name: .../jan2011/</li>
<li>Latest issue? yes</li>
</ul>
</div>
<p>A full reference of properties for the object $gimme-&gt;issue can be found at the end of this manual.</p>
<h3>Using 'set' and 'unset' to change values for an issue</h3>
<p>In the templates you can also change the values for a given issue. In the following example this is done to include static pages from the first issue (example taken from _tpl/footer.tpl of &quot;The Journal&quot;):</p>
<pre class="prettyprint linenums"><code>{{ set_issue number=&quot;1&quot; }}
{{ set_section number=&quot;5&quot; }}
{{ list_articles }}
    &lt;li class=&quot;page_item&quot;&gt;&lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot; title=&quot;{{ $gimme-&gt;article-&gt;name }}&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;&lt;/li&gt;
{{ /list_articles }}</code></pre>
<p>You can set the issue name and the issue number. You can reverse the issue to the default value (the value for the default runtime environment of the displayed page):</p>
<pre class="prettyprint"><code>{{ set_default_issue }}</code></pre>
<p>You can also set the issue to the last published issue:</p>
<pre class="prettyprint"><code>{{ set_current_issue }}</code></pre>
<p>If you want to drop the information you have set, you can use:</p>
<pre class="prettyprint"><code>{{ unset_issue }}</code></pre>
<p>Unsetting an issue does not lose the issue value forever. It can be set with the above commands to default, current or an assigned value.</p>
<p><span id="ch020_sections.xhtml"></span></p>
<h1>Sections</h1>
<p>Sections are distinct clusters of articles. You will have seen sections in most print publications: Culture, Business, Sports, International Affairs, and so on. Usually these sections are visible in the publication's navigation; below you can see an example for the sample publication &quot;The Journal&quot;. In this case, the section POLITICS is active, either because the reader is looking at the content of this section, or is reading an article inside the section:</p>
<p><img src="static/screen-thejournal-navigation-sectionactive.png" /></p>
<p>Sections can be translated, and sections also have a description which can be added in the administration interface. The Newscoop developers are currently working on access levels for editors and journalists along section lines, meaning that you can assign your staff to sections and they are only allowed to work inside that section.</p>
<p>Here you can see the $gimme-&gt;section object in action:</p>
<pre class="prettyprint linenums"><code>&lt;h3&gt;Section No.{{ $gimme-&gt;section-&gt;number }}: {{ $gimme-&gt;section-&gt;name }}&lt;/h3&gt;
{{ $gimme-&gt;section-&gt;description }}
&lt;ul&gt;
    &lt;li&gt;Published: {{ $gimme-&gt;section-&gt;publish_date|camp_date_format:&quot;%e. %M %Y&quot; }}&lt;/li&gt;
    &lt;li&gt;Using template: {{ $gimme-&gt;section-&gt;template-&gt;name }}&lt;/li&gt;
    &lt;li&gt;Inside: {{ $gimme-&gt;section-&gt;publication-&gt;name }}/{{ $gimme-&gt;section-&gt;issue-&gt;name }}&lt;/li&gt;
    &lt;li&gt;URL name: .../{{ $gimme-&gt;section-&gt;url_name }}/&lt;/li&gt;
&lt;/ul&gt;</code></pre>
<p>This displays something along these lines, depending on where you are, in &quot;The Journal&quot;:</p>
<blockquote>
<p><strong>Section No.40: Health</strong></p>
<p>All the things that do you good.</p>
</blockquote>
<div>
<ul>
<li>Published: 20. April 2011</li>
<li>Using template: set_thejournal/section.tpl</li>
<li>Inside: The Journal/January 2011</li>
<li>URL name: .../health/</li>
</ul>
</div>
<p>Note: A section's publishing date is the same as the publishing date of the issue.</p>
<h2>Using $gimme-&gt;section in the navigation template</h2>
<p>In your navigation, you can use $gimme-&gt;section to check which element of the navigation needs to be active, because this is the section the reader is in (example taken from_tpl/top-nav.tpl of &quot;The Journal&quot;):</p>
<pre class="prettyprint linenums"><code>{{ list_sections }}
    &lt;li class=&quot;cat-item{{ if $gimme-&gt;section-&gt;number ==
    $gimme-&gt;default_section-&gt;number }} current_page_item{{ /if }}&quot;&gt;
        &lt;a href=&quot;{{ uri options=&quot;section&quot; }}&quot; title=&quot;View all posts filed under {{ $gimme-&gt;section-&gt;name }}&quot;&gt;{{ $gimme-&gt;section-&gt;name }}&lt;/a&gt;
    &lt;/li&gt;
{{ /list_sections }}</code></pre>
<p>{{ if $gimme-&gt;section-&gt;number == $gimme-&gt;default_section-&gt;number }} checks if the section number provided by the list function is identical with the one of the page. If this is the case, an additional class is added. This class is then used in the CSS to style this element.</p>
<h2>Listing Sections</h2>
<p>In the above example, list_sections was already introduced. The list commands (for issues, sections, articles, languages, comments and others) can be tuned in many ways. A full reference can be found at the end of this manual.</p>
<p>Lists are usually not so elaborate when used on sections. You'll find more interesting examples in the chapter on articles. For sections, ordering is probably the most commonly used feature. Here are some examples; ordering by number (ascending):</p>
<pre class="prettyprint linenums"><code>{{ list_sections order=&quot;bynumber asc&quot; }}
    {{ $gimme-&gt;section-&gt;number }}. {{ $gimme-&gt;section-&gt;name }}
{{ /list_sections }}</code></pre>
<p>..or ordering by number (descending):</p>
<pre class="prettyprint linenums"><code>{{ list_sections order=&quot;bynumber desc&quot; }}
    {{ $gimme-&gt;section-&gt;number }}. {{ $gimme-&gt;section-&gt;name }}
{{ /list_sections }}</code></pre>
<p>This returns the section numbers in ascending or descending order, and also lists their names.</p>
<h2>Setting and Unsetting Section</h2>
<p>You can also change the section's values in the templates. In the following example this is done to access the static pages in section number 5 of the first issue (the example is taken from _tpl/footer.tpl of &quot;The Journal&quot; sample publication):</p>
<pre class="prettyprint linenums"><code>{{ set_issue number=&quot;1&quot; }}
{{ set_section number=&quot;5&quot; }}
{{ list_articles }}
    &lt;li class=&quot;page_item&quot;&gt;&lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot; title=&quot;{{ $gimme-&gt;article-&gt;name }}&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;&lt;/li&gt;
{{ /list_articles }}</code></pre>
<p>You can set the section name and the section number. You can reverse the section to the default value (the value for the default runtime environment of the displayed page):</p>
<pre class="prettyprint"><code>{{ set_default_section }}</code></pre>
<p>If you want to drop the information, you can use:</p>
<pre class="prettyprint"><code>{{ unset_section }}</code></pre>
<p>Unsetting a section does not lose the section information forever, it can be set with the above commands back to default, or an assigned value.</p>
<p><span id="ch021_articles.xhtml"></span></p>
<h1>Articles</h1>
<p>In this chapter you will learn how to display elements of an article, as well as building article lists. Among all templates, <strong>article.tpl</strong> is generally the one where most template functions are called, and many sub-templates are included. No surprise, since a lot of things usually show up in an article page:</p>
<ul>
<li>title</li>
<li>authors</li>
<li>publish date</li>
<li>intro</li>
<li>full text</li>
<li>attachments</li>
<li>comments</li>
<li>map</li>
<li>the list of other articles from the same section</li>
<li>...?</li>
</ul>
<p>Each article has an <strong>Article Type</strong>, which has a list of fields you set up to reflect the content (like &quot;intro&quot;, &quot;twitter&quot;, &quot;full_text&quot;, &quot;seo_title&quot; and so on). Some of the elements in the list above refer to fields defined in the Article Type, like title, intro or full text. Others are objects related to an article, like attachments, maps or comments. There can also be references to objects independent from the article, which are linked to the article in the Article Edit screen of the administration interface, like authors.</p>
<p>You are advised to use the {{ include }} feature of the template engine to manage all possible shapes and forms an article can take. Chop your article template into sub-templates and call them in when and where you need them. As we already described in a previous chapter on cutting a HTML page into templates, it is much easier to divide a template into pieces and use includes.</p>
<p>You can take a look at the example article.tpl in the template pack &quot;The Journal&quot;.</p>
<p>Best practice is to separate the main article content from the other auxiliary parts. That's why we have different template includes like:</p>
<pre><code>{{ include file=&quot;set_thejournal/_tpl/article-cont.tpl&quot; }}
{{ include file=&quot;set_thejournal/_tpl/article-comments.tpl&quot; }}
{{ include file=&quot;set_thejournal/_tpl/article-map.tpl&quot; }}
{{ include file=&quot;set_thejournal/_tpl/sidebar-related.tpl&quot; }}</code></pre>
<p>Let's take a look at what is going on inside the _tpl/article-cont.tpl file:</p>
<p><img src="static/screen-thejournal-article-cont.png" /></p>
<p><em>Design delivered by template _tpl/article-cont.tpl</em></p>
<p>The article title is the most important thing in the Article. It should use either the &lt;h1&gt; or &lt;h2&gt; heading tag (depending on how you decided to mark up your publication name; see more on these issues in the chapter on Search Engine Optimisation):</p>
<pre class="prettyprint"><code>&lt;h2&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/h2&gt;</code></pre>
<p>You can refer to the publish date and the section where the article came from. Article authors, photographers and other contributors are being mentioned next.</p>
<pre class="prettyprint linenums"><code>Published on {{ $gimme-&gt;article-&gt;publish_date|camp_date_format:&quot;%e %M %Y&quot; }}
in &lt;a href=&quot;{{ uri options=&quot;section&quot; }}&quot;&gt;{{ $gimme-&gt;section-&gt;name }}&lt;/a&gt;
&lt;br /&gt;
By: {{ list_article_authors }}
      {{ $gimme-&gt;author-&gt;name }} ({{ $gimme-&gt;author-&gt;type|lower }})
       {{ if !$gimme-&gt;current_list-&gt;at_end }}, {{ /if }}
    {{ /list_article_authors }}</code></pre>
<p>Do you map and display locations? Great! Here is how to display them on the page:<br />
</p>
<pre class="prettyprint linenums"><code>Location(s): {{ list_article_locations }}
              {{ if $gimme-&gt;location-&gt;enabled }}{{ $gimme-&gt;location-&gt;name }}
               {{ if $gimme-&gt;current_list-&gt;at_end }}{{ else }}, {{ /if }}
              {{ /if }}
             {{ /list_article_locations }}</code></pre>
<p>Now let's start the story. In the following code snippet we will display the introduction from the article, using the Article Field <strong>intro</strong>. We are also checking if the image with the number 1 is present and present it accordingly. The last line lists the rest of the story, stored in the Article Field <strong>full_text</strong>.</p>
<pre class="prettyprint linenums"><code>{{if $gimme-&gt;article-&gt;has_image(1)}}&lt;img src=&quot;{{url options=&quot;image 1&quot;}}&quot; alt=&quot;{{$gimme-&gt;article-&gt;image1-&gt;description}}&quot; /&gt;{{/if}}
&lt;div class=&quot;intro&quot;&gt;{{ $gimme-&gt;article-&gt;intro }}&lt;/div&gt;
&lt;div class=&quot;full_text&quot;&gt;{{ $gimme-&gt;article-&gt;full_text }}&lt;/div&gt;</code></pre>
<p>Not that difficult, is it? If you are still with us, go an extra round and check if the content is actually available to the reader, with $gimme-&gt;article-&gt;content_accessible. If the value returned is TRUE, either the article is available to everybody or the reader is logged in and has the right to access the article. You can find more on subscription management in the section of this Cookbook on <em>Advanced templating</em>.</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;content_accessible }}
  {{if $gimme-&gt;article-&gt;has_image(1)}}&lt;img src=&quot;{{url options=&quot;image 1&quot;}}&quot; alt=&quot;{{$gimme-&gt;article-&gt;image1-&gt;description}}&quot; /&gt;{{/if}}
  &lt;div class=&quot;intro&quot;&gt;{{ $gimme-&gt;article-&gt;intro }}&lt;/div&gt;
  &lt;div class=&quot;full_text&quot;&gt;{{ $gimme-&gt;article-&gt;full_text }}&lt;/div&gt;
{{ else }}
  &lt;p&gt;This article is accessible only to registered and logged in users!&lt;/p&gt;
{{ /if }}</code></pre>
<p>As you can see, the <strong>article-cont.tpl</strong> sub-template is mostly about the article content itself. The rest are auxiliary, but very important parts. They are also included in the <strong>article.tpl</strong> template.</p>
<h2>Article Comments</h2>
<p>Comments are explained in more detail in the following chapter. We believe that they are an essential way to communicate with your audience - and for your audience to communicate among themselves. In &quot;The Journal&quot; template pack, comments look like this:</p>
<p><img src="static/SCN8_1.PNG" /></p>
<p><em>Screenshot from the comments on &quot;The Journal&quot; template package.</em></p>
<h2>Article Map</h2>
<p>To round up the article page, here is the line that displays a map with locations that have been set in the Article Edit page by your journalists. There is more about maps and geolocation in a later chapter.</p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;widget block&quot;&gt;&lt;h3&gt;Map&lt;/h3&gt;
{{ map show_locations_list=&quot;true&quot; show_reset_link=&quot;Show initial Map&quot; width=&quot;300&quot; height=&quot;250&quot; }}
&lt;/div&gt;</code></pre>
<p><img src="static/SCN7.PNG" /></p>
<p><em>Map embedded in article. Locations are handled in the Article Edit screen.</em></p>
<h2>Article Attachments</h2>
<p>Journalists can attach files to an article. We also include them in the article.tpl as a separate sub-template <strong>article-attachments.tpl</strong>. The code snippet below checks if attachments are present, and displays a list if there are.</p>
<pre class="prettyprint linenums"><code>{{if $gimme-&gt;article-&gt;has_attachments}}
 &lt;ul&gt;
  {{list_article_attachments}}
   &lt;li&gt;
    &lt;a href=&quot;{{uri options=&quot;articleattachment&quot;}}&quot;&gt;
    {{$gimme-&gt;attachment-&gt;file_name}}&lt;/a&gt;
    [{{ $gimme-&gt;attachment-&gt;extension }}|{{$gimme-&gt;attachment-&gt;size_kb}}Kb]
    &lt;br /&gt;
    {{$gimme-&gt;attachment-&gt;description}}
   &lt;/li&gt;
  {{/list_article_attachments}}
 &lt;/ul&gt;
{{/if}}</code></pre>
<h2>Listing Articles</h2>
<p>You can create lists of articles, which is usually done inside a section overview of the content. But it can also be interesting to use this on the article page for &quot;further reading&quot; or &quot;related articles&quot;.<br />
</p>
<p>Listing articles with <strong>list_articles</strong> is the most powerful and mostly used statement in Newscoop. You can check the Template Reference at the end of this Cookbook for all function options. Here are just a few examples to give you a taste:</p>
<p>List the last 10 articles:<br />
</p>
<pre class="prettyprint linenums"><code>{{ list_articles length=&quot;10&quot; order=&quot;byPublishDate desc&quot; ignore_issue=&quot;true&quot; ignore_section=&quot;true&quot;}}
{{* code goes here *}}
{{ /list_articles }}</code></pre>
<p>Show last published article, of type 'article', from section number 100, regardless of issue:</p>
<pre class="prettyprint linenums"><code>{{list_articles length=&quot;1&quot; constraints=&quot;type is article section is 100&quot; ignore_issue=&quot;true&quot; order=&quot;bypublishdate desc&quot;}}
{{* code goes here *}}
{{/list_articles}}</code></pre>
<p>List the last article from section numbers 100 to 140:</p>
<pre class="prettyprint linenums"><code>{{ list_sections constraints=&quot;number greater_equal 100 number smaller_equal 140&quot; }}
  {{ list_articles length=&quot;1&quot; ignore_issue=&quot;true&quot; order=&quot;byPublishDate desc&quot; }}
{{* code goes here *}}
  {{/list_articles}}
{{/list_sections}}</code></pre>
<p>List 10 more articles from the same section, ordered by publish date, excluding the one already defined:</p>
<pre class="prettyprint linenums"><code>{{list_articles length=&quot;10&quot; constraints=&quot;number not `$gimme-&gt;default_article-&gt;number`&quot; ignore_issue=&quot;true&quot; order=&quot;bypublishdate desc&quot;}}
{{* code goes here *}}
{{/list_articles}}</code></pre>
<p><span id="ch022_article-comments.xhtml"></span></p>
<h1>Article comments</h1>
<p>In this chapter you will learn how to display comments and the comment form, and how to use CAPTCHA or ReCAPTCHA spam protection. Comments are the place for your readers to give their feedback on an article. Comments also reflect the conversation of the community of your publication. Your readers are not only communicating their ideas about the article, but also communicating with each other.</p>
<p>Enabling and disabling comments is set for each publication in the administration interface. Here you can enable or disable comments for publications, for article types and for individual articles. If you switch off comments at the publication level, no comments can be added at all. The next level is article type: if you disable comments here, the option will not appear in the Article Edit screen for articles of this type. If both of these options are enabled, editors can switch commenting off for an individual article.</p>
<h2>Listing the most commented articles</h2>
<p>Before we dive into article comments, here's a little nugget showing how you can list articles by the number of comments they have, in descending order:</p>
<pre class="prettyprint linenums"><code>{{ list_articles order=&quot;bycomments desc&quot; }}
  &lt;p&gt;
    {{ $gimme-&gt;article-&gt;name }},
    comments: {{ $gimme-&gt;article-&gt;comment_count }}
  &lt;/p&gt;
{{ /list_articles }} </code></pre>
<p>This <strong>list_articles</strong> function will list the articles inside the current section, by default. To list all articles from an issue use:</p>
<pre><code>{{ list_articles ignore_section=&quot;true&quot; order=&quot;bycomments desc&quot; }}</code></pre>
<p>For the entire publication, use:</p>
<pre><code>{{ list_articles ignore_section=&quot;true&quot; ignore_issue=&quot;true&quot; order=&quot;bycomments desc&quot; }}</code></pre>
<h2>Listing article comments</h2>
<p>The following code has been taken from the template pack &quot;The Journal&quot;, designed by Woo Themes and available on the Sourcefabric website. If comments are available, you can list them like this:</p>
<pre class="prettyprint linenums"><code>{{ list_article_comments columns=&quot;2&quot; order=&quot;bydate desc&quot;}}
{{ if $gimme-&gt;current_list-&gt;at_beginning }}
  &lt;h4&gt;{{ $gimme-&gt;article-&gt;comment_count }} Response(s) to &quot;{{ $gimme-&gt;article-&gt;name }}&quot;&lt;/h4&gt;
  &lt;ol class=&quot;commentlist&quot;&gt;
{{ /if }}
   &lt;li class=&quot;comment {{ if $gimme-&gt;current_list-&gt;column == &quot;1&quot; }}odd{{ else }}even{{ /if }}&quot;&gt;
      &lt;div class=&quot;comment-head cl&quot;&gt;
         &lt;div class=&quot;user-meta&quot;&gt;
             &lt;strong class=&quot;name&quot;&gt;{{ $gimme-&gt;comment-&gt;nickname }}&lt;/strong&gt;
             {{ $gimme-&gt;comment-&gt;submit_date|camp_date_format:&quot;%e.%m.%Y at %H:%i&quot; }}
          &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;comment-entry&quot;&gt;
          &lt;p&gt;{{ $gimme-&gt;comment-&gt;content }}&lt;/p&gt;
      &lt;/div&gt;
   &lt;/li&gt;
{{ if $gimme-&gt;current_list-&gt;at_end }}
  &lt;/ol&gt;
{{ /if }}
{{ /list_article_comments }}</code></pre>
<p><strong>list_article_comments</strong> lists the comments. <strong>columns=&quot;2&quot;</strong> is used to add &quot;odd&quot; and &quot;even&quot; classes in the list. <strong>order=&quot;bydate desc&quot;</strong> assures that the newest comment appears on the top of the list. The other values in this example are pretty much self-explanatory.</p>
<p>More properties of the article comment can be printed, like e-mail or unique ID. You can find these properties in the reference part of this Cookbook.</p>
<p>If you want to display the comments only if commenting is enabled, use the above code inside the following IF function:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;comments_enabled }}
[... code goes here ...]
{{ /if }}</code></pre>
<p>If you want to display the comments only if the reader has access to the content of the article - either because it is available to all, or because the user is logged in and has a subscription to the content - use the above code inside the following IF function:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;content_accessible }}
[... code goes here ...]
{{ /if }}</code></pre>
<p>You can also combine the two like this:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;comments_enabled &amp;&amp; $gimme-&gt;article-&gt;content_accessible }}
[... code goes here ...]
{{ /if }}</code></pre>
<h2>Creating the form for article comments</h2>
<p>The comment form can be styled freely. It is wrapped in {{ comment_form }} which creates the <strong>form</strong> tag automatically. The HTML inside is limited only by your imagination.</p>
<pre class="prettyprint linenums"><code>{{ comment_form html_code=&quot;id=\&quot;commentform\&quot;&quot; submit_button=&quot;SUBMIT&quot; button_html_code=&quot;tabindex=\&quot;6\&quot;&quot; }}
&lt;label for=&quot;author&quot;&gt;&lt;small&gt;Name (required)&lt;/small&gt;&lt;/label&gt;
{{ camp_edit object=&quot;comment&quot; attribute=&quot;nickname&quot; html_code=&quot;id=\&quot;author\&quot; 22\&quot; tabindex=\&quot;1\&quot;&quot; }}
&lt;label for=&quot;email&quot;&gt;&lt;small&gt;E-mail (will not be published) (required)&lt;/small&gt;&lt;/label&gt;
{{ camp_edit object=&quot;comment&quot; attribute=&quot;reader_email&quot; html_code=&quot;id=\&quot;email\&quot; 22\&quot; tabindex=\&quot;2\&quot;&quot; }}
&lt;input type=&quot;hidden&quot; name=&quot;f_comment_subject&quot; value=&quot;Site comment&quot; /&gt;
{{ camp_edit object=&quot;comment&quot; attribute=&quot;subject&quot; html_code=&quot;id=\&quot;comment-subject\&quot; tabindex=\&quot;3\&quot;&quot; }}
&lt;label for=&quot;comment&quot;&gt;&lt;small&gt;Comment&lt;/small&gt;&lt;/label&gt;
{{ camp_edit object=&quot;comment&quot; attribute=&quot;content&quot; html_code=&quot;id=\&quot;comment\&quot; rows=\&quot;5\&quot; tabindex=\&quot;4\&quot;&quot; }}
&lt;img src=&quot;{{ captcha_image_link }}&quot;&gt;&lt;br /&gt;
&lt;label for=&quot;f_captcha_code&quot;&gt;&lt;small&gt;Enter the code:&lt;/small&gt;&lt;/label&gt;{{ camp_edit object=&quot;captcha&quot; attribute=&quot;code&quot; html_code=&quot;id=\&quot;comment-code\&quot; tabindex=\&quot;5\&quot;&quot; }}
{{ /comment_form }}</code></pre>
<p>As shown above, the display of the form can be controlled to show up only IF the article allows commenting or IF the user has access to the article.</p>
<h2>Spam control with CAPTCHA</h2>
<p>To prevent automated spamming, you can add a CAPTCHA image to your comment form. It displays letters which the user needs to type in before posting their comment. Include a CAPTCHA by adding the following lines just before {{ /comment_form }}:</p>
<pre class="prettyprint linenums"><code>&lt;img src=&quot;{{ captcha_image_link }}&quot;&gt;&lt;br /&gt;
&lt;label for=&quot;f_captcha_code&quot;&gt;&lt;small&gt;Enter the code:&lt;/small&gt;&lt;/label&gt;{{ camp_edit object=&quot;captcha&quot; attribute=&quot;code&quot; html_code=&quot;id=\&quot;comment-code\&quot; tabindex=\&quot;5\&quot;&quot; }}</code></pre>
<p>When submitting the comment, the string typed by the reader is checked against the CAPTCHA image. If it is not identical, an error can be displayed.</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;submit_comment_action-&gt;is_error }}
  {{ $gimme-&gt;submit_comment_action-&gt;error_message }}
  {{ $gimme-&gt;submit_comment_action-&gt;error_code }}
{{ /if }}</code></pre>
<p>The error code is machine generated and can not be changed. The error message can be changed in the administration interface, in &quot;Localization&quot;.</p>
<h2><span class="Apple-style-span">Spam control with ReCAPTCHA Newscoop plugin</span></h2>
<p>Instead of the solution mentioned above, you can use the ReCAPTCHA plugin (which works with Newscoop 3.5.2 and higher).  In that case, you only need to use:</p>
<pre class="code-java"><code>&lt;p&gt;
{{ recaptcha }}
&lt;/p&gt;</code></pre>
<p>You can read what reCAPTCHA is at <a href="http://www.google.com/recaptcha" class="uri">http://www.google.com/recaptcha</a></p>
<p>Then, make sure to create the proper key for your site here:</p>
<p><a href="https://www.google.com/recaptcha/admin/create" class="uri">https://www.google.com/recaptcha/admin/create</a></p>
<p>Your comment form will look like this</p>
<p><img src="static/reCAPTCHA.png" /></p>
<p>Steps to perform in order to work with this plugin:</p>
<ol>
<li>Download the recaptcha plugin from our site (if you installed Newscoop 3.5.2 or higher, you should have this plugin already in your Plugins Manager)</li>
<li>Install and enable the plugin through the Plugins Manager in the Newscoop administration interface (in the main menu, Plugins -&gt; Manage Plugins)</li>
<li>Configure the plugin, the options are:
<ol>
<li>Enable for comments:</li>
<li>Enable for subscriptions:</li>
<li>Enter the public key:</li>
<li>Enter the private key:</li>
</ol></li>
<li>Include the appropriate template tag within your forms:</li>
</ol>
<p>comments form:</p>
<pre><code> {{ recaptcha }}</code></pre>
<p>subscriptions form:</p>
<pre><code> {{ recaptcha form=&#39;subscriptions&#39; }}</code></pre>
<p>Finally, enable the use of CAPTCHA for your publication in the Publication configure screen.</p>
<h2>Checking for errors and article moderation</h2>
<p>To go through the process of submitting, checking and giving feedback on article moderation you could structure the template in the following way:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;submit_comment_action-&gt;defined &amp;&amp; $gimme-&gt;submit_comment_action-&gt;rejected }}
    Your comment has not been accepted.
{{ /if }}
{{ if $gimme-&gt;submit_comment_action-&gt;is_error }}
    {{ $gimme-&gt;submit_comment_action-&gt;error_message }}
    {{ $gimme-&gt;submit_comment_action-&gt;error_code }}
{{ else }}
    {{ if $gimme-&gt;submit_comment_action-&gt;defined }}
        {{ if $gimme-&gt;publication-&gt;moderated_comments }}
            Your comment has been sent for approval.
        {{ /if }}
    {{ /if }}
{{ /if }}
&lt;h2&gt;Leave a Reply&lt;/h2&gt;
{{ if $gimme-&gt;user-&gt;blocked_from_comments }}
    You are not allowed to comment.
{{ else }}
{{ comment_form html_code=&quot;id=\&quot;commentform\&quot;&quot; submit_button=&quot;SUBMIT&quot; button_html_code=&quot;tabindex=\&quot;6\&quot;&quot; }}
[...]
{{ /comment_form }}
{{ /if }}</code></pre>
<p>In this example you can also see where and how to place feedback for banned users.</p>
<h2>Preview of comments</h2>
<p>If you want to allow readers to preview their comments, you need to add the code preview_button=&quot;Preview&quot; to {{ comment_form ... }}. &quot;Preview&quot; is the text that will be displayed on the button, but you can change this value.</p>
<pre class="prettyprint"><code>{{ comment_form html_code=&quot;id=\&quot;commentform\&quot;&quot; submit_button=&quot;SUBMIT&quot; preview_button=&quot;Preview&quot; button_html_code=&quot;tabindex=\&quot;6\&quot;&quot; }}</code></pre>
<p>If you add the preview_button, you will see the button show up at the end of the form. If the reader writes a comment and clicks &quot;Preview&quot;, the preview can be displayed using the following template code:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;preview_comment_action-&gt;is_error }}
  &lt;p&gt;There was an error previewing the comment:
     {{ $gimme-&gt;preview_comment_action-&gt;error_message }}
  &lt;/p&gt;
{{ /if }}
{{ if $gimme-&gt;preview_comment_action-&gt;ok }}
    &lt;b&gt;Comment preview&lt;/b&gt;&lt;br/&gt;
    Subject: {{ $gimme-&gt;preview_comment_action-&gt;subject }}&lt;br/&gt;
    Reader e-mail: {{ $gimme-&gt;preview_comment_action-&gt;reader_email }}&lt;br/&gt;
    Content: {{ $gimme-&gt;preview_comment_action-&gt;content }}
{{ /if }}</code></pre>
<p>A good place to put this code is just above the comment form.</p>
<h2>Nested comments: using threads and levels</h2>
<p>Comments can be displayed as nested trees.</p>
<pre class="prettyprint linenums"><code>&lt;ul&gt;
  {{ assign var=&quot;level&quot; value=&quot;1&quot; }}
  {{ list_article_comments order=&quot;default asc&quot; }}
    {{ if $gimme-&gt;comment-&gt;level gt $level }}
      {{ assign var=&quot;level&quot; value=$gimme-&gt;comment-&gt;level }}
      &lt;ul&gt;
    {{ /if }}
    {{ if $gimme-&gt;comment-&gt;level &lt; $level }}
      {{ php }}
        $gimme = $this-&gt;get_template_vars(&#39;gimme&#39;);
        $level = $this-&gt;get_template_vars(&#39;level&#39;);
        $count = $level - $gimme-&gt;comment-&gt;level;
        for (; $count &gt; 0; $count --) {
          echo &quot;&lt;/ul&gt;&quot;;
        }
      {{ /php }}
      {{ assign var=&quot;level&quot; value=$gimme-&gt;comment-&gt;level }}
    {{ /if }}
    &lt;li&gt;{{ if $gimme-&gt;comment == $gimme-&gt;default_comment }}&lt;b&gt;{{ /if }}
    Level: {{ $gimme-&gt;comment-&gt;level }}
    &lt;a href=&quot;{{ uri }}#comments&quot;&gt;
    Subject: {{ $gimme-&gt;comment-&gt;subject }}, Reader email: {{ $gimme-&gt;comment-&gt;reader_email }}
    &lt;/a&gt;
    {{ if $gimme-&gt;comment == $gimme-&gt;default_comment }}&lt;/b&gt;{{ /if }}&lt;br/&gt;
    Content: {{ $gimme-&gt;comment-&gt;content }}
    &lt;/li&gt;
  {{ /list_article_comments }}
&lt;/ul&gt;</code></pre>
<p><span id="ch023_sites-in-multiple-languages.xhtml"></span></p>
<h1>Sites in multiple languages</h1>
<p>In this chapter, we're working with one of Newscoop's main advantages: the ability to easily create and manage multilingual publications.</p>
<p>The following screenshot shows the administration interface of a publication in English, Russian and Spanish. This is what you will see when you go to the list of issues:</p>
<p><img src="static/multilin.png" /></p>
<p><em>List of issues in the admin interface for a multilingual publication in English, Russian and Spanish.</em></p>
<p>In Newscoop, there is the publication's default language (set in Content &gt;Publication &gt;Configure) and other language versions, or translations. Other languages are defined by creating translations of issues and articles. In the screenshot above, you can see that every issue is translated into two additional languages.</p>
<p>You don't need to create these translations with every new issue - when you add a new issue and choose the option to 'Use the structure of previous issue', a new issue will be created with all the language versions that already exist.</p>
<p>Note that all of an issue's language versions hold the same issue number. Similarly, sections in translated issues keep the original section's number, and translated articles keep the original article's number.</p>
<p>So how does Newscoop handle multilingual content? By changing the language parameter.</p>
<p>Take a look at these three URLs:</p>
<p><a href="http://journalist.newscoop-design.sourcefabric.org/en/mar2011/posts/4/healthy-options.htm">http://example.com/en/mar2011/posts/4/healthy-options.htm</a></p>
<p><a href="http://journalist.newscoop-design.sourcefabric.org/es/mar2011/posts/4/.htm">http://example.com/es/mar2011/posts/4/opciones-saludables.htm</a></p>
<p><a href="http://journalist.newscoop-design.sourcefabric.org/ru/mar2011/posts/4/.htm">http://example.com/ru/mar2011/posts/4/-.htm</a></p>
<p>The most important difference regarding multilinguality lies in the language code (en, es, ru) and in the last part of the URL, generated using topics for SEO purposes. Incidentally, those links will work without that last part of the url. The article number (4) is enough to tell Newscoop which article it is.</p>
<h3>Switching between languages</h3>
<p>To switch from one language to another, we build a list of available languages. In our language switcher, if we change only the language parameter, all other parameters currently active will be used. If you change the language while on the article page, you will jump from translation to translation.</p>
<pre class="prettyprint linenums"><code>&lt;ul&gt;
{{ list_languages of_publication=&quot;true&quot; }}
    &lt;li style=&quot;background: transparent url(http://{{ $gimme-&gt;publication-&gt;site }}/templates/_img/flags/{{ $gimme-&gt;language-&gt;code }}.png) no-repeat 5px center&quot;&gt;
        &lt;a href=&quot;{{ uri }}/&quot;&gt;{{ $gimme-&gt;language-&gt;name }}&lt;/a&gt;
    &lt;/li&gt;
{{ /list_languages }}
&lt;/ul&gt;</code></pre>
<p>This switcher lists all languages defined by the content inside a publication. Because you cannot place a Greek translation into a Spanish issue, the appropriate issue is automatically created at the moment when you try to create an article in a language which is not yet defined.</p>
<p><img src="static/transla.png" /></p>
<p>Now let's get back to our language switcher. It will try to keep the active issue, section and article (if they exist in the required language). If not, the switcher will simply fall back to the previous level where a translation exists (i.e. section, and if section doesn't exist, then issue, which definitely exists - otherwise it wouldn't be on the language list).</p>
<p>What happens once your user switches to another language? Newscoop tries to serve all database content in that language - not only articles, but all other elements like system values for date (day names and month names), topics, author biographies etc. It is therefore important that all these values are translated to languages you plan to use.</p>
<p>Template strings also need translation; this is how you treat every string:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;language-&gt;english_name == &quot;English&quot; }}Search{{ /if }}
{{ if $gimme-&gt;language-&gt;english_name == &quot;Spanish&quot; }}Bsqueda{{ /if }}
[...]</code></pre>
<p>NOTE: There are some pieces of content that are not yet translatable:</p>
<ol>
<li>Image captions</li>
<li>Form buttons</li>
<li>Some configuration settings that might be used to output values, for example {{ $siteinfo.description }}</li>
</ol>
<p>You can solve this situation with following workarounds:</p>
<ol>
<li>Create an article field of single-line text, where journalists can store translations of image captions</li>
<li>For forms, you will need to set 'if' statements to check which language page is opened and to provide a version of the form with appropriate button labels (or graphical buttons)</li>
<li>Skip using configuration values, and instead use the translatable information stored in the publication structure (in some special article maybe, or as section description, or... be creative)</li>
</ol>
<p><span id="ch024_search-templates.xhtml"></span></p>
<h1>Search templates</h1>
<p>You can control your search form and search results with templates. This gives you design freedom for the list of results, as well as the complexity and appearance of your search form.</p>
<h3>The Search Form</h3>
<p>Using the default Newscoop function {{ search_form }} creates a form like the following screenshot:</p>
<p><img src="static/search-box.png" /></p>
<p>You can use the following code to create the form:</p>
<pre class="prettyprint linenums"><code>&lt;h3&gt;Search Articles&lt;/h3&gt;
{{ search_form template=&quot;search.tpl&quot; submit_button=&quot;Search&quot; html_code=&quot;class=\&quot;group\&quot; id=\&quot;search-form\&quot;&quot; button_html_code=&quot;id=\&quot;search-button\&quot;&quot; }}
    {{ camp_edit object=&quot;search&quot; attribute=&quot;keywords&quot; html_code=&quot;id=\&quot;search-field\&quot;&quot; }}
{{ /search_form }}</code></pre>
<p>The search terms are sent to the sub-template specified inside the function: <strong>search.tpl</strong>. (Note: if your search.tpl file is inside a folder, you need to specify the full path, the same as with the include function. You can also see how different html classes/IDs can be added to the form elements (using html_code and button_html_code; quotes inside need to be escaped), and how the submit_button text is defined (submit_button=&quot;Search&quot;).</p>
<p>To create a search form which doesn't have a button with text, but an image like the one shown below, you can use the following approach.</p>
<p><img src="static/search-box1.png" /></p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;search&quot;&gt;
{{ search_form template=&quot;search.tpl&quot; submit_button=&quot;&amp;nbsp;&quot; html_code=&quot;id=\&quot;topSearch\&quot;&quot; button_html_code=&quot;class=\&quot;replace\&quot;&quot; }}
           &lt;p class=&quot;fields&quot;&gt;
               {{ camp_edit object=&quot;search&quot; attribute=&quot;keywords&quot; html_code=&quot;id=\&quot;s\&quot; }}
           &lt;/p&gt;
{{ /search_form }}
&lt;/div&gt;&lt;!-- /.search --&gt;</code></pre>
<h3>Search results</h3>
<p>First, here is the example code for the search results template <strong>search.tpl</strong>:</p>
<pre class="prettyprint linenums"><code>&lt;div id=&quot;main&quot;&gt;
    &lt;h1&gt;Search results&lt;/h1&gt;

{{ list_search_results length=&quot;5&quot; order=&quot;bypublishdate desc&quot; constraints=&quot;type is news&quot; }}

        &lt;div class=&quot;post&quot;&gt;
            &lt;h2 class=&quot;post-title&quot;&gt;&lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot; rel=&quot;bookmark&quot; title=&quot;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;&lt;/h2&gt;
            &lt;p class=&quot;post-details&quot;&gt;Published on {{ $gimme-&gt;article-&gt;publish_date|camp_date_format:&quot;%e %M %Y&quot; }} by  {{ $gimme-&gt;article-&gt;author-&gt;name }} in &lt;a href=&quot;{{ uri options=&quot;section&quot; }}&quot;&gt;{{ $gimme-&gt;section-&gt;name }}&lt;/a&gt;&lt;/p&gt;
            {{ if $gimme-&gt;article-&gt;has_image(1) }}&lt;a title=&quot;{{ $gimme-&gt;article-&gt;name }}&quot; href=&quot;{{ uri options=&quot;article&quot; }}&quot;&gt;&lt;img src=&quot;{{ uri options=&quot;image 1 width 134&quot;}}&quot; alt=&quot;{{ $gimme-&gt;article-&gt;image-&gt;description }}&quot; class=&quot;woo-image thumbnail&quot;&gt;&lt;/a&gt;{{ /if }}
            &lt;p&gt;{{ $gimme-&gt;article-&gt;deck }}&lt;/p&gt;
        &lt;/div&gt;&lt;!-- /.post --&gt;

{{ if $gimme-&gt;current_list-&gt;at_end }}
        &lt;div class=&quot;more_entries&quot;&gt;
            &lt;div class=&quot;alignleft&quot;&gt;{{ if $gimme-&gt;current_list-&gt;has_previous_elements }}&lt;a href=&quot;{{ uripath options=&quot;template search.tpl&quot; }}?{{ urlparameters options=&quot;previous_items&quot; }} &quot;&gt;&amp;laquo; Newer Entries&lt;/a&gt;{{ /if }}&lt;/div&gt;
            &lt;div class=&quot;alignright&quot;&gt;{{ if $gimme-&gt;current_list-&gt;has_next_elements }}&lt;a href=&quot;{{ uripath options=&quot;template search.tpl&quot; }}?{{ urlparameters options=&quot;next_items&quot; }}&quot;&gt;Older Entries &amp;raquo;&lt;/a&gt;{{ /if }}&lt;/div&gt;
        &lt;/div&gt;
{{ /if }}
{{ /list_search_results }}

{{ if $gimme-&gt;prev_list_empty }}
      &lt;div class=&quot;postinformation&quot;&gt;No results found&lt;/div&gt;
{{ /if }}

            &lt;/div&gt;&lt;!-- /#main --&gt;</code></pre>
<p>Inside the list of search results, we have a div container of the class &quot;post&quot; which is being repeated as many times as there are results for the search terms. List length is limited to 5, so if there are more than five list elements, a link to the next page is created. The link to the previous page is also created, in case the reader is not on the first page of search results. All of this is done inside an if statement:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;current_list-&gt;at_end }}
....
{{ /if }}</code></pre>
<p>You can also find a neat pagination example in the advanced section of this manual, where pagination is explained. If no search results were found, Newscoop would display a message like this:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;prev_list_empty }}
      &lt;div class=&quot;postinformation&quot;&gt;No results found&lt;/div&gt;
{{ /if }}</code></pre>
<p>The parameter prev_list_empty refers to the list just before this statement - which was the search results list. In case the list of search results was empty, this sends an appropriately apologetic message.</p>
<h3>Advanced search</h3>
<p>Newscoop also offers 'advanced search' options. An advanced search form may appear to your publication's readers like this screenshot:</p>
<p><img src="static/advanced-search_1.png" /></p>
<p>The code which generates this form is shown below:</p>
<pre class="prettyprint linenums"><code>{{ search_form template=&quot;search.tpl&quot; submit_button=&quot;Search&quot; button_html_code=&quot;id=\&quot;adv-search-button\&quot; class=\&quot;rounded\&quot;&quot; }}
&lt;div class=&quot;left&quot;&gt;
    &lt;div class=&quot;form-element&quot;&gt;
        &lt;label&gt;Search by:&lt;/label&gt;
        &lt;input class=&quot;radio&quot; name=&quot;f_search_scope&quot; value=&quot;content&quot; checked=&quot;checked&quot; type=&quot;radio&quot;&gt;text
        &lt;input class=&quot;radio&quot; name=&quot;f_search_scope&quot; value=&quot;title&quot; type=&quot;radio&quot;&gt;title
        &lt;input class=&quot;radio&quot; name=&quot;f_search_scope&quot; value=&quot;author&quot; type=&quot;radio&quot;&gt;author
    &lt;/div&gt;
    &lt;div class=&quot;form-element&quot;&gt;
        &lt;label for=&quot;adv-search&quot;&gt;Keyword:&lt;/label&gt;
        {{ camp_edit object=&quot;search&quot; attribute=&quot;keywords&quot; html_code=&quot;id=\&quot;adv-search\&quot;&quot; }}
    &lt;/div&gt;
    &lt;div class=&quot;form-element&quot;&gt;
        &lt;label for=&quot;adv-select&quot;&gt;Issue:&lt;/label&gt;
        {{ camp_select object=&quot;search&quot; attribute=&quot;issue&quot; html_code=&quot;id=\&quot;adv-select\&quot;&quot; }}
    &lt;/div&gt;
    &lt;div class=&quot;form-element&quot;&gt;
        &lt;label&gt;Date:&lt;/label&gt;
        &lt;div class=&quot;g-left&quot;&gt;from {{ camp_edit object=&quot;search&quot; attribute=&quot;start_date&quot; }}&lt;/div&gt;
        &lt;div class=&quot;g-right&quot;&gt;to {{ camp_edit object=&quot;search&quot; attribute=&quot;end_date&quot; }}&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;!-- /.left --&gt;
&lt;div class=&quot;right&quot;&gt;{{ /search_form }}&lt;/div&gt;</code></pre>
<p>This form is different than the simple search form earlier in this chapter, as it has more options for filtering the results of the search. Firstly, the reader has the option to narrow their search only to article text, article title, or article author, by selecting the appropriate radio button. The generated HTML for this part of the form looks like this:</p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;form-element&quot;&gt;
    &lt;label&gt;Search by:&lt;/label&gt;
    &lt;input class=&quot;radio&quot; name=&quot;f_search_scope&quot; value=&quot;content&quot; checked=&quot;checked&quot; type=&quot;radio&quot;&gt;text
    &lt;input class=&quot;radio&quot; name=&quot;f_search_scope&quot; value=&quot;title&quot; type=&quot;radio&quot;&gt;title
    &lt;input class=&quot;radio&quot; name=&quot;f_search_scope&quot; value=&quot;author&quot; type=&quot;radio&quot;&gt;author
&lt;/div&gt;</code></pre>
<p>Next, the reader has the option to select a particular issue to narrow down their search, and this part of the code is responsible for that feature:</p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;form-element&quot;&gt;
    &lt;label for=&quot;adv-select&quot;&gt;Issue:&lt;/label&gt;
    {{ camp_select object=&quot;search&quot; attribute=&quot;issue&quot; html_code=&quot;id=\&quot;adv-select\&quot;&quot; }}
&lt;/div&gt;</code></pre>
<p>The HTML generated after template parsing is:</p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;form-element&quot;&gt;
    &lt;label for=&quot;adv-select&quot;&gt;:&lt;/label&gt;
    &lt;select name=&quot;f_search_issue&quot; id=&quot;adv-select&quot;&gt;
        &lt;option value=&quot;0&quot; selected=&quot;selected&quot;&gt;&amp;nbsp;&lt;/option&gt;
        &lt;option value=&quot;8&quot;&gt;8. Issue 8 (2011-03-18 08:00:08)&lt;/option&gt;
        ....
        &lt;option value=&quot;1&quot;&gt;1. Issue 1 (2010-12-02 08:00:07)&lt;/option&gt;
    &lt;/select&gt;
&lt;/div&gt;</code></pre>
<p>The final option is to specify the time frame from which the reader wants to get search results. This is done with inline date choosers:</p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;form-element&quot;&gt;
    &lt;label&gt;Date:&lt;/label&gt;
        &lt;div class=&quot;g-left&quot;&gt;from {{ camp_edit object=&quot;search&quot; attribute=&quot;start_date&quot; }}&lt;/div&gt;
        &lt;div class=&quot;g-right&quot;&gt;to {{ camp_edit object=&quot;search&quot; attribute=&quot;end_date&quot; }}&lt;/div&gt;
&lt;/div&gt;</code></pre>
<p>The HTML that gets generated by this piece of Newscoop code is rather too long for this book. You can style the start and end date fields in CSS with the following id's:</p>
<pre class="prettyprint linenums"><code>#advanced-search #f_search_end_date,
#advanced-search #f_search_start_date {
    width: 58px;
}</code></pre>
<p>If you need to style the calendar that pops up when the reader clicks the date chooser field, there is the file javascript/jscalendar/calendar-system.css in your Newscoop installation. Feel free to play with it.</p>
<p><span id="ch025_making-a-404-page-template.xhtml"></span></p>
<h1>Making a 404 page template</h1>
<p>Good-looking, user-friendly &quot;404 page&quot; templates let people know that although the page they requested can't be found, the site is still up and running correctly. Another Newscoop feature at the publication configuration level enables site developers to specify the template which will be used when readers try to load an invalid URL or non-existent page.</p>
<p><img src="static/invalid.png" /></p>
<p>Your job is to design a new template for this purpose, and then to select it in the drop-down menu above. Every time a site visitor tries to open a non-existent page, you can provide them with a message that something went wrong, and offer useful links to pages they might be interested in.</p>
<p>For example, this ccould be your 404 template:</p>
<pre class="prettyprint linenums"><code>{{ include file=&quot;_tpl/_html-head.tpl&quot; }}
&lt;body&gt;
&lt;div id=&quot;top&quot;&gt;
      &lt;div id=&quot;top-meta&quot;&gt;
          &lt;div class=&quot;date&quot;&gt;{{$smarty.now|camp_date_format:&quot;%M %e, %Y&quot;}}    &lt;/div&gt;
{{ include file=&quot;_tpl/top-search-box.tpl&quot; }}
      &lt;/div&gt;&lt;!-- /#top-meta --&gt;
      &lt;div id=&quot;header&quot;&gt;
          &lt;div class=&quot;logo&quot;&gt;
              &lt;a href=&quot;http://{{ $gimme-&gt;publication-&gt;site }}&quot; title=&quot;{{ $gimme-&gt;publication-&gt;name }}&quot;&gt;&lt;img src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/_img/logo.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;
        &lt;/div&gt;&lt;!-- /.logo --&gt;
    &lt;/div&gt;&lt;!-- /#header --&gt;
&lt;/div&gt;&lt;!-- /#top --&gt;
&lt;div&gt;
{{ if ! $gimme-&gt;url-&gt;is_valid }}
          &lt;h1&gt;Sorry, the requested page was not found.&lt;/h1&gt;
{{ /if }}
&lt;/div&gt;
&lt;div id=&quot;footer&quot;&gt;
      &lt;ul id=&quot;category-nav&quot;&gt;
{{ list_sections }}
      &lt;li class=&quot;cat-item&quot;&gt;&lt;a href=&quot;{{ uri options=&quot;section&quot; }}&quot; title=&quot;View all posts filed under {{ $gimme-&gt;section-&gt;name }}&quot;&gt;{{ $gimme-&gt;section-&gt;name }}&lt;/a&gt;&lt;/li&gt;
{{ /list_sections }}
        &lt;/ul&gt;
        &lt;ul id=&quot;page-nav&quot;&gt;
{{ set_issue number=&quot;1&quot; }}
{{ set_section number=&quot;5&quot; }}
{{ list_articles }}
           &lt;li class=&quot;page_item&quot;&gt;&lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot; title=&quot;{{ $gimme-&gt;article-&gt;name }}&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;&lt;/li&gt;
{{ /list_articles }}
{{ unset_section }}
            &lt;li style=&quot;border: medium none;&quot; class=&quot;page_item&quot;&gt;&lt;a href=&quot;{{ uri options=&quot;template set_thejournal/archive.tpl&quot; }}&quot; title=&quot;Archives&quot;&gt;Archives&lt;/a&gt;&lt;/li&gt;
{{ set_default_issue }}
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>A quicker solution may be to redirect all invalid URL requests back to your home page, but visitors deserve more precise information about what's going on, as well as a choice about what they want to do next.</p>
<p><span id="ch026_creating-a-newscoop-theme.xhtml"></span></p>
<h1>Creating a Newscoop theme</h1>
<p>A set of templates designed for Newscoop can be used to create a Newscoop 4 theme in a single zip file by following some simple formatting rules...</p>
<p>1. A <em>theme.xml</em> file needs to be created before the new theme will show up in the <strong>Configure -&gt; Themes</strong> page of the administration interface. This file contains a name, designer's name, version and description for the theme, and references the default templates and renditions for the theme.</p>
<p>The <em>name=</em> value has to be unique for <span class="moz-txt-citetags"></span>each new theme that you create. If you have based a customised theme on one of the themes distributed with Newscoop, be sure to change the name before you install it. Otherwise, your customised theme may be overwritten when Newscoop is upgraded.<br />
</p>
<p>The <em>require=</em> value specifies the minimum version of Newscoop that the theme was created for. The theme.xml file should also reference some preview screenshots with the <em>&lt;presentation-img&gt;</em> tag, to help journalists identify the theme in the Newscoop administration interface.</p>
<p>An example theme.xml file could look like this:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;   

&lt;theme name=&quot;Mytheme&quot; designer=&quot;me&quot; version=&quot;1.0&quot; require=&quot;4.0&quot;&gt;  

 &lt;description&gt;My theme&lt;/description&gt;   


 &lt;presentation-img src=&quot;preview-front.jpg&quot; name=&quot;Front page&quot;/&gt;   

 &lt;presentation-img src=&quot;preview-section.jpg&quot; name=&quot;Section page&quot;/&gt;   

 &lt;presentation-img src=&quot;preview-article.jpg&quot; name=&quot;Article&quot;/&gt;   


 &lt;!-- =============================== --&gt;   


 &lt;output name=&quot;Web&quot;&gt;  

  &lt;frontPage src=&quot;front.tpl&quot;/&gt;  

  &lt;sectionPage src=&quot;section.tpl&quot;/&gt;  

  &lt;articlePage src=&quot;article.tpl&quot;/&gt;  

  &lt;errorPage src=&quot;404.tpl&quot;/&gt;   

 &lt;/output&gt;   


 &lt;renditions&gt;  

  &lt;rendition name=&quot;topfront&quot; width=&quot;500&quot; height=&quot;333&quot; specs=&quot;crop&quot;/&gt;  

  &lt;rendition name=&quot;thumb&quot; width=&quot;150&quot; height=&quot;100&quot; specs=&quot;crop&quot;/&gt;  

  &lt;rendition name=&quot;sectionthumb&quot; width=&quot;250&quot; height=&quot;167&quot; specs=&quot;crop&quot;/&gt;   

  &lt;rendition name=&quot;articlebig&quot; width=&quot;600&quot; height=&quot;450&quot; specs=&quot;crop&quot;/&gt;   

  &lt;rendition name=&quot;square&quot; width=&quot;150&quot; height=&quot;150&quot; specs=&quot;crop&quot;/&gt;   

 &lt;/renditions&gt;   


&lt;/theme&gt;</code></pre>
<p>2. The theme files should be in the root directory of the zip file (not a sub-directory, such as the name of the theme). Sub-directories are allowed for includes such as _tpl and _css, but the four master templates, assigned to the front, section, article and 404 pages, <span class="moz-txt-underscore"><span class="moz-txt-tag"></span>must<span class="moz-txt-tag"></span></span> be in the zip file root.</p>
<p>3. Include paths no longer reference the name of the theme in Newscoop 4.0 onwards. All paths are relative to the zip file root. For example, you now include a sub-template like this:</p>
<pre><code>{{ include file=&quot;_tpl/_html-head.tpl&quot; }}</code></pre>
<p>instead of the way it was done in Newscoop 3:</p>
<pre><code>{{ include file=&quot;set_mytheme/_tpl/_html-head.tpl&quot; }}</code></pre>
<p>4. To avoid hard-coding theme names into link paths, you can use the <em>url static_file</em> function:</p>
<pre><code>&lt;link href=&quot;{{ url static_file=&#39;_css/general.css&#39; }}&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code></pre>
<p>instead of using the full link path, which is inflexible if the name of your theme is changed at some point in the future:</p>
<pre><code>&lt;link href=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_mytheme/_css/general.css&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code></pre>
<p>Taking a look at the source of the rendered page, the <em>url static_file</em> function should create a link something like this:<br />
</p>
<pre><code>&lt;link href=&quot;http://www.example.com/themes/publication_2/theme_5/_css/general.css&quot; media=&quot;screen&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code></pre>
<p>Newscoop figures out which publication alias, publication number and theme number you wanted, and constructs the link from that information. This means you can rename themes, fork themes or move them around, and not break links.</p>
<p><span id="ch028_topics-switches-keywords-to-structure-content.xhtml"></span></p>
<h1>Topics, switches, keywords to structure content</h1>
<p>This chapter explains how to order your content in many different ways. Newscoop's structure of issue &gt; section &gt; article has many advantages. Depending on your publication, you might want to add other ways to present, structure and group your content. Topics, switches and keywords allow you to do exactly that. <br />
</p>
<p>With topics, you can cross-reference your content, similar to what tags or categories generally do. Topics are organized like a tree, with root topics and subtopics. Topics can be translated, can be part of an article type and can become part of the URL. You can check in your template if and what topics are assigned to an article. In this way you can use topics to structure your content - and change your layout, if you want.</p>
<p>Some publications using Newscoop replace the concept of issue &gt; section &gt; article entirely and order their content exclusively using topics. Structuring with topics and using the tree of topics and subtopics offers some liberties:</p>
<ul>
<li>An article can have more than one topic</li>
<li>The topic tree structure allows variable depth of content</li>
<li>Based on the position in the topic tree, similar articles can be grouped</li>
</ul>
<p>Switches are another powerful way to filter your content. Beside two built-in switches ('Show article on front page' and 'Show article on section page'), you can create custom switches, and then filter your content if articles have these switches active.</p>
<p>Finally, keywords can be used in some cases to further fine-tune your article listings, but also as an option in creating article URLs which are human readable, increasing SEO.</p>
<h2>Topics</h2>
<p>How you organize topics in a topic tree may be very important. It's usually a good approach to create a root topic for group of topics, and then make subtopics in that branch.</p>
<p><img src="static/topic-branches.png" /></p>
<p>This way, you can approach a specific topic branch in your templates. Let's look at an example - you are on a full article page, and want to provide information about all the categories that article is assigned to.</p>
<p><img src="static/article-meta.png" /></p>
<p>The code for this example is:</p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;tags&quot;&gt;
    &lt;p&gt;Posted in {{ list_article_topics root=&quot;categories:en&quot; }}&lt;a href=&quot;{{ uri options=&quot;template index.tpl&quot; }}&quot; title=&quot;View all posts in category &#39;{{ $gimme-&gt;topic-&gt;name }}&#39;&quot; rel=&quot;category tag&quot;&gt;{{ $gimme-&gt;topic-&gt;name }}&lt;/a&gt;{{ if !$gimme-&gt;current_list-&gt;at_end }}, {{ /if }}{{ /list_article_topics }}&lt;/p&gt;
    &lt;p&gt;Food type: {{ list_article_topics root=&quot;Food type:en&quot; }}&lt;a href=&quot;{{ uri options=&quot;template archive-food-type.tpl&quot; }}&quot; title=&quot;View all posts for food type &#39;{{ $gimme-&gt;topic-&gt;name }}&#39;&quot; rel=&quot;food-type&quot;&gt;{{ $gimme-&gt;topic-&gt;name }}&lt;/a&gt;{{ if !$gimme-&gt;current_list-&gt;at_end }}, {{ /if }}{{ /list_article_topics }}&lt;/p&gt;
&lt;/div&gt;</code></pre>
<p>You see that by specifying option root=&quot;categories:en&quot; we can narrow down the list of topics. If we leave the root option unspecified, the listing will return all topics assigned to an article, regardless of the branch they are in.</p>
<p>What's more, this allows us to make topic names links to pages which list all articles assigned that topic. This is possible because the topic parameter is forwarded to the next page as one of the URL parameters, for example ?tpid=34. As we said before, when some topic is active, it heavily affects the context, because all article listings are filtered to the currently active topic only. So, the next page could have a simple article list like this:</p>
<pre class="prettyprint"><code>{{ list_articles length=&quot;10&quot; ignore_issue=&quot;true&quot; ignore_section=&quot;true&quot; order=&quot;bypublishdate desc&quot; }}</code></pre>
<p>and it will return the last ten articles that have this topic assigned, regardless of the section and issue.</p>
<p>You can also work with topics independently, by directly specifying the context you want to work with.</p>
<pre><code>{{ set_topic name=&quot;garlic:en&quot; }} .... {{ unset_topic }}</code></pre>
<p>Everything inside set_topic and unset_topic is filtered to that specified topic, of course. Don't forget to unset the topic when you don't need it any more. Also, when you jump to some page with the topic parameter specified, be aware that the topic context affects the whole page with all its elements - main navigation, for example. So, in your included templates, be sure to think side-wide, not only about one page, and if working with articles, be sure that you locally switch off the topic parameter. You can do that using:</p>
<pre class="prettyprint linenums"><code>{{ local }}
{{ unset_topic }}
..... your code ...
{{ /local }}</code></pre>
<p>You can also make listings of subtopics. One example that we provide here creates a drop-down menu with selectable topics that will send you to the next page (category-page.tpl) with the selected topic activated.</p>
<pre class="prettyprint linenums"><code>&lt;script type=&quot;text/JavaScript&quot;&gt;
function MM_jumpMenu(targ,selObj,restore){
    eval(targ+&quot;.location=&#39;&quot;+selObj.options[selObj.selectedIndex].value+&quot;&#39;&quot;);
    if (restore) selObj.selectedIndex=0;
}
&lt;/script&gt;

&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
    &lt;label for=&quot;category&quot;&gt;Category:&lt;/label&gt;
    &lt;select id=&quot;category&quot; name=&quot;category&quot; onChange=&quot;MM_jumpMenu(&#39;parent&#39;,this,0)&quot;&gt;
    {{ set_topic name=&quot;Category:en&quot; }}
        &lt;option selected&gt;----- choose -----&lt;/option&gt;
        {{ list_subtopics }}
        &lt;option value=&quot;{{ uri options=&quot;template category-page.tpl&quot; }}&quot;&gt;       {{ $gimme-&gt;topic-&gt;name }}&lt;/option&gt;
        {{ /list_subtopics }}
    {{ unset_topic }}
    &lt;/select&gt;
&lt;/form&gt;</code></pre>
<p>In Newscoop you don't need to specify the topic parameter directly in:</p>
<pre class="prettyprint"><code>{{ uri options=&quot;template category-page.tpl&quot; }}</code></pre>
<p>because the topic is currently active (you are inside the topics list!) and is already part of {{ uri }}.</p>
<p>For the use of topics in SEO strategy, see the chapter on Search Engine Optimization.</p>
<h2>Switches</h2>
<p>You can use switches in two ways - by setting an 'if' clause</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;custom_switch_name }}
 .... your code ...
{{ /if }}</code></pre>
<p>or in article lists, using</p>
<pre class="prettyprint"><code>{{ list_articles constraints=&quot;custom_switch_name is on&quot; }}</code></pre>
<p>The list will then (beside other options that you may set) filter articles to return only those with custom_switch_name switched on.</p>
<p>You can, for example, use custom switches to determine if an article has to appear on the website in a breaking news block, or as an ordinary, less emphasized article. You can find an example of this in the chapter about dynamic page layouts.</p>
<p>Beside custom switches, you can use Newscoop's built-in switches 'On front page is on' and 'On section page is on'. Initially, these switches are meant to be used to determine if an article needs to be shown on the front and/or on the section page. Imagine a publication with sections featuring very many articles; not all articles can show up on the section page, and it would be even harder to link all articles directly from front page. So, these options can help journalists and editors promote the most exciting content in their publication.</p>
<p>Built-in switches can be used in article lists:</p>
<pre class="prettyprint linenums"><code>{{ list_articles constraints=&quot;onfrontpage is on&quot; }}
{{ list_articles constraints=&quot;onsection is on&quot; }}</code></pre>
<p>or in 'if' clauses:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;on_front_page }}
{{ if $gimme-&gt;article-&gt;on_section_page }}</code></pre>
<h2>Keywords</h2>
<p>The Keyword field exists by default in every article, and you can use its content in different ways - by setting if clauses, for example:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;has_keyword(&quot;organic&quot;) }}
...
{{ /if }}</code></pre>
<p>or in an article list:</p>
<pre class="prettyprint linenums"><code>{{ list_articles constraints=&quot;keyword organic&quot; }}
...
{{ /list_articles }}</code></pre>
<p>Such a list will return all articles with the keyword 'organic' assigned. For using keywords in SEO strategy, see the chapter <em>Search Engine Optimization (SEO)</em>.</p>
<p><span id="ch029_managing-static-pages.xhtml"></span></p>
<h1>Managing static pages</h1>
<p>Newscoop doesn't have a special place for publishing static pages. There are different ways of handling static pages, depending on the requirements of your publication. You can park them in a separate publication, in a separate issue or a dedicated section.</p>
<p>A simple way of handling static pages is by using a specific Article Type - in our case &quot;page&quot; - and place pages in any issue or section you want. Then you can list those static pages like this:</p>
<pre class="prettyprint linenums"><code>&lt;ul&gt;
{{ list_articles ignore_issue=&quot;true&quot; ignore_section=&quot;true&quot; constraints=&quot;type is page&quot; }}
  &lt;li&gt;&lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;&lt;/li&gt;
{{ /list_articles }}
&lt;/ul&gt;</code></pre>
<p>This will list all articles which are of the type &quot;page&quot;, regardless of their issue or section.</p>
<p>A more sophisticated approach often seen in Newscoop implementations is to create a special issue, outside of the chronological ordering of &quot;normal&quot; issues. Most often that's issue number 1, with a structure and articles which are different from the rest of the publication.</p>
<p>For example, you could have issue number 1 with the name 'pages', and inside it the sections 'about' and 'legal'. To access the content in your publication, you would set the environment to the special issue, and by enclosing everything in {{ local }}...{{ /local }} you could ensure that general context of parameters is not changed.</p>
<pre class="prettyprint linenums"><code>{{ local }}
{{ set_issue number=&quot;1&quot; }}
{{ list_sections }}</code></pre>
<p>We have two sections, and want to create two subheads with section names, and then unordered lists with articles inside:</p>
<pre class="prettyprint linenums"><code>{{ list_articles constraints=&quot;type is page&quot; }}
    {{ if $gimme-&gt;current_list-&gt;at_beginning }}
        &lt;h3&gt;{{ $gimme-&gt;section-&gt;name }}&lt;/h3&gt;
        &lt;ul&gt;
    {{ /if }}</code></pre>
<p>The subhead will be printed, and the unordered list opened only if the section has articles inside.</p>
<pre class="prettyprint"><code>        &lt;li&gt;&lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;&lt;/li&gt;</code></pre>
<p>In the code above, all the names of articles inside the section are made into links pointing to the full article pages.</p>
<pre class="prettyprint linenums"><code>        {{ if $gimme-&gt;current_list-&gt;at_end }}
        &lt;/ul&gt;
        {{ /if }}</code></pre>
<p>The code above will close the unordered list, once the last article is reached. Finally, the statements are closed, with the code below.<br />
</p>
<pre class="prettyprint linenums"><code>{{ /list_articles }}
{{ /list_sections }}
{{ /local }}</code></pre>
<p>This way, editors of the publication have the option to independently update the content of these static pages. Keeping them in issue number 1, they can easily jump there with only one click from the issue listing page.</p>
<p><span id="ch030_list-of-popular-articles-most-read.xhtml"></span></p>
<h1>List of popular articles (most read)</h1>
<p>For many publications, a listing of the most popular articles is an easy way to keep readers on the site, thus increasing both page views and time on site. Newscoop has an internal statistics mechanism which counts page views (the mechanism counts each URL request as a &quot;read&quot;), and that mechanism can be called in other templates.</p>
<p>In this case, we will call the available functions to make a list of popular articles, which can then be arranged on a page like the screenshot below.</p>
<p><img src="static/most_popular.png" /></p>
<p>The following code snippet is taken from The Journal's front page, from the sub-template <strong>set_thejournal/_tpl/front_tabs.tpl</strong></p>
<p>It is displayed inside a jQuery tab which displays comments together with the most read articles, which explains why the CSS &lt;div&gt; tags are the same for both. Read the chapter <em>List of latest comments</em> for instructions on how to make that template, and read the chapter on <em>Tabs with jQuery</em> for instructions on how to make the tab.</p>
<p>This will do the following:</p>
<ul>
<li>Assign the styling for the tab box</li>
<li>Set the issue to the current one</li>
<li>Return a list of five articles, ordered by popularity in descending order</li>
<li>Set a constraint for the article type of 'news'</li>
<li>Get the URI for the article</li>
<li>Display the article name</li>
</ul>
<pre class="prettyprint linenums"><code>&lt;div id=&quot;tabs&quot; class=&quot;block&quot;&gt;
  &lt;ul class=&quot;idTabs wrap tabs&quot;&gt;
    &lt;li&gt;&lt;a class=&quot;selected&quot; href=&quot;#commented&quot;&gt;Most Read&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#recentcomments&quot;&gt;Recent Comments&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div class=&quot;inside&quot;&gt;
    &lt;ul style=&quot;display: block;&quot; id=&quot;commented&quot;&gt;
{{ local }}
{{ set_current_issue }}
{{ list_articles length=&quot;5&quot; order=&quot;bypopularity desc&quot; constraints=&quot;type is news&quot; }}
    &lt;li&gt;&lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;&lt;/li&gt;
{{ /list_articles }}
{{ /local }}</code></pre>
<p>Here is another example, which will tell Newscoop to do the following:</p>
<ul>
<li>List the ten most popular articles</li>
<li>Those articles must have the article type of 'article'</li>
<li>They must be from sections numbered between 20-300</li>
<li>They must only be from the last five issues</li>
<li>They will be ordered in descending order according to their popularity</li>
</ul>
<pre class="prettyprint linenums"><code>{{ list_articles length=&quot;10&quot; constraints=&quot;type is article section greater 19 section smaller 301 issue greater `$gimme-&gt;issue-&gt;number-5`&quot; order=&quot;bypopularity desc&quot; }}</code></pre>
<p>Note the use of the backtick character in the code above. The next snippet will list the ten most popular articles in the last seven days. It will:</p>
<ul>
<li>Assign a variable for the date that is seven days in the past</li>
<li>List the ten most popular articles in descending order</li>
<li>Set constraints so that the dates of the articles returned are within the time we set in the variable</li>
<li>Return articles regardless of issue and section </li>
</ul>
<pre class="prettyprint linenums"><code>{{assign var=&quot;xdate&quot; value=&quot;-7 days&quot;|date_format:&quot;%Y-%m-%d&quot;}}
{{list_articles length=&quot;10&quot; order=&quot;bypopularity desc&quot; constraints=&quot;publish_date greater $xdate reads greater 0&quot; ignore_issue=&quot;true&quot; ignore_section=&quot;true&quot;}}</code></pre>
<p>The following example will:</p>
<ul>
<li>Assign a variable for a date one month in the past</li>
<li>List the ten most popular articles in descending order</li>
<li>Set constraints where the article type is 'article,' and the publish date is within the time we set in the variable</li>
<li>Return articles regardless of issue</li>
<li>Return articles regardless of section</li>
</ul>
<pre class="prettyprint linenums"><code>{{assign var=&quot;xdate&quot; value=&quot;-1 month&quot;|date_format:&quot;%Y-%m-%d&quot;}}
{{list_articles length=&quot;10&quot; order=&quot;bypopularity desc&quot; constraints=&quot;type is article publish_date greater $xdate reads greater 0&quot; ignore_issue=&quot;true&quot; ignore_section=&quot;true&quot;}}</code></pre>
<p><span id="ch031_list-of-latest-comments.xhtml"></span></p>
<h1>List of latest comments</h1>
<p>The Newscoop internal statistics mechanism keeps track of the latest comments, and this mechanism can be used to create a list of the ten most recent comments on the site for all articles. The following code snippet is taken from The Journal's front page, from the sub-template <strong>set_thejournal/_tpl/front_tabs.tpl</strong></p>
<p>It is displayed inside a jQuery tab which displays comments together with most read articles (read the chapter <em>List of popular articles (most read)</em> for instructions on how to make that template).</p>
<p>Here is a screenshot:</p>
<p><img src="static/recent_comments2.png" /></p>
<p>This code snippet will:</p>
<ul>
<li>Set the current issue as the active environment</li>
<li>List five articles, ordered by the latest comment, in descending order</li>
<li>Set a constraint so that the article type is 'news'<br />
</li>
<li>Apply a different style for the recent comments</li>
<li>List a single comment, by date</li>
<li>List the nickname given by a commenter on a comment</li>
<li>Combine that with the name of the article they're commenting on</li>
<li>Make that article name appear in italic<br />
</li>
</ul>
<pre class="prettyprint linenums"><code>&lt;ul&gt;
{{ local }}
{{ set_current_issue }}
{{ list_articles length=&quot;5&quot; order=&quot;byLastComment desc&quot; constraints=&quot;type is news&quot; }}
    &lt;li class=&quot;recentcomments&quot;&gt;{{ list_article_comments length=&quot;1&quot; order=&quot;bydate desc&quot;}}{{ $gimme-&gt;comment-&gt;nickname }}{{ /list_article_comments }} on &lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot; style=&quot;font-style: italic&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;&lt;/li&gt;
{{ /list_articles }}
{{ /local }}
&lt;/ul&gt;</code></pre>
<p>Here is another example which will do the following:</p>
<ul>
<li>List the ten most recent comments, regardless of article</li>
<li>Order the comments by date, in descending order</li>
</ul>
<ul>
<li>Provide the URI for the comment and the article's name</li>
<li>Return the count of article comments</li>
<li>Return an excerpt of the article comments, truncated to 400 characters</li>
<li>Return the date and time the comment was posted</li>
</ul>
<pre class="prettyprint linenums"><code>{{list_article_comments length=&quot;10&quot; ignore_article=&quot;true&quot; order=&quot;byDate desc&quot;}}
    &lt;a href=&quot;{{uri}}#comments&quot;&gt;{{$gimme-&gt;article-&gt;name}}&lt;/a&gt;&lt;sup&gt;{{$gimme-&gt;article-&gt;comment_count}}&lt;/sup&gt;
    &lt;p&gt;{{$gimme-&gt;comment-&gt;content|truncate:400}} &lt;span&gt;{{$gimme-&gt;comment-&gt;submit_date|camp_date_format:&quot;%H:%i&quot;}}&lt;/span&gt;&lt;/p&gt;
{{/list_article_comments}}</code></pre>
<p>Finally, here is a similar, but more limited approach. We will:</p>
<ul>
<li>List the ten most recently-commented articles, ordered by last comment, in descending order, regardless of the issue and section they were published in</li>
<li>Return the article's URI</li>
<li>Return the article's name</li>
<li>Return the count of comments for the article</li>
</ul>
<pre class="prettyprint linenums"><code>{{ list_articles length=&quot;10&quot; order=&quot;byLastComment desc&quot; ignore_issue=&quot;true&quot; ignore_section=&quot;true&quot; }}
  &lt;a href=&quot;{{ uri }}#comments&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;&lt;sup&gt;{{ $gimme-&gt;article-&gt;comment_count }}&lt;/sup&gt;
{{ /list_articles }}</code></pre>
<p>To learn more about listing comments for one specific article and providing the comment form, read the chapter on <em>Article Comments</em>.</p>
<p><span id="ch032_using-maps.xhtml"></span></p>
<h1>Using maps</h1>
<p>In Newscoop, journalists can add points of interest (POIs) to a map from the article edit page, and then add additional information which will appear in a pop-up bubble when a reader clicks on the POI. This information can include HTML (including embeds from YouTube, Flickr or Soundcloud).<br />
</p>
<p><img src="static/ushahidi-cooker-map-screen.png" /> </p>
<p><em>Map displayed in article. Screenshot taken from &quot;Ushahidi Cooker&quot; template package.</em><br />
</p>
<p>For more on how editors and journalists can create maps and add POIs, see the <em>Locations</em> chapter in the manual <em>Newscoop 4 for Journalists and Editors</em>, available from:</p>
<p><a href="http://manuals.sourcefabric.org" class="uri">http://manuals.sourcefabric.org</a></p>
<h3>Creating maps is creating content</h3>
<p>Before we dive into how you can use Newscoop's maps and POIs in your templates, here's a bit of our philosophy on geolocation.</p>
<p>Newscoop's mapping is different than just opening a Google Maps embed and passing POIs to Google. This distinction is important, because it has to do with what many publishers believe will make you money now, and in the future as well.</p>
<p>Publishers may be making a strategic mistake when they pass their POIs to commercial map providers like Google. It will be harder to monetize that data because Google and its competitors will be likely to be doing the monetizing instead. We believe that mobile content represents a major revenue opportunity for publishers, and that location-based information is one of the keys to mobile revenue.</p>
<p>This was one of the main reasons we wanted to provide publishers with two important alternatives. The first is that in Newscoop's mapping features, publishers keep the points of interest inside their own database, and because they own their databases, publishers can monetize that information as they see fit.<br />
</p>
<h2>Select the map provider you like</h2>
<p>The second crucial point in our design of the geolocation features in Newscoop 3 has to do with supporting OpenStreetMap, as a free and open source alternative to commercial online mapping services. OpenStreetMap is to maps as Wikipedia is to encyclopedias - anyone can contribute and improve its accuracy, which means that many parts of the world are far better mapped with OpenStreetMap than they are with commercial maps - countries such as Georgia are completely blank in Google Maps and Bing, for example, but are mapped in detail with OpenStreetMap.</p>
<p>OpenStreetMap also provides publishers with additional strategic importance: The project will probably never compete with publishers in the same way that commercial services are doing and will continue to do. For example, publishers that are too-closely tied to a mapping service provider could fall victim to changes in terms of service. And because publishers using Newscoop 3.5 can choose between Google Maps and OpenStreetMap, their options are open (this switching is enabled by a very cool open source project called OpenLayers, by the way).</p>
<p><strong>Important:</strong> OpenStreetMaps' own site and base maps are not intended for large-scale map tile serving; they'll actually throttle back heavy users. It's better to use a service like Mapquest Open (Mapquest's own implementation of OpenStreetMap, at <a href="http://open.mapquest.com" class="uri" title="Mapquest Open">http://open.mapquest.com</a>) which is not limited. Mapquest Open is also supported out-of-the-box in Newscoop as an option.</p>
<h2>Templating and Maps</h2>
<h3>Requirements</h3>
<p>In order to display maps, you must include jQuery in the header of your document, with a link like this:</p>
<pre class="prettyprint"><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&quot;&gt;</code></pre>
<h3>Displaying a Map within an Article</h3>
<p>On the templating side, Newscoop's maps are quite easy to implement, relying on only a couple of templating directives. Here is a simple example from &quot;The Journal&quot; template package which includes a map inside the <strong>article-map.tpl</strong> sub-template:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;has_map }}
  {{ include file=&quot;set_thejournal/_tpl/article-map.tpl&quot; }}
{{ else }}
  {{ include file=&quot;set_thejournal/_tpl/_banner300x250.tpl&quot; }}
{{ /if }}</code></pre>
<p>In the code above we first validate if the current article has a map, and if so, we include the template rendering the map. If the article does not have a map, we display an advertisement instead.<br />
</p>
<p>Inside the article-map.tpl file included in the snippet above, there's a one-line directive:</p>
<pre class="prettyprint"><code>{{ map show_locations_list=&quot;true&quot; show_reset_link=&quot;Show initial Map&quot; width=&quot;300&quot; height=&quot;250&quot; }}</code></pre>
<p>This will display a 300px by 250px map, plus the text list of the locations (also called Points Of Interest, or POI's), with a text link which, when clicked, resets the map to the position the editor or journalist originally set.</p>
<p><img src="static/geo-scr01_1.png" /></p>
<p>The resulting map displays the list of points and the map with two points on it. The width and height values used here are not mandatory; if not present, then the global values set in Newscoop preferences are used. You can find more details on this in the chapter <em>System Preferences</em> of the <em>Newscoop 4 for</em> <em>Journalists and</em> <em>Editors</em> manual.<br />
</p>
<h3>Listing Article Locations</h3>
<p>In the previous example, you saw that it's possible to display the list of locations together with the map, but it's a simple list. What if you want to display a list with some more data about each location? You might need to publish that data even without displaying the graphical map. For this purpose, Newscoop provides a special function <em>list_article_locations</em>.</p>
<p>We are now going to display a more detailed list of locations for the same article, with the following code:</p>
<pre class="prettyprint linenums"><code>{{ map show_locations_list=&quot;false&quot; show_reset_link=&quot;Show initial Map&quot; width=&quot;300&quot; height=&quot;250&quot; }}
{{ list_article_locations }}
  {{ if $gimme-&gt;location-&gt;enabled }}
    &lt;p&gt;
      Location Name: {{ $gimme-&gt;location-&gt;name }}&lt;br /&gt;
      Geo Position: {{ $gimme-&gt;location-&gt;longitude }},
                     {{ $gimme-&gt;location-&gt;latitude }}&lt;br /&gt;
      Description: {{ $gimme-&gt;location-&gt;text }}&lt;br /&gt;
    &lt;/p&gt;
  {{ /if }}
{{ /list_article_locations }}</code></pre>
<p>And the output looks like this:<br />
</p>
<p><img src="static/geo-sc02.png" /></p>
<h3>Multi-maps</h3>
<p>Important improvements to mapping were developed for Newscoop 4, most of them under the concept of <em>Multi-maps</em>.</p>
<p>When you edit an article in the Newscoop administration interface you have the option of adding a map, and then you can add as many locations (point of interest) as you want. All those locations are stored in the database and can be displayed in article pages, but in Newscoop 3 only together with the article those points are related to.</p>
<p>The concept of multi-maps in Newscoop 4 goes far beyond this. You can set a map using several different options, grouping multiple locations regardless of which article they belong to. It is called multi-maps because a single map can display locations from multiple articles, but also because in a single article you will be able to display multiple maps.<br />
</p>
<p>It is possible to do advanced stuff by defining a map specifying, for example:</p>
<ul>
<li>from which articles you want to display locations, with all those points in a single map<br />
</li>
<li>one or more topics, then Newscoop will find all articles connected to those topics and display all the locations from those articles, again in a single map<br />
</li>
<li>the area (rectangle, polygon). Newscoop will look for all the locations matching this criteria and they will be displayed in a map</li>
</ul>
<p>It is possible to select a map, and then display the list of all the articles the journalists have written corresponding to the locations in that map.</p>
<p>Sounds exciting? Actually, it is!</p>
<p><span id="ch033_managing-multiple-authors-and-articles.xhtml"></span></p>
<h1>Managing multiple authors and articles</h1>
<p>Newscoop has a built in author management tool in which you can create and edit author accounts, with biographies, pictures and other information. You can also create different kinds of author accounts, for photographers, translators, researchers or other contributors - multiple authors can be assigned to a single article.</p>
<p><img src="static/multiple-authors.jpg" /></p>
<p>The following sample code will explain how to print author information when displaying an article. You can print an author's last and first name, their image URL, full name, author type (photographer, etc.), their email address and biographical text.</p>
<pre class="prettyprint linenums"><code>&lt;ul&gt;
{{ list_article_authors }}
&lt;li style=&quot;clear: left;&quot;&gt;
&lt;strong&gt;{{ $gimme-&gt;author-&gt;last_name }}&lt;/strong&gt;, {{ $gimme-&gt;author-&gt;first_name }}&lt;br /&gt;
&lt;img src=&quot;{{ $gimme-&gt;author-&gt;picture-&gt;imageurl }}&quot; align=&quot;left&quot; width=&quot;66px&quot;&gt;
{{ $gimme-&gt;author-&gt;name }}
({{ $gimme-&gt;author-&gt;type }}):
&lt;a href=&quot;mailto:{{ $gimme-&gt;author-&gt;email }}&quot;&gt;{{ $gimme-&gt;author-&gt;email }}&lt;/a&gt;
{{ $gimme-&gt;author-&gt;biography-&gt;text }}
&lt;/li&gt;
{{ /list_article_authors }}
&lt;/ul&gt;</code></pre>
<p><span id="ch034_subscriptions-registration-and-content-access.xhtml"></span></p>
<h1>Subscriptions, registration and content access</h1>
<p>Newscoop templates can be constructed in a way that they deliver content depending on the status of the user (logged in or not) and their subscription (does the user have access to this article, section, or language?)</p>
<p>If you decide to use subscriptions, this chapter explains how control access to the content, and how to set up the registration process and forms. In a previous chapter we discussed the strategy of using subscriptions in your publication. Further below, you can find a quick introduction to managing subscriptions through the administration interface.</p>
<p>Using a subscription mechanism allows you to manage content access:</p>
<ul>
<li>Some content is accessible only to those users who are logged in</li>
<li>An additional requirement for paid subscriptions may be that the reader has to have a valid subscription for the content they are attempting to access<br />
</li>
</ul>
<p>Journalists and editors then need to switch off the 'Visible to non-subscribers' option on the article edit screen, in order to restrict access to the article.</p>
<h2>Controlling content and functionality access</h2>
<p>You can check if the reader is logged in with $gimme-&gt;user-&gt;logged_in:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;user-&gt;logged_in }}
  {{ include file=&quot;_tpl/article-comments.tpl&quot; }}
{{ else }}
  Register and log in to comment
{{ /if }}</code></pre>
<p>You can check if the user has access to content with $gimme-&gt;article-&gt;content_accessible. What you do with this information is up to you. You can still deliver the same content if you want, or you can only deliver parts of it. Here are two examples to illustrate this. First, truncate the article for readers who are not allowed access yet:<br />
</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;content_accessible }}
  {{ include file=&quot;_tpl/article-fullcontent.tpl&quot; }}
{{ else }}
   {{ $gimme-&gt;article-&gt;full_text|truncate:300 }}
   Buy a subscription today to get full access!
{{ /if }}</code></pre>
<p>Or display relevant information in classified ads to readers who have subscribed, like this:</p>
<pre class="prettyprint linenums"><code>{{ $gimme-&gt;article-&gt;ad_text }}&lt;br/&gt;Contact:
{{ if $gimme-&gt;article-&gt;content_accessible }}
  &lt;a href=&quot;mailto:{{ $gimme-&gt;article-&gt;ad_email }}&quot;&gt;{{ $gimme-&gt;article-&gt;ad_email }}&lt;/a&gt;
{{ else }}
  Subscribe for contact information.
{{ /if }}</code></pre>
<h2>Registration, login and subscription templates</h2>
<p>Your job gets much more complicated if you need to provide the entire functionality circle:</p>
<ul>
<li>Login option for your publication's existing subscribers</li>
<li>Register option for new subscribers<br />
</li>
<li>Account page for users to check or change their personal information, including changing their password</li>
<li>Option to resend lost or forgotten passwords</li>
<li>Logout option</li>
</ul>
<p>If you're also working with paid/trial subscriptions, it's not enough for the reader just to be registered; they may be required to have a valid subscription to some, or all, sections or publications. You will need to develop functionality which:</p>
<ul>
<li>ensures that the reader is able to choose what they want to subscribe to (which language if more than one is available; which sections; which publications)</li>
<li>gives the reader information on what they can choose, and what the price will be</li>
</ul>
<h3>Login and Registration Box</h3>
<p>The first thing that a reader needs is the option to login or register. This can be displayed in a box placed somewhere near the top of your publication's pages.</p>
<p><img src="static/login-box.png" /></p>
<p>The Newscoop template for this is:</p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;logintop&quot;&gt;
{{ if ! $gimme-&gt;user-&gt;logged_in }}
    {{ login_form submit_button=&quot;login&quot; }}
        &lt;p class=&quot;fields&quot;&gt;&lt;a href=&quot;{{ uri options=&quot;template register.tpl&quot; }}&quot;&gt;Register&lt;/a&gt; | {{ if $gimme-&gt;login_action-&gt;is_error }}&lt;span &gt;{{ $gimme-&gt;login_action-&gt;error_message }}!&lt;/span&gt;{{ else }}Sign in:{{ /if }}
        &lt;label for=&quot;uname&quot;&gt;&lt;/label&gt; {{ camp_edit object=&quot;login&quot; attribute=&quot;uname&quot; html_code=&quot;value=\&quot;username\&quot;&quot; }}
        &lt;label for=&quot;uname&quot;&gt;&lt;/label&gt; {{camp_edit object=&quot;login&quot; attribute=&quot;password&quot; html_code=&quot;value=\&quot;password\&quot;&quot; }}
    {{ /login_form }}&lt;/p&gt;
{{ else }}&lt;form&gt;&lt;p class=&quot;fields&quot;&gt;Welcome, &lt;a href=&quot;{{ uri options=&quot;template register.tpl&quot; }}&quot;&gt;{{ $gimme-&gt;user-&gt;name }}&lt;/a&gt; | &lt;a href=&quot;?logout=true&quot;&gt;logout&lt;/a&gt;&lt;/p&gt;&lt;/form&gt;
{{ /if }}
&lt;/div&gt;&lt;!-- /.login-top --&gt;</code></pre>
<p>This template will check to see if the user is already logged in, and if they are, it will display 'Welcome, &lt;Full Name&gt;', where Full Name is also a link to the page where the reader can review their personal information. Also, an option for logging out is displayed.</p>
<p>Logging out works by generating a new URL parameter when the link is clicked:</p>
<pre class="prettyprint"><code>&lt;a href=&quot;?logout=true&quot;&gt;logout&lt;/a&gt;</code></pre>
<p>This will reload the current page, but the hook is in the _html-head.tpl template. When this parameter in the URL is provided, the currently logged-in user is logged out. Here is the code:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;url-&gt;get_parameter(&#39;logout&#39;) == &#39;true&#39; }}
&lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; CONTENT=&quot;LoginUserId=; path=/&quot;&gt;
&lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; CONTENT=&quot;LoginUserKey=; path=/&quot;&gt;
{{ $gimme-&gt;url-&gt;reset_parameter(&#39;logout&#39;) }}
&lt;META HTTP-EQUIV=&quot;Refresh&quot; content=&quot;0;url={{ uri }}&quot;&gt;
{{ /if }}</code></pre>
<p>Now, for some more serious stuff: If the user is not logged in, this template provides the options for logging in or registering. Registering calls the register.tpl template (the same one is used for modifying an existing reader's data).</p>
<h3>Registration Template register.tpl</h3>
<p>First, here's the whole code:</p>
<pre class="prettyprint linenums"><code>{{ if !$gimme-&gt;edit_user_action-&gt;defined &amp;&amp; !$gimme-&gt;edit_subscription_action-&gt;defined }}
    {{ include file=&quot;_tpl/user-form.tpl&quot; }}
{{ /if }}

{{ if $gimme-&gt;edit_user_action-&gt;defined &amp;&amp; $gimme-&gt;edit_user_action-&gt;is_error }}
    &lt;h5&gt;Error registering your account: {{ $gimme-&gt;edit_user_action-&gt;error_message }}&lt;/h5&gt;
    {{ include file=&quot;_tpl/user-form.tpl&quot; }}
{{ /if }}

{{ if $gimme-&gt;edit_user_action-&gt;defined &amp;&amp; $gimme-&gt;edit_user_action-&gt;ok }}
    {{ if $gimme-&gt;edit_user_action-&gt;type == &quot;add&quot; }}
        &lt;h5&gt;Your user account was successfully added. You will soon receive a confirmation about how to access your subscription.&lt;/h5&gt;
    {{else }}
        &lt;h5&gt;User data successfully added/modified&lt;/h5&gt;
    {{ /if }}
{{ /if }}</code></pre>
<p>The code should be self-explanatory - it basically checks whether it should load the user form immediately (if no previous action was taken, it means that the reader wants to perform a new account registration), and additionally it checks to see if an error was generated in the registration process. Finally, if the previous action was a successful registration or account modification, the template will send the appropriate message.</p>
<h3>Registration and Profile Form: user-form.tpl</h3>
<p>The template called in the process of registration or account modification is user-form.tpl. We're using a table in this case because it's faster to make, but you can create your own CSS-based solution if you prefer:</p>
<pre class="prettyprint linenums"><code>{{ user_form template=&quot;subscription.tpl&quot; submit_button=&quot;submit&quot; }}
&lt;p style=&quot;margin: 15px 0&quot;&gt;Please fill in the following form in order to create the subscription account.&lt;/p&gt;
    &lt;table id=&quot;contact&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;label for=&quot;contact-name&quot;&gt;Full name:&lt;/label&gt;&lt;/td&gt;
            &lt;td&gt;{{ camp_edit object=&quot;user&quot; attribute=&quot;name&quot; html_code=&quot;class=\&quot;tablefield widerone\&quot; id=\&quot;contact-name\&quot;&quot; }}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;label for=&quot;contact-email&quot;&gt;E-mail:&lt;/label&gt;&lt;/td&gt;
            &lt;td&gt;{{ camp_edit object=&quot;user&quot; attribute=&quot;email&quot; html_code=&quot;class=\&quot;tablefield widerone\&quot; id=\&quot;contact-email\&quot;&quot; }}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;label for=&quot;contact-uname&quot;&gt;Username:&lt;/label&gt;&lt;/td&gt;
            &lt;td&gt;{{ camp_edit object=&quot;user&quot; attribute=&quot;uname&quot; html_code=&quot;class=\&quot;tablefield widerone\&quot; id=\&quot;contact-uname\&quot;&quot; }}&lt;/td&gt;
        &lt;/tr&gt;
{{ if ! $gimme-&gt;user-&gt;logged_in }}
        &lt;tr&gt;
            &lt;td&gt;&lt;label for=&quot;contact-password&quot;&gt;Password:&lt;/label&gt;&lt;/td&gt;
            &lt;td&gt;{{ camp_edit object=&quot;user&quot; attribute=&quot;password&quot; html_code=&quot;class=\&quot;tablefield widerone\&quot; id=\&quot;contact-password\&quot;&quot; }}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;label for=&quot;contact-passwordagain&quot;&gt;Password (again):&lt;/label&gt;&lt;/td&gt;
            &lt;td&gt;{{ camp_edit object=&quot;user&quot; attribute=&quot;passwordagain&quot; html_code=&quot;class=\&quot;tablefield widerone\&quot; id=\&quot;contact-passwordagain\&quot;&quot; }}&lt;/td&gt;
        &lt;/tr&gt;
{{ /if }}
        &lt;tr&gt;
            &lt;td&gt;&lt;label for=&quot;contact-city&quot;&gt;City, Country:&lt;/label&gt;&lt;/td&gt;
            &lt;td&gt;{{ camp_edit object=&quot;user&quot; attribute=&quot;city&quot; html_code=&quot;class=\&quot;tablefield widerone\&quot; id=\&quot;contact-city\&quot;&quot; }}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;label for=&quot;contact-phone&quot;&gt;Phone:&lt;/label&gt;&lt;/td&gt;
            &lt;td&gt;{{ camp_edit object=&quot;user&quot; attribute=&quot;phone&quot; html_code=&quot;class=\&quot;tablefield widerone\&quot; id=\&quot;contact-phone\&quot;&quot; }}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;label for=&quot;second_phone&quot;&gt;Phone (cell):&lt;/label&gt;&lt;/td&gt;
            &lt;td&gt;{{ camp_edit object=&quot;user&quot; attribute=&quot;second_phone&quot; html_code=&quot;class=\&quot;tablefield widerone\&quot; id=\&quot;second_phone\&quot;&quot; }}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;input type=&quot;hidden&quot; name=&quot;SubsType&quot; value=&quot;paid&quot; /&gt;                     &lt;/table&gt;

    &lt;div id=&quot;submitformdiv&quot;&gt;
        {{ /user_form }}
    &lt;/div&gt;
{{ if $gimme-&gt;user-&gt;logged_in }}&lt;p style=&quot;margin: 15px 0&quot;&gt; To change your password, go &lt;a href=&quot;{{ uri options=&quot;template user-chgpass.tpl&quot; }}&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
{{ /if }}</code></pre>
<p>This is the universal user form which, in the case of user registration, also includes fields to define and double-check the user's password. In the other case, when a user is logged in when submitting this form, it means that the user is modifying their data and not creating a new user. The option for changing the password is then offered in a separate template (so as not to mess with changing the other data).</p>
<p>After registering or modifying the data, the user is redirected to the subscribe.tpl template, where the final step of creating or changing the subscription is performed.</p>
<p>In this example we are presuming that your publication intends to work with paid subscriptions, so we have one hidden parameter:</p>
<pre><code>&lt;input type=&quot;hidden&quot; name=&quot;SubsType&quot; value=&quot;paid&quot; /&gt;</code></pre>
<p>You can change it to work with trial subscriptions as well. Or, you can create a drop-down menu so the reader can choose what sort of subscription they wants to have:<br />
</p>
<pre class="prettyprint linenums"><code>Subscription type:
    &lt;select name=&quot;SubsType&quot;&gt;
        &lt;option value=&quot;trial&quot;&gt;Trial&lt;/option&gt;
        &lt;option value=&quot;paid&quot;&gt;Paid&lt;/option&gt;
    &lt;/select&gt;</code></pre>
<p>Please note that this Newscoop functionality isn't payment processing; it is for the system's internal purposes to determine whether or not the reader is subscribed to the content. Action is required from the site's staff to approve or decline the subscription, based on the reader's payment data.</p>
<h3>Subscription Areas: subscription.tpl</h3>
<p>The final step in this process, after creating a new user, is to define the content the user is interested in registering for. In Newscoop, publishers can set different prices for different languages, sections, or publications, and you can offer potential subscribers either a global publication subscription, or subscription by sections.</p>
<p>But before offering these forms, you need to check if everything went well, or if there were some errors... So here is the subscription.tpl template:</p>
<pre class="prettyprint linenums"><code>{{* no user form submitted, no subscription form submitted: display the user form *}}
{{ if !$gimme-&gt;edit_user_action-&gt;defined
      &amp;&amp; !$gimme-&gt;edit_subscription_action-&gt;defined }}
          {{ include file=&quot;_tpl/user-form.tpl&quot; }}
{{ /if }}
{{* user form submitted with errors: display the error and the user form *}}
{{ if $gimme-&gt;edit_user_action-&gt;defined
      &amp;&amp; $gimme-&gt;edit_user_action-&gt;is_error }}
          &lt;h5 style=&quot;margin-bottom: 20px&quot;&gt;There was an error submitting the account creation form:
          {{ $gimme-&gt;edit_user_action-&gt;error_message }}&lt;/h5&gt;
          {{ include file=&quot;_tpl/user-form.tpl&quot; }}
{{ /if }}
{{* user form submitted ok: display the subscription form *}}
{{ if $gimme-&gt;edit_user_action-&gt;defined
      &amp;&amp; $gimme-&gt;edit_user_action-&gt;ok }}
          {{ include file=&quot;_tpl/subscription-form.tpl&quot; }}
{{ /if }}
{{* subscription form submitted with errors: display the error and the submit form *}}
{{ if $gimme-&gt;edit_subscription_action-&gt;defined
      &amp;&amp; $gimme-&gt;edit_subscription_action-&gt;is_error }}
          &lt;p style=&quot;margin: 15px 0&quot;&gt;There was an error submitting the subscription form:
          {{ $gimme-&gt;edit_subscription_action-&gt;error_message }}&lt;/p&gt;
          {{ include file=&quot;_tpl/subscription-form.tpl&quot; }}
{{ /if }}
{{* subscription form submitted ok: display success message *}}
{{ if $gimme-&gt;edit_subscription_action-&gt;defined
      &amp;&amp; $gimme-&gt;edit_subscription_action-&gt;ok }}
          &lt;p style=&quot;margin: 15px 0&quot;&gt;Your subscription was created successfully.&lt;/p&gt;
{{ /if }}</code></pre>
<p>The subscription form itself:</p>
<pre class="prettyprint linenums"><code>{{ subscription_form type=&quot;by_section&quot; total=&quot;Total&quot; template=&quot;subscription.tpl&quot; button_html_code=&quot;class=\&quot;submitbutton\&quot;&quot; }}
&lt;table class=&quot;userform&quot;&gt;
        &lt;tr&gt;
            &lt;th colspan=&quot;2&quot;&gt;Please fill in the following form in order to create the subscription.&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td colspan=&quot;2&quot;&gt;
                Subscription time:
                {{ $gimme-&gt;publication-&gt;subscription_time }} {{ $gimme-&gt;publication-&gt;subscription_time_unit }}
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td colspan=&quot;2&quot;&gt;
                {{ camp_select object=&quot;subscription&quot; attribute=&quot;alllanguages&quot; }}
                &lt;span class=&quot;formtext&quot;&gt;Subscribe to all languages&lt;/span&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Languages:&lt;/td&gt;
            &lt;td&gt;{{ camp_select object=&quot;subscription&quot; attribute=&quot;languages&quot; }}
        &lt;/tr&gt;
        &lt;tr&gt;
                &lt;td colspan=&quot;2&quot;&gt;Sections&lt;/td&gt;
        &lt;/tr&gt;
        {{ list_sections }}
        &lt;tr&gt;
                &lt;td colspan=&quot;2&quot;&gt;
                        {{ camp_select object=&quot;subscription&quot; attribute=&quot;section&quot; }}
                        &lt;input name=&quot;tx_subs{{ $gimme-&gt;section-&gt;number }}&quot; type=&quot;hidden&quot; value=&quot;{{ $gimme-&gt;publication-&gt;subscription_time }}&quot;&gt;
                        {{ $gimme-&gt;section-&gt;name }}
                &lt;/td&gt;
        &lt;/tr&gt;
        {{ /list_sections }}
&lt;/table&gt;
{{ /subscription_form }}</code></pre>
<p>All subscription options (price, time, time unit, currency...) are set on the Publication configuration page in Newscoop's administration interface (you can find it in Content -&gt; Publications, then choose the wrench-and-screwdriver 'Configure' icon)</p>
<p><img src="static/subs-defaults.png" /></p>
<p>Then on the section level, you can decide to Add section to all subscriptions or to Delete section from all subscriptions.</p>
<p>The following user-chgpass.tpl template is only used to change existing Newscoop readers' passwords.</p>
<pre class="prettyprint linenums"><code>{{ user_form submit_button=&quot;submit&quot; template=&quot;register.tpl&quot; }}
    &lt;table id=&quot;contact&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot;&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;label for=&quot;contact-passowrd&quot;&gt;Password:&lt;/label&gt;&lt;/td&gt;
            &lt;td&gt;{{ camp_edit object=&quot;user&quot; attribute=&quot;password&quot; html_code=&quot;class=\&quot;tablefield widerone\&quot; id=\&quot;contact-password\&quot;&quot; }}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;label for=&quot;contact-passowrdagain&quot;&gt;Password (again):&lt;/label&gt;&lt;/td&gt;
            &lt;td&gt;{{ camp_edit object=&quot;user&quot; attribute=&quot;passwordagain&quot; html_code=&quot;class=\&quot;tablefield widerone\&quot; id=\&quot;contact-passwordagain\&quot;&quot; }}&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
    &lt;div style=&quot;margin: 15px 0;&quot;&gt;
        {{ /user_form }}
    &lt;/div&gt;</code></pre>
<p>After changing the password, this template redirects the reader back to the register.tpl template.</p>
<p>At this point, you might be asking yourself: &quot;Why the hell is the closing tag for the user_form set inside the div?&quot; Put down your laser blaster nice and slow, and we'll explain: It's because the closing tag defines the position of the submit button.</p>
<p><span id="ch035_browser-detection-and-robots-search-engines.xhtml"></span></p>
<h1>Browser detection and robots (search engines)<br />
</h1>
<p>For advanced web design, it is helpful to know more about the browser where the site is being displayed. You can also detect if your pages are being grabbed by a search engine robot, and deliver content accordingly. For example, if you are using a subscription model for your publication, you can display more information to the search engine robot than you would to an anonymous reader. This way, the search engines will list your content more descriptively than if they only grabbed the &quot;please subscribe&quot; page.</p>
<p>This chapter will give you some ideas on how to detect the client browser, or search engine robot, and change your templates accordingly. The template reference at the end of this Cookbook provides all the options for the browser object.</p>
<p>This is the kind of information Newscoop can get from a browser or robot:</p>
<p><strong>iPhone browser</strong><br />
</p>
<ul>
<li>Browser: safari, version 528.16 | Engine: webkit, version 528.18</li>
<li>Mobile: device: iphone | OS: iphone os | OS version: 3.0</li>
<li>Bot: no</li>
<li>Type: mobile = handheld</li>
</ul>
<p><strong>Google Chrome browser</strong></p>
<ul>
<li>Browser: chrome, version 10.0.648.205 | Engine: webkit, version 534.16</li>
<li>Mobile: no</li>
<li>Bot: no</li>
<li>Type: bro = normal browser</li>
</ul>
<p><strong>Firefox browser</strong></p>
<ul>
<li>Browser: firefox, version 3.6.16 | Engine: gecko, version 1.9</li>
<li>Mobile: no</li>
<li>Bot: no</li>
<li>Type: bro = normal browser<br />
</li>
</ul>
<p><strong>Google robot</strong></p>
<ul>
<li>Browser: googlebot, version 2.1 | Engine: false, version false</li>
<li>Mobile: no</li>
<li>Bot: yes</li>
<li>Type: bot = web bot<br />
</li>
</ul>
<h2>The easy CSS way: classes in the body tag</h2>
<p>An easy way to deliver different styles to different browsers is to add classes to the body tag, and then apply changes using CSS. Here some examples of the information you can print in the body tag with Newscoop:</p>
<p><strong>iPhone 3</strong></p>
<pre class="prettyprint linenums"><code>&lt;body class=&quot;webkit mobile safari iphone iphoneos iphoneos3 iphoneos3-0 safari528 safari528-16&quot; &gt;</code></pre>
<p><strong>Firefox 3.6.16</strong></p>
<pre><code>&lt;body class=&quot;moz bro gecko firefox firefox3 firefox3-6 firefox3-6-16 gecko1 gecko1-9&quot; &gt;</code></pre>
<p><strong>Internet Explorer 8</strong></p>
<pre><code>&lt;body class=&quot;ie bro msie msie8 msie8-0 trident&quot; &gt;</code></pre>
<p><strong>Google Bot 2.1</strong></p>
<pre><code>&lt;body class=&quot;google bot googlebot&quot; &gt;</code></pre>
<p><strong>Chrome 10.0.648.205</strong></p>
<pre><code>&lt;body class=&quot;webkit bro chrome chrome10 chrome10-0-648-205&quot; &gt;</code></pre>
<p>You can get these rich body tags using the following code snippet. Note: {{ textformat wrap=200 }} is used in this example to list all the classes in one line and avoid line breaks. The first line break would be applied after 200 characters - which is beyond what this code will deliver. Throw out what you don't need. You could also place the template in a separate file and use {{ include }}.</p>
<pre class="prettyprint linenums"><code>&lt;body class=&quot;{{ textformat wrap=200 }}
{{ $gimme-&gt;browser-&gt;browser_working }}
{{ $gimme-&gt;browser-&gt;ua_type }}
{{ $gimme-&gt;browser }}
{{* mobile device / OS *}}
  {{ $gimme-&gt;browser-&gt;mobile_data.0 }}
  {{ $gimme-&gt;browser-&gt;mobile_data.3|regex_replace:&quot;/\ /&quot;:&quot;&quot; }}
  {{ strip }}{{ $gimme-&gt;browser-&gt;mobile_data.3|regex_replace:&quot;/\ /&quot;:&quot;&quot; }}
  {{ $gimme-&gt;browser-&gt;mobile_data.4|regex_replace:&quot;/[\.][0-9]*/&quot;:&quot;&quot; }}{{ /strip }}
  {{ strip }}{{ $gimme-&gt;browser-&gt;mobile_data.3|regex_replace:&quot;/\ /&quot;:&quot;&quot; }}
  {{ $gimme-&gt;browser-&gt;mobile_data.4|regex_replace:&quot;/\./&quot;:&quot;-&quot; }}{{ /strip }}
{{* firefox / gecko *}}
  {{ $gimme-&gt;browser-&gt;moz_data.0 }}
  {{ strip }}{{ $gimme-&gt;browser-&gt;moz_data.0 }}
  {{ $gimme-&gt;browser-&gt;moz_data.1|regex_replace:&quot;/[\.][0-9]*/&quot;:&quot;&quot; }}{{ /strip }}
  {{ strip }}{{ $gimme-&gt;browser-&gt;moz_data.0 }}
  {{ $gimme-&gt;browser-&gt;moz_data.1|regex_replace:&quot;/[\.][0-9]*$/&quot;:&quot;&quot;|regex_replace:&quot;/\./&quot;:&quot;-&quot; }}{{ /strip }}
  {{ strip }}{{ $gimme-&gt;browser-&gt;moz_data.0 }}
  {{ $gimme-&gt;browser-&gt;moz_data.1|regex_replace:&quot;/\./&quot;:&quot;-&quot; }}{{ /strip }}
  {{ if $gimme-&gt;browser-&gt;browser_working == &quot;moz&quot; }}
  gecko{{ $gimme-&gt;browser-&gt;moz_data.2|regex_replace:&quot;/[\.][0-9]*/&quot;:&quot;&quot; }}
  gecko{{ $gimme-&gt;browser-&gt;moz_data.2|regex_replace:&quot;/\./&quot;:&quot;-&quot; }}
  {{ /if }}
{{* internet explorer *}}
  {{ if $gimme-&gt;browser-&gt;browser_working == &quot;ie&quot; }}
    {{ strip }}{{ $gimme-&gt;browser-&gt;browser_name }}
    {{ $gimme-&gt;browser-&gt;webkit_data.2|regex_replace:&quot;/[\.][0-9]*/&quot;:&quot;&quot; }}{{ /strip }}
    {{ strip }}{{ $gimme-&gt;browser-&gt;browser_name }}
    {{ $gimme-&gt;browser-&gt;webkit_data.2|regex_replace:&quot;/\./&quot;:&quot;-&quot; }}{{ /strip }}
    {{ if $gimme-&gt;browser-&gt;webkit_data.2 &gt; 8 }}chakra{{ else }}trident{{ /if }}
  {{ /if }}
{{* chrome *}}
  {{ if $gimme-&gt;browser-&gt;browser_working == &quot;webkit&quot; }}
    {{ strip }}{{ $gimme-&gt;browser-&gt;webkit_data.0 }}
    {{ $gimme-&gt;browser-&gt;webkit_data.1|regex_replace:&quot;/[\.][0-9]*/&quot;:&quot;&quot; }}{{ /strip }}
    {{ strip }}{{ $gimme-&gt;browser-&gt;webkit_data.0 }}
    {{ $gimme-&gt;browser-&gt;webkit_data.1|regex_replace:&quot;/\./&quot;:&quot;-&quot; }}{{ /strip }}
  {{ /if }}
{{ /textformat }}&quot; &gt; </code></pre>
<h2>Full template control: browser_detection.tpl</h2>
<p>To collect the information listed at the beginning of this chapter, you can use the sub-template <strong>browser_detection.tpl</strong>. It should be called in the header of your pages, and will return a set of variables that make it easy to manage your templates for different browsers or robots. Here is the code for <strong>browser_detection.tpl</strong>: </p>
<p><strong></strong></p>
<pre class="prettyprint linenums"><code>{{* gecko / firefox ***********************************}}
{{ if $gimme-&gt;browser-&gt;browser_working == &quot;moz&quot; }}
  {{ assign var=&quot;browserdetect_name&quot; value=`$gimme-&gt;browser-&gt;moz_data.0` }}
  {{ assign var=&quot;browserdetect_version&quot; value=`$gimme-&gt;browser-&gt;moz_data.1` }}
  {{ assign var=&quot;browserdetect_engineversion&quot; value=`$gimme-&gt;browser-&gt;moz_data.2` }}
  {{ assign var=&quot;browserdetect_engine&quot; value=&quot;gecko&quot; }}
{{ /if }}
{{* webkit / chrome / safari  ***********************************}}
{{ if $gimme-&gt;browser-&gt;browser_working == &quot;webkit&quot; }}
  {{ assign var=&quot;browserdetect_engineversion&quot; value=`$gimme-&gt;browser-&gt;browser_number` }}
  {{ assign var=&quot;browserdetect_name&quot; value=`$gimme-&gt;browser-&gt;webkit_data.0` }}
  {{ assign var=&quot;browserdetect_version&quot; value=`$gimme-&gt;browser-&gt;webkit_data.1` }}
  {{ assign var=&quot;browserdetect_engine&quot; value=&quot;webkit&quot; }}
{{ /if }}
{{* ie / internet explorer  ***********************************}}
{{ if $gimme-&gt;browser-&gt;browser_working == &quot;ie&quot; }}
  {{ assign var=&quot;browserdetect_name&quot; value=`$gimme-&gt;browser-&gt;browser_name` }}
  {{ assign var=&quot;browserdetect_engineversion&quot; value=`$gimme-&gt;browser-&gt;webkit_data.2` }}
  {{ assign var=&quot;browserdetect_version&quot; value=`$gimme-&gt;browser-&gt;webkit_data.2` }}
  {{ if $gimme-&gt;browser-&gt;webkit_data.2 &gt; 8 }}
    {{ assign var=&quot;browserdetect_engine&quot; value=&quot;chakra&quot; }}
  {{ else }}
    {{ assign var=&quot;browserdetect_engine&quot; value=&quot;trident&quot; }}
  {{ /if }}
{{ /if }}
{{* bot / search engine  ***********************************}}
{{ if $gimme-&gt;browser-&gt;ua_type == &quot;bot&quot; }}
  {{ assign var=&quot;browserdetect_name&quot; value=`$gimme-&gt;browser-&gt;browser_name` }}
  {{ assign var=&quot;browserdetect_version&quot; value=`$gimme-&gt;browser-&gt;browser_math_number` }}
  {{ assign var=&quot;browserdetect_engine&quot; value=&quot;false&quot; }}
  {{ assign var=&quot;browserdetect_engineversion&quot; value=&quot;false&quot; }}
{{ /if }}
{{* mobile devices ******************************************}}
{{ if $gimme-&gt;browser-&gt;ua_type != &quot;mobile&quot; }}
  {{ assign var=&quot;browserdetect_mobile_device&quot; value=&quot;false&quot; }}
  {{ assign var=&quot;browserdetect_mobile_os&quot; value=&quot;false&quot; }}
  {{ assign var=&quot;browserdetect_mobile_os_number&quot; value=&quot;false&quot; }}
{{ else }}
  {{ assign var=&quot;browserdetect_mobile_device&quot; value=`$gimme-&gt;browser-&gt;mobile_data.0` }}
  {{ assign var=&quot;browserdetect_mobile_os&quot; value=`$gimme-&gt;browser-&gt;mobile_data.3` }}
  {{ assign var=&quot;browserdetect_mobile_os_number&quot; value=`$gimme-&gt;browser-&gt;mobile_data.4` }}
{{ /if }}</code></pre>
<p>Save the code snippet above inside the <strong>_tpl</strong> folder of your template package. If you are using &quot;The Journal&quot; template pack, include it like this:</p>
<pre><code>{{ include file=&quot;set_thejournal/_tpl/browser_detection.tpl&quot; }}</code></pre>
<p>If your template package has a different name, adjust the path accordingly. After the template has been called, the information about the browser listed earlier can be displayed by these lines:</p>
<pre class="prettyprint linenums"><code>&lt;ul&gt;
&lt;li&gt;Browser: {{ $browserdetect_name }}, version {{ $browserdetect_version }}
| Engine: {{ $browserdetect_engine }}, version {{ $browserdetect_engineversion }}&lt;/li&gt;
&lt;li&gt;Mobile: {{ if $browserdetect_mobile_device == &quot;false&quot; }}no{{ else }}
device: {{ $browserdetect_mobile_device }} |
OS: {{ $browserdetect_mobile_os }} |
OS version: {{ $browserdetect_mobile_os_number }}
{{ /if }}&lt;/li&gt;
&lt;li&gt;Bot: {{ if $gimme-&gt;browser-&gt;ua_type == &quot;bot&quot; }}yes{{ else }}no{{ /if }}&lt;/li&gt;
&lt;li&gt;Type: {{ $gimme-&gt;browser-&gt;ua_type }} =
{{ if $gimme-&gt;browser-&gt;ua_type == &quot;bot&quot; }}web bot{{ /if }}
{{ if $gimme-&gt;browser-&gt;ua_type == &quot;bro&quot; }}normal browser{{ /if }}
{{ if $gimme-&gt;browser-&gt;ua_type == &quot;bbro&quot; }}simple browser{{ /if }}
{{ if $gimme-&gt;browser-&gt;ua_type == &quot;mobile&quot; }}handheld{{ /if }}
{{ if $gimme-&gt;browser-&gt;ua_type == &quot;dow&quot; }}downloading agent{{ /if }}
{{ if $gimme-&gt;browser-&gt;ua_type == &quot;lib&quot; }}http library{{ /if }}
&lt;/li&gt;</code></pre>
<p><span id="ch036_mobile-device-detection-and-templates.xhtml"></span></p>
<h1>Mobile device detection and templates</h1>
<p>This chapter will give you a quick start into delivering different content to different devices, such as mobile phones. In the chapter on <em>Browser detection and robots (search engines)</em>, you will find a more in-depth introduction. The template reference at the end of this Cookbook lists all options for the browser object.<br />
</p>
<p>Delivering content to mobile devices is becoming an increasingly important issue for web developers. Whereas devices like tablets handle normal websites well, the majority of mobile phone users benefit from custom templates, delivering content for smaller screens.</p>
<p>Some design issues can be handled using the media=&quot;handheld&quot; versus media=&quot;screen&quot; property in the link tag:</p>
<pre class="prettyprint linenums"><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;...mobile.css&quot; media=&quot;handheld&quot;/&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;...screen.css&quot; media=&quot;screen&quot;/&gt;</code></pre>
<p>However, it is more elegant to serve custom pages for different devices. Among other factors, the amount of data downloaded can be reduced if you don't deliver parts of your page which are not meant for mobile devices - rather than just &quot;hiding&quot; them with CSS.<br />
</p>
<p>Here a simple example of how Newscoop can display a sidebar on the page, but only if the client does not use a mobile device:<br />
</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;browser-&gt;ua_type != &quot;mobile&quot; }}
  {{ include file=&quot;set_setname/_tpl/sidebar.tpl&quot; }}
{{ /if }}</code></pre>
<p>Change the path of the included file to match your template package. You can use the same logic for calling CSS files in the header:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;browser-&gt;ua_type == &quot;mobile&quot; }}
    &lt;link href=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_thejournal/_css/mobile.css&quot; media=&quot;handheld&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; &gt;
{{ else }}
    &lt;link href=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_thejournal/_css/style.css&quot; media=&quot;handheld&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; &gt;
{{ /if }}</code></pre>
<p>If you want to deliver content more specifically for different browsers on mobile devices, read the chapter on browser detection. This will enable you, for example, to display links to you iPhone App only if the device is an iPhone. In a similar manner, you can handle media for different browsers as well. For instance, if the device does not support Flash, don't display the Flash player, but a link to the file.<br />
</p>
<p><strong>Note:</strong> there might be issues with caching systems. If you encounter a problem with browser detection when testing your Newscoop site, switch off the cache and see if that fixes the problem.<br />
</p>
<p><img src="static/coming-soon.png" class="noborder" /><br />
</p>
<p>A <strong>Mobile Browser Plugin</strong> is in development, which will give you more detailed information like the size of the display on the client side, allowing for even better control.</p>
<p><br />
</p>
<p><span id="ch037_tag-clouds-using-topics.xhtml"></span></p>
<h1>Tag clouds using topics<br />
</h1>
<p>A tag cloud is a collection of words in one place, a depiction of the text content of your publication. Normally, tags are listed alphabetically, and the importance of each tag is shown with font size or colour. To make a tag cloud in Newscoop, we can use <strong>topics</strong> and <strong>sub-topics</strong>. First, you will need to create a list of Newscoop sub-topics, having the parent topic 'tagcloud':</p>
<p><img src="static/SCN14.PNG" /></p>
<p>Then, you will just need to attach the required sub-topics to an article:</p>
<p><img src="static/SCN15.PNG" /></p>
<p>Then, you need to create a Tag Cloud template. Please note that this template will be doing a lot of listings, so it might be a good idea to put it a cron job to produce the output, and place the result in a file for further inclusion from other templates.</p>
<p>The first thing to do will be to list all sub-topics (tags) of the main topic 'tagcloud' and get minimum and maximum numbers of articles having each topic. Also, we need to set up font-size ranges for the output:</p>
<pre class="prettyprint linenums"><code>{{ local }}
{{ unset_issue }}
{{ unset_section }}
{{ unset_article }}
{{ unset_topic }}
{{ set_topic name=&quot;tagcloud:en&quot; }}
{{ assign var=&quot;first_good_tag&quot; value=true }}
{{ list_subtopics }}
    {{ assign var=&quot;posts_count&quot; value=&quot;0&quot; }}
    {{ list_articles ignore_issue=&quot;true&quot; }}
        {{ assign var=&quot;posts_count&quot; value=$gimme-&gt;current_list-&gt;count }}
    {{ /list_articles }}
    {{ if $posts_count &gt; 0 }}
        {{ if $first_good_tag }}
            {{ assign var=&quot;min&quot; value=$posts_count }}
            {{ assign var=&quot;max&quot; value=$posts_count }}
            {{ assign var=&quot;first_good_tag&quot; value=false }}
        {{ /if }}
        {{ if $posts_count &gt; $max }}
            {{ assign var=&quot;max&quot; value=$posts_count }}
        {{ /if }}
        {{ if $posts_count &lt; $min }}
            {{ assign var=&quot;min&quot; value=$posts_count }}
        {{ /if }}
    {{ /if }}
{{ /list_subtopics }}

{{ assign var=&quot;minSize&quot; value=&quot;90&quot; }}
{{ assign var=&quot;maxSize&quot; value=&quot;240&quot; }}

{{ assign var=&quot;diff_max_min&quot; value=&quot;`$max-$min`&quot; }}
{{ assign var=&quot;diff_maxSize_minSize&quot; value=&quot;`$maxSize-$minSize`&quot; }}</code></pre>
<p>Next, we create the actual output. List sub-topics, get articles having each sub-topic, and assign the number of times the sub-topic was used:</p>
<pre class="prettyprint linenums"><code>&lt;ul class=&quot;tag-cloud&quot;&gt;
{{ list_subtopics }}
    {{ assign var=&quot;posts_count&quot; value=&quot;0&quot; }}
    {{ list_articles ignore_issue=&quot;true&quot; }}
        {{ assign var=&quot;posts_count&quot; value=$gimme-&gt;current_list-&gt;count }}
        {{ assign var=&quot;tag_name&quot; value=$gimme-&gt;topic-&gt;name }}
    {{ /list_articles }}</code></pre>
<p>Then we calculate font size for the sub-topic in the tag cloud:<br />
</p>
<pre class="prettyprint linenums"><code>{{ if $posts_count &gt; 0 }}
    {{ if $min == $max }}
        {{ assign var=&quot;fontSize&quot; value=&quot;`$diff_maxSize_minSize/2+$minSize`&quot; }}
    {{ else }}
    {{ assign var=&quot;a&quot; value=&quot;`$posts_count-$min`&quot; }}
    {{ assign var=&quot;b&quot; value=&quot;`$a/$diff_max_min`&quot; }}
    {{ assign var=&quot;fontSize&quot; value=&quot;`$b*$diff_maxSize_minSize+$minSize`&quot; }}
{{ /if }}</code></pre>
<p>And finally output the result:<br />
</p>
<pre class="prettyprint linenums"><code>    &lt;li&gt;
        &lt;span style=&quot;}}%&quot;&gt;&lt;a href=&quot;/?tpl=special_template_to_list_articles_based_on_topic.tpl&amp;tag={{ $tag_name }}&quot; title=&quot;{{ $posts_count }} articles having topic {{ $tag_name }}&quot;&gt;{{ $tag_name }}&lt;/a&gt;&lt;/span&gt;
    &lt;/li&gt;
{{ /if }}
{{ /list_subtopics }}
&lt;/ul&gt;
{{ /local }}</code></pre>
<p>As a result, you should get a Tag Cloud like the following screenshot:</p>
<p><img src="static/SCN16.PNG" class="noborder" /></p>
<p><em>Tag cloud created using topics</em></p>
<p> </p>
<p><span id="ch038_dynamic-page-layouts.xhtml"></span></p>
<h1>Dynamic page layouts</h1>
<p>In this chapter, you'll learn how to create dynamic page layouts that change automatically when a staff user clicks on a check box on the <strong>Article Edit</strong> page. </p>
<p>The example we show here features an Article Type with a custom switch 'breaking_news'. This custom switch can be added to the Article Type in the Newscoop administration interface. The journalist or editor then sees a checkbox for 'breaking_news' in the Article Edit screen, which they will click whenever they consider the story they are working on to be particularly important.</p>
<p>The result of a staff user clicking this checkbox can be detected in the template. Inside <em>list_articles</em> a constraint is added, collecting only articles where the custom switch called 'breaking_news' is turned on. If there's an article that fulfills that criteria, then it's listed. If not, the layout remains the same:</p>
<pre class="prettyprint"><code>{{ list_articles length=&quot;1&quot; ignore_section=&quot;true&quot; order=&quot;bypublishdate desc&quot; constraints=&quot;breaking_news is on&quot; }}</code></pre>
<p>That tells $gimme to list one article with the following constraints:</p>
<ul>
<li>Display articles regardless of the section they're in</li>
<li>Present the articles in descending chronological order according to their published date</li>
<li>Only display articles where the &quot;breaking_news&quot; custom switch is on</li>
</ul>
<p>The whole template looks like this:</p>
<pre class="prettyprint linenums"><code>{{ list_articles length=&quot;1&quot; ignore_section=&quot;true&quot; order=&quot;bypublishdate desc&quot; constraints=&quot;breaking_news is on&quot; }}
&lt;div id=&quot;breakingNews&quot;&gt;
    &lt;h3&gt;&lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;&lt;/h3&gt;
    {{ list_article_images length=&quot;1&quot; }}
    &lt;div id=&quot;breakingNewsLeft&quot;&gt;
        &lt;img src=&quot;{{ uri options=&quot;image width 435&quot; }}&quot; alt=&quot;{{ $gimme-&gt;article-&gt;image-&gt;description }}&quot; /&gt;
        &lt;p class=&quot;footnote&quot;&gt;{{ $gimme-&gt;article-&gt;image-&gt;description }} {{ if $gimme-&gt;article-&gt;image-&gt;photographer }}(Photo: {{ $gimme-&gt;article-&gt;image-&gt;photographer }}){{ /if }}&lt;/p&gt;
    &lt;/div&gt;
    {{ /list_article_images }}
    {{ if $gimme-&gt;prev_list_empty }}
    &lt;div id=&quot;breakingNewsLeft&quot;&gt;
        &lt;img src=&quot;/templates/images/breaking-news-{{ $gimme-&gt;language-&gt;code }}.jpg&quot; alt=&quot;Breaking news&quot; /&gt;
    &lt;/div&gt;
    {{ /if }}
    &lt;div id=&quot;breakingNewsCenter&quot;&gt;
        {{ $gimme-&gt;article-&gt;publish_date|camp_date_format:&quot;%M %e, %Y&quot; }}
        &lt;p&gt;{{ $gimme-&gt;article-&gt;deck }}&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
{{ /list_articles }}</code></pre>
<p>For more on using custom switches, see the chapter titled <em>Topics, switches, keywords to structure content</em>.</p>
<p><span id="ch039_working-with-images.xhtml"></span></p>
<h1>Working with images</h1>
<p>It's an understatement to say that images are crucial to news organizations. Because of their central role, Newscoop has a powerful and user-friendly media archive for storing, retrieving and reusing images in the administration interface. Newscoop's template language can access images in a number of different ways, and the output can be sent to web pages, to jQuery slideshows or other channels (see the chapter <em>Image galleries with jQuery</em> for more on that).</p>
<p>In this chapter, we'll look at how Newscoop templates work with images, image attributes and metadata. According to the Newscoop template reference, &quot;The <em>image</em> object is usually initialized inside a list of article images or a list of images. It is not initialized at the beginning of the template and cannot be initialized by other Newscoop functions.&quot; In other words, images must be used through lists or through articles.</p>
<p>You can make use of images through the <em>article</em> object, like when the current article has one or more images attached. One more place where you can use an <em>image</em> object is with <em>author</em> objects. We'll go into these options in detail below. What you can't do at this point is use an image object as a single isolated element, because it has to be set first by any of the means mentioned above.</p>
<h2>Renditions</h2>
<p>The image handling in Newscoop aims to provide more control over the images displayed in the pages at template level. The workflow goes something like this:<br />
<br />
a) you design and create your publication, and in that process you define some fixed places where you will be presenting images.<br />
<br />
b) you create a set of image <strong>renditions</strong> of different sizes which correspond to those fixed places.<br />
<br />
c) you write the templates to render your pages, and in these templates you make use of the renditions.<br />
<br />
d) then, any time you or any other editor assigns an image to a rendition, that image will be presented where defined in the template.<br />
<br />
The process and purpose of those images is different than the images you insert within the text. You can still insert any of the uploaded images to the article via the &quot;Insert Image&quot; plugin in the WYSIWYG editor.</p>
<h2>Displaying an article image</h2>
<p>Let's start with a simple example. You have an article with only one image, and you want to display the image when the article is requested.</p>
<p>You can point to an image in two ways, either:</p>
<pre><code>&lt;img src=&quot;{{ $gimme-&gt;article-&gt;image1-&gt;imageurl }}&quot; alt=&quot;{{ $gimme-&gt;article-&gt;image-&gt;caption }}&quot; /&gt;</code></pre>
<p>or:</p>
<pre><code>&lt;img src=&quot;{{ uri options=&quot;image 1&quot; }}&quot; alt=&quot;{{ $gimme-&gt;article-&gt;image-&gt;caption }}&quot; /&gt; </code></pre>
<p>The following code snippet does more, it:</p>
<ul>
<li>Gets the URL for an image attached to an article</li>
<li>Puts the image caption (the description) into the ALT tag</li>
<li>Puts the photo description into the title tag</li>
<li>Displays the photographer's name</li>
<li>Displays the image caption (the description)<br />
</li>
</ul>
<pre class="prettyprint linenums"><code>&lt;img src=&quot;{{ $gimme-&gt;article-&gt;image-&gt;imageurl }}&quot;
     alt=&quot;{{ $gimme-&gt;article-&gt;image-&gt;caption }}&quot;
   title=&quot;{{ $gimme-&gt;article-&gt;image-&gt;description }}&quot;  /&gt;&lt;br /&gt;
       by {{ $gimme-&gt;article-&gt;image-&gt;photographer }}&lt;br /&gt;
          {{ $gimme-&gt;article-&gt;image-&gt;description }}</code></pre>
<p>An example of what similar code looks like in the browser is below (taken from the &quot;The Journal&quot; template pack):</p>
<p><img src="static/image-scr01.png" /></p>
<p>You can even validate whether the article has an image or not. The value passed in parentheses correspond to the image number you assign to the image when attaching it to the article.<br />
</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;has_image(1) }}
    &lt;img src=&quot;{{ $gimme-&gt;article-&gt;image-&gt;imageurl }}&quot; /&gt;
{{ /if }}</code></pre>
<p>It's also possible to access the image directly by the index number. If an image with that given index does not exist, then an empty <em>image</em> object is returned, and nothing will be displayed. It is good practice to first validate whether the requested image exists or not, but you already know how to do that!<br />
</p>
<pre class="prettyprint"><code>&lt;img src=&quot;{{ $gimme-&gt;article-&gt;image5-&gt;imageurl }}&quot; /&gt;</code></pre>
<p>There are more image properties you can display; we've already used some like <em>imageurl</em>, <em>photographer</em> and <em>description</em>, but there'll be more in the following examples. You can read the entire list in the chapter Template Objects -&gt; Image of the Newscoop Template Reference.<br />
</p>
<h2>Listing all images attached to an article<br />
</h2>
<p>This is basically the same as we did before, but within a list of article images. Let's see some code:</p>
<pre class="prettyprint linenums"><code>{{ list_article_images }}
    &lt;li&gt;
        &lt;img src=&quot;{{ $gimme-&gt;article-&gt;image-&gt;imageurl }}&quot; /&gt;&lt;br /&gt;
        Caption: {{ $gimme-&gt;article-&gt;image-&gt;caption }}&lt;br /&gt;
        By: {{ $gimme-&gt;article-&gt;image-&gt;photographer }}
    &lt;/li&gt;
{{ /list_article_images }}</code></pre>
<p>There's no need to use image indexes, because the list provides iteration over all images attached to the article.</p>
<h2>Listing images from the media archive<br />
</h2>
<p>Now the fun begins :-)</p>
<p>You already know how to work with image objects and how to list images attached to articles; this is very useful and will allow you to use image content all over your site.</p>
<p>But in specific cases you'll probably want to display images not necessarily related to articles. Remember that Newscoop provides a Media Archive (read more about it in the <em>Newscoop 4 for Journalists and Editors</em> manual), and every image you attached to an article is stored there.</p>
<p>The Newscoop template language provides a function to build lists of images according to different criteria. Let's say you want to build a list of images from a specific photographer. This code snippet can:</p>
<ul>
<li>Get a list of images where the photographer name is John Doe</li>
<li>Order the images by the last update</li>
<li>Get the images themselves based on their URLs</li>
<li>Get the image captions (descriptions)<br />
</li>
</ul>
<pre class="prettyprint linenums"><code>{{ list_images photographer=&quot; John\ Doe&quot; order=&quot;byLastUpdate&quot; }}
    &lt;img src=&quot;{{ $gimme-&gt;image-&gt;imageurl }}&quot; /&gt;&lt;br /&gt;
    &lt;p&gt;{{ $gimme-&gt;image-&gt;description }}&lt;/p&gt;
{{ /list_images }}</code></pre>
<p>Now here's list of images where the string &quot;Prague&quot; is present:</p>
<pre class="prettyprint linenums"><code>{{ list_images caption_like=&quot;Prague&quot; order=&quot;byPhotographer&quot; }}
    &lt;img src=&quot;{{ $gimme-&gt;image-&gt;imageurl }}&quot; /&gt;&lt;br /&gt;
    &lt;p&gt;{{ $gimme-&gt;image-&gt;caption }}&lt;/p&gt;
{{ /list_images }}</code></pre>
<p>There are many other criteria you can use. A detailed list can be found in the Newscoop Template Reference in the <em>List Images</em> chapter.<br />
</p>
<h2>Thumbnails</h2>
<p>Newscoop automatically generates a 64-pixel-wide thumbnail for every image when the image file is uploaded into the Media Archive. Displaying a thumbnail is as easy as this:</p>
<pre class="prettyprint"><code>&lt;img src=&quot;{{ $gimme-&gt;image-&gt;thumbnailurl }} /&gt;</code></pre>
<h2>Author picture</h2>
<p>The <em>author</em> object has the property <em>picture</em>, which is an <em>image</em> object, so that you can use it exactly as an article image. There's more on this in the chapter <em>Managing multiple authors and articles</em> in this Cookbook.</p>
<h2>Scaling in percent and absolute size</h2>
<p>Images in Newscoop are only stored in two different sizes: the original size and the automatically generated thumbnail. Usually it is necessary to display those images in a different size than those two available, so Newscoop provides a simple way to do this on the fly:</p>
<pre class="prettyprint"><code>&lt;img src=&quot;{{ $gimme-&gt;image-&gt;imageurl }}&amp;ImageRatio=70&quot; /&gt; </code></pre>
<p>Here we just specified a ratio equal to 70, which means the image will be resized to 70 percent of its original size. You also have the option to provide an specific width or height value.</p>
<pre class="prettyprint"><code>&lt;img src=&quot;{{ $gimme-&gt;image-&gt;imageurl }}&amp;ImageWidth=350&amp;ImageHeight=310&quot; /&gt;</code></pre>
<p>Any image provided by <em>$gimme</em> can be scaled as shown above, including the thumbnail and author pictures. The logic of how Newscoop processes the values when both width and height are provided (and even the ratio) at the same time is explained, with more examples, in the wiki page: <a href="http://wiki.sourcefabric.org/x/c4EH" class="uri">http://wiki.sourcefabric.org/x/c4EH</a></p>
<p><span id="ch040_pagination-of-lists-and-long-articles.xhtml"></span></p>
<h1>Pagination of lists and long articles</h1>
<p>Pagination means dividing content into discrete pages, each displaying a page number. When a long list of search results is divided into more than one page, allowing the reader to proceed from page to page, that's pagination.</p>
<p>In this chapter, you will learn an advanced method for list pagination, and how to use subtitles to break up long articles.</p>
<h2>Pagination of a long article list</h2>
<p>Sometimes you might want to split a long list of articles into pages. You might do this on Section pages to show all articles in that particular section, without requiring the reader to scroll down too much.</p>
<p>To implement pagination we need to add an extra page parameter to a URL, something like the following example:</p>
<pre><code>http://site_name/language_code/issue_number/section_number/?page=number</code></pre>
<p>Then we can use the GET parameter to check the page we are on. We will use Smarty directly to check GLOBAL variables:</p>
<pre class="prettyprint"><code>{{ if $smarty.get.page }}{{ assign var=&quot;page&quot; value=`$smarty.get.page` }}{{ else }}{{ assign var=&quot;page&quot; value=&quot;1&quot; }}{{ /if }}</code></pre>
<p>To split a list of articles into pages we will use a column parameter, which will control how many articles should be shown on a page. In this case, row parameter will be the actual page.</p>
<pre><code>... {{ if $gimme-&gt;current_list-&gt;count &gt; 10 }} ...</code></pre>
<pre><code>... {{ if $gimme-&gt;current_list-&gt;row == $page }} ...</code></pre>
<p>In this example, we also need to add the ignore_issue parameter to get articles from all issues. The first part of the code, which will show the articles, would be:</p>
<pre class="prettyprint linenums"><code>{{ if $smarty.get.page }}
    {{ assign var=&quot;page&quot; value=`$smarty.get.page }}{{ else }}{{ assign var=&quot;page&quot; value=&quot;1&quot; }}{{ /if }}
    {{ list_articles columns=&quot;10&quot; ignore_issue=&quot;true&quot; }}
    {{ if $gimme-&gt;current_list-&gt;row == $page }}
        &lt;div class=&quot;list-articles&quot;&gt;&lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;{{ $gimme-&gt;article-&gt;intro }}&lt;/div&gt;
    {{ /if }}
    {{ /list_articles }}
    ...</code></pre>
<p>In the second part of the code we will show page numbers, and add the page parameter to links. To do this, we will need to list the articles once again:</p>
<pre class="prettyprint linenums"><code>{{ list_articles columns=&quot;10&quot; ignore_issue=&quot;true&quot; }}
{{ if $gimme-&gt;current_list-&gt;count &gt; 10 }}
    {{ if $gimme-&gt;current_list-&gt;at_beginning }}
        &lt;div class=&quot;list-page-numbers&quot;&gt;Page:
    {{ /if }}
    {{ if $gimme-&gt;current_list-&gt;column == 1 }}
        {{ if $gimme-&gt;current_list-&gt;row == $page }}
            &lt;span&gt;{{ $gimme-&gt;current_list-&gt;row }}&lt;/span&gt;
        {{ else }}
            &lt;a href=&quot;{{ uri options=&quot;article&quot; }}?page={{ $gimme-&gt;current_list-&gt;row }}&quot;&gt;{{ $gimme-&gt;current_list-&gt;row }}&lt;/a&gt;
        {{ /if }}
    {{ /if }}
    {{ if $gimme-&gt;current_list-&gt;at_end }}
        &lt;/div&gt;
    {{ /if }}
{{ /if }}
{{ /list_articles }}</code></pre>
<p>You will now have a list of articles and a list of page numbers, as shown in the screenshot below. You are free to add additional styles and controls to make your list shine.</p>
<p><img src="static/SCN4_1.PNG" /><br />
</p>
<h2>Subtitles inside long Article Fields</h2>
<p>You can include subtitles (also known as subheads) in longer articles, to break the article into pages. The journalist uses the WYSIWYG editor, marks the subtitle in the text and selects &quot;campsite_subhead&quot; from the pulldown menu under &quot;styles&quot;. A simple list of all subtitles inside the article can be displayed on the article page like this:</p>
<pre class="prettyprint linenums"><code>&lt;ul&gt;
{{ list_subtitles field_name=&quot;full_text&quot; }}
    &lt;li&gt;{{ $gimme-&gt;subtitle-&gt;name }}&lt;/li&gt;
{{ /list_subtitles }}
&lt;/ul&gt;</code></pre>
<p>Note that inside list_subtitles you need to specify the article field which you are working with, in this case the field full_text. The subtitles listed will all be from this particular article field, rather than any other field that may contain subtitles.</p>
<p>Adding a simple &quot;previous&quot; and &quot;next&quot; navigation from article subtitle to article subtitle can be done like this:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;full_text-&gt;has_previous_subtitles }}
    &lt;a href=&quot;{{ uri options=&quot;previous_subtitle full_text&quot; }}&quot;&gt;Previous&lt;/a&gt;
{{ else }}
    Previous
{{ /if }}
|
{{ if $gimme-&gt;article-&gt;full_text-&gt;has_next_subtitles }}
    &lt;a href=&quot;{{ uri options=&quot;next_subtitle full_text&quot; }}&quot;&gt;Next&lt;/a&gt;
{{ else }}
    Next
{{ /if }}</code></pre>
<p>This navigation will display active links to &quot;Previous&quot; or &quot;Next&quot; only if there is a previous or next item in the list. Otherwise, the words Previous and Next are not clickable, and are just displayed for design reasons, so the eye does not need to jump back and forth.</p>
<p>Once you are using subtitles in an article with pagination, the content will no longer be displayed in a single page format. In order to display the entire article in a single page (e.g. for printing) you can use a link with options like this:</p>
<pre class="prettyprint"><code>&lt;a href=&quot;{{ uri options=&quot;all_subtitles full_text&quot; }}&quot;&gt;View entire article&lt;/a&gt;</code></pre>
<p><span id="ch041_audio-player-for-attached-mp3-files.xhtml"></span></p>
<h1>Audio player for attached MP3 files</h1>
<p>Newscoop has an easy mechanism for attaching files to articles. In the Article Edit screen, on the right, you can attach files either from the existing file archive or upload new files. In this example we will embed an MP3 player in the page, playing audio files which have been attached to the article.<br />
</p>
<p>We offer two different examples of using an embedded Flash player. The first example embeds a player at the end of an article, like this:</p>
<p><img src="static/intex_mp3_attachment.png" /></p>
<p><em>Audio player on intex-press.by</em></p>
<p>The player we're using in this example needs to be placed in this folder:</p>
<pre><code>/templates/_swf/player_mp3_maxi.swf</code></pre>
<p>Any other player and any other folder location is possible. You only need to change the path in the code accordingly.</p>
<p>This code snippet will:</p>
<ul>
<li>Check to see if the article has any attachments; if it does, it will list them</li>
<li>Check to see if the attachment has an extension of &quot;mp3&quot;<br />
</li>
<li>If it is mp3, it will:</li>
<li><ul>
<li>Display the attachment's file description</li>
<li>Call the Flash player and set its values</li>
<li>Give the Flash player the URI for the article attachment</li>
<li>Create a download link for the article attachment with its URI, file name and size<br />
</li>
</ul></li>
</ul>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;has_attachments }}
{{ list_article_attachments }}
{{ if $gimme-&gt;attachment-&gt;extension == &quot;mp3&quot; }}
    {{ $gimme-&gt;attachment-&gt;description }}&lt;br /&gt;
    &lt;object height=&quot;20&quot; width=&quot;200&quot; data=&quot;/templates/_swf/player_mp3_maxi.swf&quot; type=&quot;application/x-shockwave-flash&quot; align=&quot;top&quot;&gt;
        &lt;param value=&quot;/templates/_swf/player_mp3_maxi.swf&quot; name=&quot;movie&quot; /&gt;
        &lt;param name=&quot;wmode&quot; value=&quot;opaque&quot; /&gt;
        &lt;param value=&quot;mp3={{ uri options=&quot;articleattachment&quot; }}&amp;amp;showstop=1&amp;amp;showvolume=1&amp;amp;buttonwidth=25&amp;amp;sliderwidth=15&amp;amp;bgcolor1=5EA65E&amp;amp;bgcolor2=365E36&quot; name=&quot;FlashVars&quot; /&gt;
    &lt;/object&gt;&lt;br /&gt;
    &lt;a href=&quot;{{ uri options=&quot;articleattachment&quot; }}&quot; /&gt;{{ $gimme-&gt;attachment-&gt;file_name }}, {{ $gimme-&gt;attachment-&gt;size_kb }}Kb&lt;/a&gt;
{{/if}}
{{/list_article_attachments}}
{{/if}}</code></pre>
<h2>Using multiple players<br />
</h2>
<p>The second example comes from Fluter.de, and involves keywords and multiple players. Here is a screenshot of how the players appear on the page:</p>
<p><img src="static/fluter_mp3_attachment.png" /></p>
<p><em>Audio players on fluter.de</em></p>
<p>This example does the following:</p>
<ul>
<li>Uses an IF statement to see if the article has the keyword of 'mp3podcast1'</li>
<li>If it does, Newscoop calls a Flash player</li>
<li>Newscoop passes the Flash player the URL of the MP3 file</li>
</ul>
<p>The audio files on Fluter.de are not article attachments. In the editorial workflow of that publication, the audio files are created separately and uploaded to a special location on the server. The code example below will point to the location:</p>
<p>http://www.fluter.de/medien/podcast_audio/</p>
<p>There, the audio files are sorted in subfolders by issue number, which we can retrieve using {{ $gimme-&gt;issue-&gt;number }}. Each file name contains a combination of issue number and article number, and finishes with the track number, so we can retrieve a specific file using:</p>
<pre><code>podcast_mp3_{{ $gimme-&gt;issue-&gt;number }}_{{ $gimme-&gt;article-&gt;number }}_f1.mp3</code></pre>
<p>The publication editor adds a keyword to the article containing the number of the audio files; mp3podcast1 means one file, mp3podcast2 two files, and so on. Depending on this keyword, the template will create one or more players. Here is the code for one player:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;has_keyword(mp3podcast1) }}
&lt;object type=&quot;application/x-shockwave-flash&quot; data=&quot;/medien/player/player.swf&quot; width=&quot;290&quot; height=&quot;24&quot; id=&quot;audioplayer1&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.fluter.de/audio-player/player.swf&quot; /&gt;
    &lt;param name=&quot;FlashVars&quot; value=&quot;playerID=1&amp;amp;bg=0x999999&amp;amp;leftbg=0x74787A&amp;amp;lefticon=0xffffff&amp;amp;rightbg=0x0090f0&amp;amp;rightbghover=0x74787A&amp;amp;righticon=0x000000&amp;amp;righticonhover=0x0090f0&amp;amp;text=0xffffff&amp;amp;slider=0x0090f0&amp;amp;track=0xFFFFFF&amp;amp;border=0xffffff&amp;amp;loader=0xffffff&amp;amp;soundFile=http%3A%2F%2Fwww.fluter.de%2Fmedien%2Fpodcast_audio%2F{{ $gimme-&gt;issue-&gt;number }}%2Fpodcast_mp3_{{ $gimme-&gt;issue-&gt;number }}_{{ $gimme-&gt;article-&gt;number }}_f1.mp3&quot; /&gt;
    &lt;param name=&quot;quality&quot; value=&quot;high&quot; /&gt;
    &lt;param name=&quot;menu&quot; value=&quot;false&quot; /&gt;
    &lt;param name=&quot;bgcolor&quot; value=&quot;#ffffff&quot; /&gt;
&lt;/object&gt;
{{ /if }}</code></pre>
<p>This approach can be used for any file attachments; you can apply similar methods for PDF attachments or movies, for example. See the section <em>Article object and attachment, comment, location</em> in the Template Reference for more information on working with article attachments.</p>
<p><span id="ch042_rss-sitemap-kml-and-xml.xhtml"></span></p>
<h1>RSS, sitemap, KML and XML</h1>
<p>The Newscoop template engine allows you deliver many kinds of structured content, including HTML, XML, CSV, vCard and more. In this chapter we will explain a few of these formats and how they are created. The process is always the same: develop your business logic, and then wrap the presentation logic around it.  </p>
<h2>RSS Feed </h2>
<p>We will start with producing an RSS feed for syndication of the latest 15 articles from the current section in the publication. First, let's look at the basic structure of an RSS document. The channel tag contains three elements; channel metadata, an image block and an items list:</p>
<pre class="prettyprint linenums"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;rss version=&quot;2.0&quot; xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot; xmlns:media=&quot;http://search.yahoo.com/mrss/&quot;&gt;
    &lt;channel&gt;
        [channel metadata]
        [image block]
        [items list]
    &lt;/channel&gt;
&lt;/rss&gt;</code></pre>
<p><strong>Channel metadata</strong> is a required element which can include the channel's name or title, description, language, URL and copyright information.</p>
<pre class="prettyprint linenums"><code>&lt;title&gt;{{ $gimme-&gt;publication-&gt;name }}&lt;/title&gt;
&lt;link&gt;http://{{ $gimme-&gt;publication-&gt;site }}&lt;/link&gt;
&lt;description&gt;{{ $siteinfo.description }}&lt;/description&gt;
&lt;language&gt;{{ $gimme-&gt;language-&gt;code }}&lt;/language&gt;
&lt;copyright&gt;Copyright {{ $smarty.now|date_format:&quot;%Y&quot; }, {{ $gimme-&gt;publication-&gt;name }}&lt;/copyright&gt;
&lt;lastBuildDate&gt;{{ $smarty.now|date_format:&quot;%a, %d %b %Y %H:%M:%S&quot; }} +0100&lt;/lastBuildDate&gt;
&lt;generator&gt;Newscoop&lt;/generator&gt;</code></pre>
<p>The Newscoop snippet above grabs the name and site attributes of the publication, as well as the language code. Also, we make use of Smarty with some special modifiers to display the current date and time in two different formats (for more information on this, please read the Smarty manual).</p>
<p><strong>Image block</strong> - the image's URL, title, link, width, and height tags allow RSS viewers to translate the file into HTML. This block is very straight forward, using the site and name attributes of the Newscoop publication.</p>
<pre class="prettyprint linenums"><code>&lt;image&gt;
    &lt;url&gt;http://{{ $gimme-&gt;publication-&gt;site }}/templates/classic/img/logo-rss.jpg&lt;/url&gt;
    &lt;title&gt;{{ $gimme-&gt;publication-&gt;name }}&lt;/title&gt;
    &lt;link&gt;http://{{ $gimme-&gt;publication-&gt;site }}&lt;/link&gt;
    &lt;width&gt;144&lt;/width&gt;
    &lt;height&gt;19&lt;/height&gt;
&lt;/image&gt;</code></pre>
<p><strong>Items list</strong> - this is the most important piece of the RSS document, as the actual feeds are generated here. For this purpose we will use the <em>list_articles</em> statement with $gimme to request the latest 15 published articles. The list is built using the current language, publication, issue and section from the context.</p>
<pre class="prettyprint linenums"><code>{{ list_articles length=&quot;15&quot; order=&quot;bypublishdate desc&quot; }}
    [list of items]
{{ /list_articles }}</code></pre>
<p>Now we need to define the list of items.</p>
<pre class="prettyprint linenums"><code>&lt;item&gt;
 &lt;title&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/title&gt;
  &lt;link&gt;{{ url options=&quot;article&quot; }}&lt;/link&gt;
   &lt;description&gt;
   {{ $gimme-&gt;article-&gt;intro|strip_tags:false|strip|escape:&#39;html&#39;:&#39;utf-8&#39; }}
   &lt;/description&gt;
    &lt;category domain=&quot;{{ url options=&quot;section&quot; }}&quot;&gt;
    {{ $gimme-&gt;section-&gt;name }}
    &lt;/category&gt;
   {{ if $gimme-&gt;article-&gt;author-&gt;name }}
   &lt;atom:author&gt;
   &lt;atom:name&gt;{{ $gimme-&gt;article-&gt;author-&gt;name }}&lt;/atom:name&gt;
   &lt;/atom:author&gt;
   {{ /if }}
  &lt;pubDate&gt;
  {{ $gimme-&gt;article-&gt;publish_date|date_format:&quot;%a, %d %b %Y %H:%M:%S&quot; }} +0100
  &lt;/pubDate&gt;
 &lt;guid isPermaLink=&quot;true&quot;&gt;{{ url options=&quot;article&quot; }}&lt;/guid&gt;
&lt;/item&gt;</code></pre>
<p>Let's explain where we get the data from for each item tag:</p>
<p>title: The article name.</p>
<p>link: The article URL from Newscoop.</p>
<p>description: The text of the article introduction, which is a custom field for the particular article type used here. In addition, we use some Smarty modifiers in order to clean up the text, making sure it will be displayed properly.</p>
<p>category: We use the section name here.</p>
<p>atom author: If the article has an author defined, then we display their full name.</p>
<p>pubDate: The publication date of the article, with some special formatting. Please read up on the Smarty <em>date_format</em> modifier if you aren't sure about this.</p>
<p>guid: The article URL as global unique identifier for the item.</p>
<p>Finally, this is how the whole template file should look:</p>
<pre class="prettyprint linenums"><code>&lt;rss version=&quot;2.0&quot; xmlns:atom=&quot;http://www.w3.org/2005/Atom&quot; xmlns:media=&quot;http://search.yahoo.com/mrss/&quot;&gt;
    &lt;channel&gt;
        &lt;title&gt;{{ $gimme-&gt;publication-&gt;name }}&lt;/title&gt;
        &lt;link&gt;http://{{ $gimme-&gt;publication-&gt;site }}&lt;/link&gt;
        &lt;description&gt;{{ $siteinfo.description }}&lt;/description&gt;
        &lt;language&gt;{{ $gimme-&gt;language-&gt;code }}&lt;/language&gt;
        &lt;copyright&gt;Copyright {{ $smarty.now|date_format:&quot;%Y&quot; }}, {{ $gimme-&gt;publication-&gt;name }}&lt;/copyright&gt;
        &lt;lastBuildDate&gt;{{ $smarty.now|date_format:&quot;%a, %d %b %Y %H:%M:%S&quot; }} +0100&lt;/lastBuildDate&gt;
        &lt;generator&gt;Newscoop&lt;/generator&gt;
        &lt;image&gt;
            &lt;url&gt;http://{{ $gimme-&gt;publication-&gt;site }}/templates/classic/img/logo-rss.jpg&lt;/url&gt;
            &lt;title&gt;{{ $gimme-&gt;publication-&gt;name }}&lt;/title&gt;
            &lt;link&gt;http://{{ $gimme-&gt;publication-&gt;site }}&lt;/link&gt;
            &lt;width&gt;144&lt;/width&gt;
            &lt;height&gt;19&lt;/height&gt;
        &lt;/image&gt;
        &lt;atom:link href=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/feed/index-en.rss&quot; rel=&quot;self&quot; type=&quot;application/rss+xml&quot; /&gt;
        {{ list_articles length=&quot;20&quot; order=&quot;bypublishdate desc&quot; }}
        &lt;item&gt;
            &lt;title&gt;{{ $gimme-&gt;article-&gt;name|html_entity_decode|regex_replace:&#39;/&amp;(.*?)quo;/&#39;:&#39;&amp;quot;&#39; }}&lt;/title&gt;
            &lt;link&gt;http://{{ $gimme-&gt;publication-&gt;site }}/ru/{{ $gimme-&gt;issue-&gt;number }}/{{ $gimme-&gt;section-&gt;url_name }}/{{ $gimme-&gt;article-&gt;number }}&lt;/link&gt;
            &lt;description&gt;
                {{ $gimme-&gt;article-&gt;intro|strip_tags:false|strip|escape:&#39;html&#39;:&#39;utf-8&#39; }}
            &lt;/description&gt;
            &lt;category domain=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/{{ $gimme-&gt;language-&gt;code }}/{{ $gimme-&gt;issue-&gt;number }}/{{ $gimme-&gt;section-&gt;url_name }}&quot;&gt;{{ $gimme-&gt;section-&gt;name }}&lt;/category&gt;
            {{ if $gimme-&gt;article-&gt;author-&gt;name }}
            &lt;atom:author&gt;&lt;atom:name&gt;{{ $gimme-&gt;article-&gt;author-&gt;name }}&lt;/atom:name&gt;&lt;/atom:author&gt;
            {{/if}}
            &lt;pubDate&gt;{{ $gimme-&gt;article-&gt;publish_date|date_format:&quot;%a, %d %b %Y %H:%M:%S&quot; }} +0100&lt;/pubDate&gt;
            &lt;guid isPermaLink=&quot;true&quot;&gt;http://{{ $gimme-&gt;publication-&gt;site }}/{{ $gimme-&gt;language-&gt;code }}/{{ $gimme-&gt;issue-&gt;number }}/{{ $gimme-&gt;section-&gt;url_name }}/{{ $gimme-&gt;article-&gt;number }}&lt;/guid&gt;
        &lt;/item&gt;
    {{/list_articles}}
    &lt;/channel&gt;
&lt;/rss&gt;</code></pre>
<h3>How to get it working</h3>
<p>There are different ways to achieve this, however what we recommend is to use Google FeedBurner as it provides significant benefits like statistics, social sharing, among others. Read more about FeedBurner at <a href="http://feedburner.google.com/" class="uri" title="FeedBurner">http://feedburner.google.com/</a>.</p>
<p>Now that you already have your RSS template file you need to configure it in FeedBurner. You can do this easily by inputting the URL to the RSS in your site. Usually the URL looks like this, as it is a direct reference to the RSS template file:</p>
<p>http://your.site.url/?tpl=123</p>
<p>FeedBurner will give you back a new &quot;burned&quot; URL that looks something like this:</p>
<p>http://feeds.feedburner.com/YourFeedName</p>
<p>Where <em>YourFeedName</em> is the name you input when burning your RSS feed in FeedBurner. Now all what you need to do is to include the following line in the header template of your site.</p>
<pre class="prettyprint"><code>&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;Newscoop News&quot; href=&quot;http://feeds.feedburner.com/YourFeedName&quot; /&gt;</code></pre>
<h2>Google Sitemaps</h2>
<p>The Sitemaps protocol, introduced by Google, allows you to inform search engines about links on your site that are available for crawling. A Sitemap is a file in a specific XML format that lists the URLs of your site, including metadata about each URL carrying data like last updated, the relevance of the resource compared to other URLs in the site, and so on. This allows search engines to index the site in a more optimal way.</p>
<p>How to build a site map depends on the content structure you have designed for your specific site, but whatever it is, $gimme will allow you to generate it.</p>
<h3>Goal / Task</h3>
<p>To display the Site Map for our particular use case, listing: All articles regardless of language, issue and section, of type news, All articles regardless of language, issue and section, of type show, All subtopics in English and French languages with parent topic equal to Countries, All sections from the current issue in English and French languages.</p>
<h3>Implementation</h3>
<p>All articles regardless of language, issue and section, of type news.</p>
<pre class="prettyprint linenums"><code>{{ list_articles ignore_language=&quot;true&quot; ignore_issue=&quot;true&quot; ignore_section=&quot;true&quot; order=&quot;bypublishdate desc&quot; constraints=&quot;type is news&quot; }}
&lt;url&gt;
    &lt;loc&gt;http://wadr.org{{ uri options=&quot;article&quot; }}&lt;/loc&gt;
    &lt;lastmod&gt;{{ $gimme-&gt;article-&gt;publish_date|camp_date_format:&quot;%Y-%m-%d&quot; }}&lt;/lastmod&gt;
    &lt;changefreq&gt;daily&lt;/changefreq&gt;
    &lt;priority&gt;0.6&lt;/priority&gt;
&lt;/url&gt;
{{ /list_articles }}</code></pre>
<p>Notice the use of ignore_language, ignore_issue and ignore_section. All these are set to <em>true</em> so that those values from the context are ignored when building the list. We use the same approach for the next list.</p>
<p>All articles regardless of language, issue and section, of type show.</p>
<pre class="prettyprint linenums"><code>{{ list_articles ignore_issue=&quot;true&quot; ignore_section=&quot;true&quot; ignore_language=&quot;true&quot; order=&quot;bypublishdate desc&quot; constraints=&quot;type is show&quot; }}
&lt;url&gt;
    &lt;loc&gt;http://wadr.org{{ uri options=&quot;article&quot; }}&lt;/loc&gt;
    &lt;lastmod&gt;{{ $gimme-&gt;article-&gt;publish_date|camp_date_format:&quot;%Y-%m-%d&quot; }}&lt;/lastmod&gt;
    &lt;changefreq&gt;daily&lt;/changefreq&gt;
    &lt;priority&gt;0.8&lt;/priority&gt;
&lt;/url&gt;
{{ /list_articles }}</code></pre>
<p>This list is similar to the first one. The only difference is we are requesting articles of a different type: show this time.</p>
<p>All subtopics in the English language with parent topic equal to Countries.</p>
<pre class="prettyprint linenums"><code>{{ set_language name=&quot;English&quot; }}
{{ set_topic name=&quot;Countries:en&quot; }}
{{ list_subtopics }}
&lt;url&gt;
    &lt;loc&gt;http://wadr.org/{{ $gimme-&gt;language-&gt;code }}/?tpid={{ $gimme-&gt;topic-&gt;identifier }}&amp;amp;tpl=1442/&lt;/loc&gt;
    &lt;changefreq&gt;daily&lt;/changefreq&gt;
    &lt;priority&gt;0.4&lt;/priority&gt;
&lt;/url&gt;
{{ /list_subtopics }}</code></pre>
<p>All subtopics in the French language with parent topic equal to Countries.</p>
<pre class="prettyprint linenums"><code>{{ set_language name=&quot;French&quot; }}
{{ set_topic name=&quot;Countries:en&quot; }}
{{ list_subtopics }}
&lt;url&gt;
    &lt;loc&gt;http://wadr.org/{{ $gimme-&gt;language-&gt;code }}/?tpid={{ $gimme-&gt;topic-&gt;identifier }}&amp;amp;tpl=1442/&lt;/loc&gt;
    &lt;changefreq&gt;daily&lt;/changefreq&gt;
    &lt;priority&gt;0.4&lt;/priority&gt;
&lt;/url&gt;
{{ /list_subtopics }}</code></pre>
<p>All sections from the current issue in the English language.</p>
<pre class="prettyprint linenums"><code>{{ set_current_issue }}
{{ set_language name=&quot;English&quot; }}
{{ list_sections }}
&lt;url&gt;
    &lt;loc&gt;http://wadr.org/{{ $gimme-&gt;language-&gt;code }}/{{ $gimme-&gt;issue-&gt;url_name }}/{{ $gimme-&gt;section-&gt;url_name }}/&lt;/loc&gt;
    &lt;changefreq&gt;weekly&lt;/changefreq&gt;
    &lt;priority&gt;0.3&lt;/priority&gt;
&lt;/url&gt;
{{ /list_sections }}</code></pre>
<p>All sections from the current issue in the French language.</p>
<pre class="prettyprint linenums"><code>{{ set_language name=&quot;French&quot; }}
{{ list_sections }}
&lt;url&gt;
    &lt;loc&gt;http://wadr.org/{{ $gimme-&gt;language-&gt;code }}/{{ $gimme-&gt;issue-&gt;url_name }}/{{ $gimme-&gt;section-&gt;url_name }}/&lt;/loc&gt;
    &lt;changefreq&gt;weekly&lt;/changefreq&gt;
    &lt;priority&gt;0.3&lt;/priority&gt;
&lt;/url&gt;
{{ /list_sections }}</code></pre>
<p>This is how the full Sitemap file should look:</p>
<pre class="prettyprint linenums"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;
{{ list_articles ignore_language=&quot;true&quot; ignore_issue=&quot;true&quot; ignore_section=&quot;true&quot; order=&quot;bypublishdate desc&quot; constraints=&quot;type is news&quot; }}
    &lt;url&gt;
        &lt;loc&gt;http://wadr.org{{ uri options=&quot;article&quot; }}&lt;/loc&gt;
        &lt;lastmod&gt;{{ $gimme-&gt;article-&gt;publish_date|camp_date_format:&quot;%Y-%m-%d&quot; }}&lt;/lastmod&gt;
        &lt;changefreq&gt;daily&lt;/changefreq&gt;
        &lt;priority&gt;0.6&lt;/priority&gt;
    &lt;/url&gt;
{{ /list_articles }}
{{ list_articles ignore_issue=&quot;true&quot; ignore_section=&quot;true&quot; ignore_language=&quot;true&quot; order=&quot;bypublishdate desc&quot; constraints=&quot;type is show&quot; }}
    &lt;url&gt;
        &lt;loc&gt;http://wadr.org{{ uri options=&quot;article&quot; }}&lt;/loc&gt;
        &lt;lastmod&gt;{{ $gimme-&gt;article-&gt;publish_date|camp_date_format:&quot;%Y-%m-%d&quot; }}&lt;/lastmod&gt;
        &lt;changefreq&gt;daily&lt;/changefreq&gt;
        &lt;priority&gt;0.8&lt;/priority&gt;
    &lt;/url&gt;
{{ /list_articles }}
{{ set_language name=&quot;English&quot; }}
{{ set_topic name=&quot;Countries:en&quot; }}
{{ list_subtopics }}
    &lt;url&gt;
        &lt;loc&gt;http://wadr.org/{{ $gimme-&gt;language-&gt;code }}/?tpid={{ $gimme-&gt;topic-&gt;identifier }}&amp;amp;tpl=1442/&lt;/loc&gt;
        &lt;changefreq&gt;daily&lt;/changefreq&gt;
        &lt;priority&gt;0.4&lt;/priority&gt;
    &lt;/url&gt;
{{ /list_subtopics }}
{{ set_language name=&quot;French&quot; }}
{{ set_topic name=&quot;Countries:en&quot; }}
{{ list_subtopics }}
    &lt;url&gt;
        &lt;loc&gt;http://wadr.org/{{ $gimme-&gt;language-&gt;code }}/?tpid={{ $gimme-&gt;topic-&gt;identifier }}&amp;amp;tpl=1442/&lt;/loc&gt;
        &lt;changefreq&gt;daily&lt;/changefreq&gt;
        &lt;priority&gt;0.4&lt;/priority&gt;
    &lt;/url&gt;
{{ /list_subtopics }}
{{ set_current_issue }}
{{ set_language name=&quot;English&quot; }}
{{ list_sections }}
    &lt;url&gt;
        &lt;loc&gt;http://wadr.org/{{ $gimme-&gt;language-&gt;code }}/{{ $gimme-&gt;issue-&gt;url_name }}/{{ $gimme-&gt;section-&gt;url_name }}/&lt;/loc&gt;
        &lt;changefreq&gt;weekly&lt;/changefreq&gt;
        &lt;priority&gt;0.3&lt;/priority&gt;
    &lt;/url&gt;
{{ /list_sections }}
{{ set_language name=&quot;French&quot; }}
{{ list_sections }}
    &lt;url&gt;
        &lt;loc&gt;http://wadr.org/{{ $gimme-&gt;language-&gt;code }}/{{ $gimme-&gt;issue-&gt;url_name }}/{{ $gimme-&gt;section-&gt;url_name }}/&lt;/loc&gt;
        &lt;changefreq&gt;weekly&lt;/changefreq&gt;
        &lt;priority&gt;0.3&lt;/priority&gt;
    &lt;/url&gt;
{{ /list_sections }}
&lt;/urlset&gt;</code></pre>
<h3>How to get it working</h3>
<p>There are different ways to inform the search engines to crawl your site using the XML Sitemap we just created. However, this is out of the scope of this guide as it has nothing to do with Newscoop templating.</p>
<p>You can find detailed information on how to do it in these following links:</p>
<p><a href="http://www.sitemaps.org/%20" title="Sitemaps">http://www.sitemaps.org/</a></p>
<p><a href="https://www.google.com/support/webmasters/bin/answer.py?hl=en&amp;answer=78808&amp;ctx=cb" class="uri" title="Google Sitemaps">https://www.google.com/support/webmasters/bin/answer.py?hl=en&amp;answer=78808&amp;ctx=cb</a><br />
</p>
<h2>KML Documents for exporting map locations<br />
</h2>
<p>KML is like an RSS feed for geo-location data. It is a XML specific notation for expressing geographic annotation and visualization within maps, Earth browsers and other applications.</p>
<p>One of the sample Template Packages on the Sourcefabric website is the &quot;Ushahidi Cooker&quot; which is dedicated to mapping content and generating KML feeds. You will come across KML feeds when you export from mapping services or - in the case of Ushahidi - when you want to import additional information into a map. Newscoop handles maps, and using the following code it can deliver valid KML feeds.</p>
<h3>Goal / Task</h3>
<p>To generate a simple KML file containing the list of locations for the current article.</p>
<h3>Implementation</h3>
<p>The structure of a basic KML file breaks down as follows:</p>
<ul>
<li>An XML header and a KML namespace declaration. You will see these two lines in the full version of the KML file at the end of this section.</li>
<li>A Placemark object that contains the following elements: A name used as the label for the Placemark, a description that appears in the &quot;balloon&quot; attached to the Placemark, and a Point that specifies the position of the Placemark on the Earth's surface.</li>
</ul>
<p>KML is much more complex than this, and allows you to provide more information about the locations in your map and style those as much as you want, but that is KML-specific and out of the scope of this document. What we want to show you here is how you can use $gimme to pull the data and display the locations, which ultimately is what matters the most.</p>
<p>First you need to provide basic info about the article. In this case we use the <em>article name</em> and <em>section name</em> as the name for our KML document, and the custom field <em>intro</em> as the description.</p>
<pre class="prettyprint linenums"><code>&lt;kml xmlns=&quot;http://www.opengis.net/kml/2.2&quot;&gt;
&lt;Document&gt;
  &lt;name&gt;{{ $gimme-&gt;article-&gt;name }} in {{ $gimme-&gt;section-&gt;name }}&lt;/name&gt;
  &lt;description&gt;&lt;![CDATA[{{ $gimme-&gt;article-&gt;intro }}]]&gt;&lt;/description&gt;</code></pre>
<p>Next, we provide some custom styling for the marker icons. For this we need to generate a unique id per location, so we use the article number plus the incremental index in the list. We also validate inside the list if the location is enabled or not.<br />
</p>
<pre class="prettyprint linenums"><code>{{ list_article_locations }}
    {{ if $gimme-&gt;location-&gt;enabled }}
    &lt;Style id=&quot;style{{ $gimme-&gt;article-&gt;number }}-{{ $gimme-&gt;current_list-&gt;index }}&quot;&gt;
        &lt;IconStyle&gt;
            &lt;Icon&gt;
                &lt;href&gt;http://www.sourcefabric.org/geolocation/markers/marker-gold.png&lt;/href&gt;
            &lt;/Icon&gt;
        &lt;/IconStyle&gt;
    &lt;/Style&gt;
    {{ /if }}
{{ /list_article_locations }}</code></pre>
<p>Now the most important section, the list of locations to be displayed on the map. We use <em>list_article_locations</em>, and after making sure the location is enabled we build the Placemark block. For the Placemark name we are using the location name together with the article name. Then we use <em>styleUrl</em> to reference the custom style defined in the block above.</p>
<p>The last sub-block is Point, which is where we actually specify the location positioning on the map. Notice the use of $gimme-&gt;location-&gt;longitude and $gimme-&gt;location-&gt;latitude, it could not be more intuitive :-) The value 0.000000 after latitude corresponds to altitude, which is not relevant for this example but must be there as per KML specifications.<br />
</p>
<pre class="prettyprint linenums"><code>{{ list_article_locations }}
    {{ if $gimme-&gt;location-&gt;enabled }}
    &lt;Placemark&gt;
        &lt;name&gt;{{ $gimme-&gt;location-&gt;name }} @ {{ $gimme-&gt;article-&gt;name }}&lt;/name&gt;
        &lt;description&gt;&lt;/description&gt;
        &lt;styleUrl&gt;#style{{ $gimme-&gt;article-&gt;number }}-{{ $gimme-&gt;current_list-&gt;index }}&lt;/styleUrl&gt;
        &lt;Point&gt;
            &lt;coordinates&gt;{{ $gimme-&gt;location-&gt;longitude }},{{ $gimme-&gt;location-&gt;latitude }},0.000000&lt;/coordinates&gt;
        &lt;/Point&gt;
    &lt;/Placemark&gt;
    {{ /if }}
{{ /list_article_locations }}</code></pre>
<p>This is how the full KML file should look:</p>
<pre class="prettyprint linenums"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;kml xmlns=&quot;http://www.opengis.net/kml/2.2&quot;&gt;
&lt;Document&gt;
    &lt;name&gt;{{ $gimme-&gt;section-&gt;name }} in {{ $gimme-&gt;article-&gt;name }}&lt;/name&gt;
    &lt;description&gt;&lt;![CDATA[{{ $gimme-&gt;article-&gt;description }}]]&gt;&lt;/description&gt;
    {{ list_article_locations }}
        {{ if $gimme-&gt;location-&gt;enabled }}
        &lt;Style id=&quot;style{{ $gimme-&gt;article-&gt;number }}-{{ $gimme-&gt;current_list-&gt;index }}&quot;&gt;
            &lt;IconStyle&gt;
                &lt;Icon&gt;
                    &lt;href&gt;http://www.sourcefabric.org/geolocation/markers/marker-gold.png&lt;/href&gt;
                &lt;/Icon&gt;
            &lt;/IconStyle&gt;
        &lt;/Style&gt;
        {{ /if }}
    {{ /list_article_locations }}

    {{ list_article_locations }}
        {{ if $gimme-&gt;location-&gt;enabled }}
        &lt;Placemark&gt;
            &lt;name&gt;{{ $gimme-&gt;location-&gt;name }} @ {{ $gimme-&gt;article-&gt;name }}&lt;/name&gt;
            &lt;description&gt;&lt;/description&gt;
            &lt;styleUrl&gt;#style{{ $gimme-&gt;article-&gt;number }}-{{ $gimme-&gt;current_list-&gt;index }}&lt;/styleUrl&gt;
            &lt;Point&gt;
                &lt;coordinates&gt;{{ $gimme-&gt;location-&gt;longitude }},{{ $gimme-&gt;location-&gt;latitude }},0.000000&lt;/coordinates&gt;
            &lt;/Point&gt;
        &lt;/Placemark&gt;
        {{ /if }}
    {{ /list_article_locations }}
&lt;/Document&gt;
&lt;/kml&gt;</code></pre>
<h3>Put KML feeds into action</h3>
<p>KML files are meant to be used in browsers and any other kind of application supporting this format, like for example Google Earth, Google Maps, or Ushahidi Layers. So, once Newscoop generates this file for you, you just need to use it in any of these tools, depending on your needs.</p>
<p>You can try this with the Template Package &quot;Ushahidi Cooker&quot;. You will also find a video tutorial about the &quot;Ushahidi Cooker&quot; here:</p>
<p><a href="http://www.sourcefabric.org/en/products/newscoop_templates/%20" title="Sample templates">http://www.sourcefabric.org/en/products/newscoop_templates/</a></p>
<p><span id="ch043_search-engine-optimisation-seo.xhtml"></span></p>
<h1>Search engine optimisation (SEO)</h1>
<p>Search Engine Optimisation is about improving the way your content is visible on the Internet. This is often understood as making your publication show up as highly as possible in search results. But limiting SEO to tricking search engines would be missing the point. Think about SEO as part of the service that you provide to your readers, not just a mechanism to jump the queue in search algorithms.</p>
<p>Imagine you have published an article about the impact the fall of the Berlin Wall has had on urban planning in that city today. It is named &quot;Right in the middle&quot; and because your web design uses big, trendy letters this short title just looks really good. Your Newscoop template is using the article name in the title tag in the header of the HTML document.</p>
<p>Imagine a potential reader who is typing &quot;Berlin Wall&quot; into their favourite search engine. Amongst the results, somewhere, your article shows up. The search engine will display the content of the title tag in the long list of results. What are the chances that the reader would click &quot;Right in the middle&quot; when looking for specific information about the Berlin Wall? The reader would probably be more likely to click &quot;Fall of Berlin Wall heats up property speculation 20 years later&quot;.</p>
<p>This descriptive content increases the chances that readers will click on your article. At the same time, search engines value the content of the title tag highly. This little bit of extra work is likely to catapult your page upwards in the ranks of search results. Where the old title tag did not even mention the Berlin Wall, your new title tag does, and provides additional key words that will have an impact on your article's ranking and your publication's visibility.</p>
<p>This chapter will help you to make most of your publication's most valuable asset: your content. The following examples will cover a number of small modifications to your templates and other parts of your website which can deliver improved page rank and visibility. The examples will focus on SEO practices involving your publication or template structure, with a few journalistic guidelines.<br />
</p>
<h2>Creating descriptive page titles</h2>
<p>Add the field &quot;seo_title&quot; to your article type. This field can be displayed with $gimme-&gt;article-&gt;seo_title in the header region of your document.</p>
<pre class="prettyprint linenums"><code>&lt;head&gt;
    &lt;title&gt;{{ $gimme-&gt;article-&gt;seo_title }}&lt;/title&gt;
&lt;/head&gt;</code></pre>
<p>However, if the journalist forgot to fill in this field, the title tag of the page would be empty. So you should present a fallback option. A simple way of doing this, providing a reasonable solution for section pages and the home page at the same time, would be:</p>
<pre class="prettyprint linenums"><code>&lt;head&gt;
    &lt;title&gt;{{ strip }}
        {{ if $gimme-&gt;article-&gt;seo_title|trim !== &quot;&quot; }}
            {{ $gimme-&gt;article-&gt;seo_title|escape:&#39;html&#39;|trim }} |
        {{ else }}
            {{ $gimme-&gt;article-&gt;name|escape:&#39;html&#39;|trim }} |
        {{ /if }}
        &amp;nbsp;{{ $gimme-&gt;section-&gt;name }} in {{ $gimme-&gt;publication-&gt;name }}
    {{ /strip }}
&lt;/title&gt;
&lt;/head&gt;</code></pre>
<p>The functions trim and escape:'html' are used to make sure the content is clean and HTML. If the seo_title field is not filled in, the article name is displayed instead. If you are on a section page, the article values are not displayed if you link to the section using option=section.</p>
<h2>Use the &quot;description&quot; meta tag</h2>
<p>The description is a summary of what your article is about. The description meta tag goes into the header of your document. Many times, the text in this description will be given as an introduction to the page in a search result. The meta tag looks like this:</p>
<pre class="prettyprint"><code>&lt;meta name=&quot;description=&quot; content=&quot;...&quot;&gt;</code></pre>
<p>Ideally, you should add a field to the Article Type that holds the description content. If this field is empty, you should use text from the main text of the article. A custom description will often be more inviting to a reader, in a list of search results, than the first lines of the main text.</p>
<p>Because the description will most probably come from a WYSIWYG textarea field, it is important to strip_tags. Opinions on the ideal length for meta descriptions vary. In the following example, we set the length to the first 150 characters of the article's main text, if no custom description has been provided.</p>
<pre class="prettyprint linenums"><code>&lt;meta name=&quot;description=&quot; content=&quot;{{ strip }}
{{ if $gimme-&gt;article-&gt;description_tag|strip_tags|trim !== &quot;&quot; }}
    {{ $gimme-&gt;article-&gt;description_tag|strip_tags|escape:&#39;html&#39;|trim }}
{{ else }}
    {{ $gimme-&gt;article-&gt;full_text|strip_tags|escape:&#39;html&#39;|trim|truncate:150 }}
{{ /if }}
{{ /strip }}&quot; /&gt;</code></pre>
<h2>Human readable URLs reflecting the content</h2>
<p>Information in the URL describing the content of the page is valued highly by search engines. You can control the URL for each issue and section, setting short names. So instead of the section number &quot;/12/&quot;, this part of the URL might read &quot;/culture/&quot;. You can find these options in the Newscoop administration interface. Select &quot;Settings&quot; in the list of issues and sections.</p>
<p>The article content can be reflected in three different human readable ways in the URL. You can select the option to use the article title, article keywords, or topics linked with the article. If your publication requires it, you can also create a combination of these options. The configuration for the URL display is done in the administration interface under &quot;Configure Publication&quot;.</p>
<p>Here some examples of what these URLs could look like:</p>
<ul>
<li>by article title - http://yoursite.com/en/mar2011/posts/4/Healthy-options-for-your-sweet-tooth.htm (the article title is &quot;Healthy options for your sweet tooth&quot;)</li>
<li>by article keywords - http://yoursite.com/en/mar2011/posts/4/healthy-options.htm (the article has keywords &quot;healthy&quot; and &quot;options&quot;)</li>
<li>by article topics - http://yoursite.com/en/mar2011/posts/4/health-dine-wine-tomato-garlic-bread.htm (the article has topics &quot;health&quot;, &quot;dine&quot;, &quot;wine&quot;, &quot;tomato&quot;, &quot;garlic&quot; and &quot;bread&quot;)</li>
<li>by combining some - or all - of these options</li>
</ul>
<h2>Structure heading tags properly</h2>
<p>Heading tags (h1, h2, h3, ...) reflect the hierarchy of the content on a page. This is how search engines read them, so you should design your page in the same way for humans. For example, when designing a page, don't use heading tags to control the layout.<br />
</p>
<p>HTML 5 is not very different from HTML 4 when it comes to SEO, so the rules are almost the same:</p>
<ul>
<li>Use only one H1 element on any page</li>
<li>You can use any number of H2, H3, H4, H5, H6 elements on any page, as long they follow this hierarchy<br />
</li>
<li>Use &lt;ul&gt; or &lt;ol&gt; tags for lists<br />
</li>
<li>For menus, use the &lt;ul&gt; tag in HTML 4 and the &lt;nav&gt; tag in HTML 5</li>
<li>Use &lt;div&gt; tags for styling blocks inside a template</li>
<li>Use inline tags like &lt;p&gt; or &lt;span&gt; only for content<br />
</li>
</ul>
<p>The logic for using only one H1 element is derived from the fact that search engines identify &lt;h1&gt; tags as page titles. Sometimes, search engines ignore &lt;title&gt; tags because they have been abused by webmasters.<br />
</p>
<p>HTML 5 also introduces new tags like &lt;header&gt;, &lt;footer&gt;, &lt;nav&gt;, &lt;article&gt;, &lt;aside&gt; and &lt;section&gt;. Search engines disqualify the use of multiple &lt;header&gt; tags if they are positioned one after another, but not if they are used as headers for each &lt;article&gt; tag. The same thing happens for &lt;nav&gt; and &lt;footer&gt; tags. A page can have multiple &lt;article&gt;, &lt;aside&gt; and &lt;section&gt; tags, each of these containing just one &lt;header&gt;, &lt;footer&gt; and &lt;nav&gt; tag.</p>
<h2>XML Sitemap for your publication</h2>
<p>Providing a sitemap in a specific XML format will make it easy for search engines to gain access to your content. The XML sitemap delivers all content that you wish to be indexed in a machine readable file.</p>
<p>Providing a sitemap also makes sure that search engines will find all of your content. A simple example: if you are using Flash to link from one page to another, that link is not being followed, because it is invisible to spiders (search engine robots). Such &quot;invisible&quot; pages will be listed in the sitemap, and help search engines to understand where these pages are.</p>
<p>In order to create a sitemap for your publication, see the chapter about XML, RSS, KML and sitemaps.</p>
<h2>Unique URLs: the canonical tag</h2>
<p>Canonical tags have one important purpose: tell search engines what the &quot;clean&quot; URL of the page is. The canonical tag sits in the header of your page. It was introduced in February 2009 by Google, Yahoo and Microsoft and it looks like this:</p>
<pre><code>&lt;link rel=&quot;canonical&quot; href=&quot;http://www.example.com/&quot; /&gt;</code></pre>
<p>This is meant to put an end to the issues related to duplicate content. In short: duplicate content was used by some sites to increase their page rank. To prevent this kind of spamming, search engines rated domains with duplicate content lower. But any CMS will need different URLs for the same page, for example when passing on a parameter in the URL for browsing history, login, related items and others. The canonical tag now allows sites to make sure they are not ranked lower because they produce some duplicate content. Using the canonical tag will result in higher page ranks.</p>
<p>You need to adjust the following example to the template and folder names you are using for your publication.<br />
</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;template-&gt;name == &quot;package_name/article.tpl&quot; }}
    &lt;link rel=&quot;canonical&quot; href=&quot;{{ url options=&quot;article&quot; }}&quot; /&gt;
{{ /if }}
{{ if $gimme-&gt;template-&gt;name == &quot;package_name/section.tpl&quot; }}
    &lt;link rel=&quot;canonical&quot; href=&quot;{{ url options=&quot;section&quot; }}&quot; /&gt;
{{ /if }}
{{ if $gimme-&gt;template-&gt;name == &quot;package_name/index.tpl&quot; }}
    &lt;link rel=&quot;canonical&quot; href=&quot;http://{{ $gimme-&gt;publication-&gt;site }}&quot; /&gt;
{{ /if }}</code></pre>
<h2>Additional checklist for your journalists and editors</h2>
<p>The following list is not relevant for making templates. But while you are working on SEO, you might as well pass on some tips to your colleagues who are contributing content. At the end of the day, their input will guide the audience to your site.</p>
<p>Explain to the journalists and editors that their input into SEO could dramatically increase the readership of their articles on your publication's site. A little extra effort increases advertiser value, extends the shelf life of the article, and makes the journalist who wrote it much more famous.</p>
<p>When writing descriptions (for both articles and images)...</p>
<ul>
<li>Summarize the content accurately. Below are a few pointers that might help journalists and editors create a good description.</li>
<li>Write unique descriptions. While this might appear impossible in large publications with thousands of articles and a large contributing staff, keeping this idea in your head will help avoid being boring and generic.</li>
<li>Write for your audience, not for a search engine. Avoid writing a description tag that bears no resemblance to the content of the article. Don't write up a list of keywords, but form a sentence or two.</li>
<li>Do not use the same description across your site. This could actually be worse than using no description tag at all. Imagine all search results in a list saying: &quot;Simply the best magazine in the world&quot;.</li>
</ul>
<p>When writing an article or image description, or providing a custom SEO title, include the following elements:</p>
<ul>
<li>Who or what is being shown? What is the name of the person, the animal, the building, the event? &quot;Bird&quot; is better than nothing, but &quot;Eagle&quot; would be better</li>
<li>Where is it happening? &quot;Eagle in the sky&quot; is good, &quot;Eagle in the sky above the Alps&quot; is better<br />
</li>
<li>Why is it happening? Why are you writing about it? Are you writing about an &quot;Endangered Eagle in the sky above the Alps&quot;</li>
<li>When is this happening? Are we looking at an &quot;Endangered Eagle in the sky above the Alps in Spring&quot;?</li>
</ul>
<p>You don't need to go overboard with building endless descriptions. Prioritize according to your story. The above questions are a good way to get to the essence quickly. In the end, you might settle for &quot;Endangered Eagle flys in the Alps&quot; - this captures the story better and would attract far more readers than &quot;Bird&quot; would ever do.</p>
<h3>Make use of the image alt description</h3>
<p>When adding an image, do not leave the alt tag empty. Firstly, screen reader programs for people with visual impairments rely on this information. Secondly, image searches on the Internet will categorise and rank images based on information in the alt tag. Readers finding your publication through image searches may be more common than you might think.</p>
<h3>Link text should relate to the page it links to</h3>
<p>When linking to a page, make sure the link text is related to the content of the page you link to. &quot;You can download Newscoop <strong>here</strong>&quot; is bad. &quot;<strong>Download Newscoop</strong> for free&quot; is better.</p>
<p><span id="ch044_newscoop-and-html5.xhtml"></span></p>
<h1>Newscoop and HTML5</h1>
<p>The big challenge for web publishing today is the migration of sites to the HTML5 and CSS3 standards. Fortunately, Newscoop is HTML5 ready.</p>
<p>Other content management systems rely on HTML code provided by third-party widgets, modules or plugins. Changing the HTML output of these external modules often requires digging into their code. In Newscoop, because of the strict separation of business logic and presentation logic in the template engine, you have total control over HTML5 and CSS3 template output.</p>
<p>Below, we introduce a few examples of HTML5 / CSS3 in Newscoop templates to illustrate the ease of implementation of HTML5 features.<br />
</p>
<h3>HTML metatags and header information</h3>
<p>A typical HTML5 header in Newscoop would start like this:</p>
<pre class="prettyprint linenums"><code>&lt;!DOCTYPE html&gt;
 &lt;html lang=&quot;{{ $gimme-&gt;language-&gt;code }}&quot;&gt;
  &lt;head&gt;
   &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;meta name=&quot;description&quot; content=&quot;{{ $siteinfo.description }}&quot; /&gt;
     &lt;meta name=&quot;keywords&quot; content=&quot;{{ if $gimme-&gt;article-&gt;keywords }}
                                   {{ $gimme-&gt;article-&gt;keywords }},
                                  {{ /if }}
                                 {{ $siteinfo.keywords }}&quot; /&gt;
     &lt;title&gt;{{ $gimme-&gt;publication-&gt;name }}&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;screen.css&quot; media=&quot;all&quot; /&gt;
  &lt;/head&gt;</code></pre>
<p>{{ $siteinfo.description }} is the global variable which holds the site description specified in the Newscoop administration interface.</p>
<p>{{ $gimme-&gt;article-&gt;keywords }} and {{ $siteinfo.keywords }} are two ways to include meta tag keywords. In Newscoop, an individual article can have its own keywords specified. If that's the case, the meta tag for keywords will be filled with these article specific keywords. Otherwise, only global site keywords will be used.</p>
<p>Finally, the site title is defined showing the name of the publication using {{$gimme-&gt;publication-&gt;name}}.</p>
<h3>Multiple columns in HTML5</h3>
<p>Multi-Column Layout defines new CSS properties for columns of text. Content can flow into multiple columns, with a gap between them. You can put the content in the appropriate places inside the HTML layout.</p>
<pre class="prettyprint linenums"><code>&lt;header&gt;
   &lt;hgroup&gt;
          &lt;h1&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/h1&gt;
   &lt;/hgroup&gt;
   &lt;p&gt;By: {{ $gimme-&gt;article-&gt;author-&gt;name }}&lt;/p&gt;
&lt;/header&gt;
&lt;div class=&quot;text1&quot;&gt;
   &lt;p&gt;{{ $gimme-&gt;article-&gt;lead }}&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;text2&quot; id=&quot;customCols&quot;&gt;
   &lt;p&gt;{{ $gimme-&gt;article-&gt;body }}&lt;/p&gt;
&lt;/div&gt;</code></pre>
<p>Accompanied by some CSS3 styling, this piece of code is enough to divide text into columns, gaps, and even rules between columns.</p>
<pre class="prettyprint linenums"><code>.text2 {
  -webkit-column-count: 2;
  -moz-column-count: 2;
  column-count: 2;
  -webkit-column-gap: 20px;
  -moz-column-gap: 20px;
  column-gap: 20px;
  -webkit-column-rule: 1px solid #999;
  -moz-column-rule: 1px solid #999;
  column-rule: 1px solid #999;
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  border-radius: 10px;
}</code></pre>
<h3>Video and audio handling</h3>
<p>Not only text content is HTML5 ready - Newscoop can handle media attachments in a HTML5 way. The following code shows how an audio file which has been attached to an article in the Newscoop administration interface can be handled in HTML5:</p>
<pre class="prettyprint linenums"><code>&lt;audio controls&gt;
    &lt;source src=&quot;{{ uri options=&quot;articleattachment&quot; }}&quot;
             type=&quot;{{ $gimme-&gt;attachment-&gt;mime_type }}&quot;&gt;
&lt;/audio&gt;</code></pre>
<p>The code above displays a player for the specified audio attachment. To help the browser to determine the MIME type of the audio file, the 'type' attribute is specified, although it can be omitted. The same technique is possible for video content:</p>
<pre class="prettyprint linenums"><code>&lt;video controls width=&quot;520&quot; height=&quot;330&quot;&gt;
    &lt;source src=&quot;{{ uri options=&quot;articleattachment&quot; }}&quot;
             type=&quot;{{ $gimme-&gt;attachment-&gt;mime_type }}&quot;&gt;
&lt;/video&gt;</code></pre>
<p>In both cases, {{ uri options=&quot;articleattachment&quot; }} is replaced with the audio or video file URL. With HTML5, you don't need to specify Flash players, because modern browsers have a built-in player for embedded multimedia content.</p>
<p><span id="ch045_troubleshooting-templates.xhtml"></span></p>
<h1>Troubleshooting templates</h1>
<p>Newscoop's administration interface has a built-in preview option on the article edit page which also shows template parsing errors, if there are any. When you browse your publication in the preview window, you can see error messages for all parts of your publication.</p>
<p><img src="static/parse-errors.png" /></p>
<p><em>At the bottom of the preview window you can see error messages from the template parser.</em><br />
</p>
<p>The second frame on this page displays any parsing errors, which can be very useful for debugging templates. It immediately narrows down possible errors to the specific main or included template. It also displays the line and type of error.</p>
<p>The error messages are not always precise. The point where the parser encounters an error may only be a reflection of a problem coming from further up in the template. If the message shown by the parse error frame is not useful to find the problem, you'll have to find an alternate way to locate it.</p>
<p>For example, in some situations, checking the source of the generated HTML page helps. It may be that the content you expect to be shown somewhere doesn't appear on the page, but it's in the HTML source. This obviously shows that the problem is not in Newscoop but somewhere in HTML or CSS. The opposite is also true; if the source contains all the &lt;div&gt; and &lt;li&gt; tags that it should but their content is empty, you can be sure that Newscoop isn't working like it should.</p>
<p>There are lots of very handy tools out there in browsers nowadays. You can use them to easily parse your HTML code and find an error. The one used in Firefox is <a href="http://getfirebug.com/">Firebug</a>. It is an extension to Firefox, all you need to do is to find it in the repository and install to the browser:<br />
</p>
<p><img src="static/SCN19.PNG" /></p>
<p>The usage is pretty easy - open, inspect element, find error:<br />
</p>
<p><img src="static/SCN20.PNG" /><br />
</p>
<p>But what is really good, is that you can debug your jQuery templates with it. Just adding a few lines of code to your JavaScript will provide Console feedback:<br />
</p>
<pre class="prettyprint linenums"><code>console.log (&quot;Here are the date links:\r\n&quot;);
...
console.log (link + &quot;\r\n&quot;);</code></pre>
<p><img src="static/SCN21.PNG" /></p>
<p>There's almost the same tool in Chrome, which can be found in the menu under Tools -&gt; Developer tools:<br />
</p>
<p><img src="static/SCN22.PNG" /><br />
</p>
<p>Another debugging strategy may be inserting temporary tags for printing the values of Newscoop variables.</p>
<p>The following code checks the values of variables in the registration process. It doesn't make any sense to use on a live site, but it may be useful for debugging purposes:<br />
</p>
<pre class="prettyprint linenums"><code>&lt;h2&gt;Add new subscription&lt;/h2&gt;
 {{* debug user add/edit/subscribe *}}
  &lt;h5&gt;Edit_user_action:&lt;/h5&gt;
   &lt;p&gt;Edit user action defined: {{ if $gimme-&gt;edit_user_action-&gt;defined }}defined{{ else }}not defined{{/if}}&lt;/p&gt;
   &lt;p&gt;Edit user action error: {{ if $gimme-&gt;edit_user_action-&gt;is_error }}is_error, code: {{ $gimme-&gt;edit_user_action-&gt;error_code }}, message: {{ $gimme-&gt;edit_user_action-&gt;error_message }}{{ else }}not error{{/if}}&lt;/p&gt;
   &lt;p&gt;Edit user action ok: {{ if $gimme-&gt;edit_user_action-&gt;ok }}ok{{ else }}not ok{{/if}}&lt;/p&gt;
   &lt;p&gt;edit user action type: {{ $gimme-&gt;edit_user_action-&gt;type }}&lt;/p&gt;

  &lt;h5&gt;Edit_subscription_action:&lt;/h5&gt;
   &lt;p&gt;Subs action defined: {{ if $gimme-&gt;edit_subscription_action-&gt;defined }}defined{{ else }}not defined{{/if}}&lt;/p&gt;
   &lt;p&gt;Subs action error: {{ if $gimme-&gt;edit_subscription_action-&gt;is_error }}is_error, code: {{ $gimme-&gt;edit_subscription_action-&gt;error_code }}, message: {{ $gimme-&gt;edit_subscription_action-&gt;error_message }}{{ else }}not error{{/if}}&lt;/p&gt;
   &lt;p&gt;Subs action ok: {{ if $gimme-&gt;edit_subscription_action-&gt;ok }}ok{{ else }}not ok{{/if}}&lt;/p&gt;
   &lt;p&gt;Subs action {{ if $gimme-&gt;edit_subscription_action-&gt;is_trial }}is_trial{{ else }}not trial{{/if}}&lt;/p&gt;
   &lt;p&gt;subs action {{ if $gimme-&gt;edit_subscription_action-&gt;is_paid }}is_paid{{ else }}not paid{{/if}}&lt;/p&gt;
 {{* end debugging *}}</code></pre>
<p>This would be the output:</p>
<p><img src="static/aoutput.png" /></p>
<p>Similarly to this, you can use this temporary outputs wherever you feel you need to check what's really happening. For example, inside a list to check how values of list index and list count change with every new cycle -</p>
<pre class="prettyprint linenums"><code>{{ list_articles }}
    &lt;div class=&quot;post wrap&quot;&gt;
        &lt;p&gt;Current list index: {{ $gimme-&gt;current_list-&gt;index }}, list count: {{ $gimme-&gt;current_list-&gt;count }}&lt;/p&gt;
        &lt;h2 class=&quot;post-title&quot;&gt;&lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot; rel=&quot;bookmark&quot; title=&quot;{{ $gimme-&gt;article-&gt;name }}&quot;&gt;{{ if ! $gimme-&gt;article-&gt;content_accessible }}* {{ /if }}{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;&lt;/h2&gt;
    &lt;/div&gt;
{{ /list_articles }}</code></pre>
<p>Here we put a temporary &lt;p&gt; tag with values of index and count above every title, and the result would be like this screenshot:</p>
<p><img src="static/temp-outp.png" /></p>
<p>Or, you may want to check the values of parameters forwarded to a page. You can do this at the template's very beginning:</p>
<pre class="prettyprint linenums"><code>&lt;p&gt;Language: {{ $gimme-&gt;language-&gt;name }}&lt;br /&gt;
 Issue: {{ $gimme-&gt;issue-&gt;name }} &lt;br /&gt;
 Section: {{ $gimme-&gt;section-&gt;name }}&lt;br /&gt;
 Article no: {{ $gimme-&gt;article-&gt;number }}&lt;br /&gt;
 Topic active? {{ if $gimme-&gt;topic-&gt;defined }}yes{{ else }}no{{ /if }}
&lt;/p&gt;

{{ include file=&quot;set_thejournal/_tpl/top.tpl&quot; }}</code></pre>
<p>The output displays the values of the parameters, so you can check if everything is OK:</p>
<p><img src="static/atop.png" /></p>
<h2>Most common errors / problems </h2>
<ul>
<li>Missing a closing element for {{ if }} statements - this especially happens when several 'if' clauses are nested. You can simplify your expression by using {{ elseif }}; that will reduce the need for closing 'if's</li>
<li>Missing list closing element - this also happens more often when using lists inside lists</li>
<li>Wrong syntax inside an 'article list' constraints option. Because there are a lot of possible options, always consult the template reference at the end of this book for options and their correct formatting</li>
<li>Syntax errors in general - again, the safest way to avoid errors is to always consult the template reference<br />
</li>
<li>Context problems - these are harder to discover because they don't produce parse errors in the preview window. To discover context-related values problems, try inserting temporary tags to output the values of variables. Do it at the beginning of the template, then do it again after an action was performed. This way, you can see what really happens with those variables.</li>
</ul>
<h2>Where to go for more help</h2>
<p>There are a few places you can turn for troubleshooting assistance on your templates. The first place to look is the Newscoop support forum, which you can find at <a href="http://forum.sourcefabric.org/index.php/f/10/">http://forum.sourcefabric.org</a></p>
<p>Sourcefabric also offers paid support. As the maintainer of Newscoop (and its largest code contributor), Sourcefabric can provide a broad and deep body of knowledge to our customers. For example, we can help troubleshoot your templates or installation, or we can create custom templates for you. You can find more details about Sourcefabric's services on the website: <a href="http://www.sourcefabric.org/en/services/about/346/Overview.htm">http://services.sourcefabric.org</a></p>
<p><span id="ch047_using-jquery-and-php-in-templates.xhtml"></span></p>
<h1>Using jQuery and PHP in templates</h1>
<p>The Newscoop template engine comes with a set of custom functions which are used in examples in this Cookbook. A full template reference can be found at the end of the book. Everything involving the $gimme object is Newscoop related.</p>
<p>You can also find a number of examples in the advanced section, which use jQuery and PHP. This chapter explains some of the background information you need to know to make your work with advanced functions easier to understand. It will also allow you to venture into making your own. If you do, by all means, tell us about it! You can mail us at <a href="mailto:contact@sourcefabric.org">contact@sourcefabric.org</a> and share your ideas with the community in our forums at <a href="http://forums.sourcefabric.org" class="uri">http://forums.sourcefabric.org</a></p>
<h2>Using jQuery in your templates</h2>
<p>jQuery is a fast and concise JavaScript Library that simplifies HTML document traversing, event handling, animating, and Ajax interactions for rapid web development. If you haven't used jQuery yet, you could start getting familiar with it by reading the tutorial on the jQuery site: <a href="http://docs.jquery.com/Tutorials:How_jQuery_Works" class="uri" title="Tutorial: How jQuery Works ">http://docs.jquery.com/Tutorials:How_jQuery_Works</a></p>
<p>To use jQuery with Newscoop, you just need to add libraries in your _html-header.tpl file, and that's it! It will be much easier if you follow our recommendations and put all your own jQuery code in a separate file (/templates/set_name/_js/functions.js).</p>
<p>So the first thing to do will be to include all required jQuery libraries in the html header:<br />
</p>
<pre class="prettyprint linenums"><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;en&quot; /&gt;
  ...
  &lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js&quot;&gt;&lt;/script&gt;
  &lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.11/jquery-ui.min.js&quot;&gt;&lt;/script&gt;
  &lt;link type=&quot;text/css&quot; href=&quot;http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.11/themes/base/jquery-ui.css&quot; rel=&quot;stylesheet&quot; /&gt;
  &lt;script src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_name/_js/functions.js&quot;&gt;&lt;/script&gt;
  ...
&lt;/head&gt;</code></pre>
<p>The first &lt;script&gt; line is the jQuery library itself. It is required for all functions to work.</p>
<p>The next two lines are for jQuery UI, which provides abstractions for low-level interaction and animation, advanced effects and high-level, themeable widgets, built on top of the jQuery JavaScript Library.</p>
<p>As you can see in the above example, we included all libraries from Google's CDN (see <a href="http://code.google.com/apis/libraries/devguide.html#jqueryUI" class="uri">http://code.google.com/apis/libraries/devguide.html#jqueryUI</a>). You also can download jQuery (see <a href="http://docs.jquery.com/Downloading_jQuery" class="uri">http://docs.jquery.com/Downloading_jQuery</a>) and copy it to the right place on your server:</p>
<pre class="prettyprint linenums"><code>  &lt;!-- Grab Google CDNs jQuery. fall back to local if necessary --&gt;
  &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js&quot;&gt;&lt;/script&gt;
  &lt;script&gt;!window.jQuery &amp;&amp; document.write(unescape(&#39;%3Cscript src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_thejournal/_js/jquery-1.5.2.min.js&quot;%3E%3C/script%3E&#39;))&lt;/script&gt;
  ...
  &lt;script src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/set_name/_js/functions.js&quot;&gt;&lt;/script&gt;</code></pre>
<p>Your part of the magic is created inside the functions.js file:</p>
<pre class="prettyprint linenums"><code>$(document).ready(function(){
...
});</code></pre>
<p>If you need to place a piece of jQuery inside some particular template, just use the &lt;script&gt; tag:</p>
<pre class="prettyprint linenums"><code>&lt;script type=&quot;text/javascript&quot;&gt;$(document).ready(function(){
...
});&lt;/script&gt;</code></pre>
<p>jQuery, like other JavaScript frameworks, is a very handy tool to make your designs work, so that you can concentrate on other things. Here is, just for example, a small piece of code to make an &quot;Increase/Decrease Font Size&quot; control. First, the JavaScript, then the template code:</p>
<p><strong>functions.js</strong></p>
<pre class="prettyprint linenums"><code>var articleBox = $(&quot;.block-article&quot;);
var originalFontSize = $(articleBox).css(&#39;font-size&#39;);
  // Increase Font Size
$(&quot;a[href=#zoomin]&quot;).click(function(){
  var currentFontSize = $(articleBox).css(&#39;font-size&#39;);
  var currentFontSizeNum = parseFloat(currentFontSize, 10);
  var newFontSize = currentFontSizeNum*1.1;
  $(articleBox).css(&#39;font-size&#39;, newFontSize);
  return false;
});
  // Decrease Font Size
$(&quot;a[href=#zoomout]&quot;).click(function(){
  var currentFontSize = $(articleBox).css(&#39;font-size&#39;);
  var currentFontSizeNum = parseFloat(currentFontSize, 10);
  var newFontSize = currentFontSizeNum*0.9;
  $(articleBox).css(&#39;font-size&#39;, newFontSize);
  return false;
});</code></pre>
<p><strong>article-cont.tpl</strong></p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;block-fonts-control&quot;&gt;
 &lt;a href=&quot;#zoomin&quot;&gt;Increase&lt;/a&gt; / &lt;a href=&quot;#zoomout&quot;&gt;Decrease&lt;/a&gt; font
&lt;/div&gt;
...
&lt;div class=&quot;block-article&quot;&gt;
  {{$gimme-&gt;article-&gt;intro}}
  {{$gimme-&gt;article-&gt;full_text}}
&lt;/div&gt;</code></pre>
<h2>Using PHP in your templates</h2>
<p>The {{ php }} tag allows PHP code to be embedded directly into the template. This is for advanced users only, not normally needed and not recommended. The following information was taken from <a href="http://www.smarty.net" class="uri">http://www.smarty.net</a></p>
<p>Example PHP code within {{ php }} tags:</p>
<pre class="prettyprint linenums"><code>{{ php }}
  // including a php script directly from the template.
  include(&#39;/path/to/display_weather.php&#39;);
{{ /php }}</code></pre>
<h2>Passing on variables between $gimme and PHP</h2>
<p>When using PHP, you might want to work with $gimme values inside PHP, as well as pass on PHP variables to the template. In order to do this, you need to assign the variables first, then you can access them inside PHP. Important: use backticks ` in the assign function. Here's a little example:</p>
<p><strong>Assigning a variable in the template to use with PHP</strong><br />
</p>
<pre><code>{{ assign var=&quot;profile_email&quot; value=`$gimme-&gt;comment-&gt;reader_email` }}
{{ php }}
$profile_email = $this-&gt;get_template_vars(&#39;profile_email&#39;);
print $profile_email;
{{ /php }}</code></pre>
<p>Note: there seems to be no way to pass on variables from an included file into the parent. We could not figure it out. If you can, please add your code here!</p>
<p><strong>Assign a variable in PHP to use in the template</strong><br />
</p>
<pre class="prettyprint linenums"><code>{{* a {{php}} block that assigns the variable $varX *}}
{{php}}
  $this-&gt;assign(&#39;varX&#39;,&#39;Toffee&#39;);
{{/php}}
{{* output the variable in the template *}}
&lt;strong&gt;{{$varX}}&lt;/strong&gt; is my favourite ice cream :-)</code></pre>
<p> </p>
<p><span id="ch048_pulldown-menu-with-superfish-using-jquery.xhtml"></span></p>
<h1>Pulldown menu with Superfish using jQuery</h1>
<p>Download and documentation: <a href="http://users.tpg.com.au/j_birch/plugins/superfish/" class="uri">http://users.tpg.com.au/j_birch/plugins/superfish/</a></p>
<p>Pulldown menus with sub-menus opening on mouse-over are very popular. We recommend using Superfish for elegance, flexibility and SEO compatible design. We show you how to add this to your Newscoop publication in five simple steps.</p>
<p>Superfish is a jQuery menu plugin developed by Joel Birch which adds neat usability to an existing CSS drop-down menu (so it degrades gracefully without JavaScript). You can see it in action at <a href="http://www.sourcefabric.org">www.sourcefabric.org</a>. Go to the Superfish website for more details, examples and documentation. Download the zip-file before we start.</p>
<p>In our example, we use the Template Package &quot;Ushahidi Cooker&quot;. The Superfish navigation will be added beneath the header and above the breadcrumbs. You can download the &quot;Ushahidi Cooker&quot; at <a href="http://www.sourcefabric.org/">www.sourcefabric.org</a> under Products &gt; Newscoop &gt; Templates. Without the pulldown menu, the design looks like this:</p>
<p><img src="static/screen-superfish-ushahidi-OFF.png" /></p>
<p>The &quot;Ushahidi Cooker&quot; is a directory of maps. We will now improve usability with a pulldown menu.</p>
<p>After you downloaded the Superfish zip-file, fire up your text editor and open the example.html file.</p>
<h3>1. Adding JavaScript and CSS links to header</h3>
<p>When you open the file example.html in the Superfish zip, you will see these lines in the header of the document, linking in the CSS files, the JavaScript files and initialise the jQuery plugin:</p>
<pre class="prettyprint linenums"><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/superfish.css&quot; media=&quot;screen&quot;&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.2.6.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/hoverIntent.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;js/superfish.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
// initialise plugins
  jQuery(function(){
    jQuery(&#39;ul.sf-menu&#39;).superfish();
  });
&lt;/script&gt;</code></pre>
<p>Following the recommended folder structure described in an earlier chaper, I change these to:</p>
<pre class="prettyprint linenums"><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/templates/set_ushahidicooker/_css/superfish/css/superfish.css&quot; media=&quot;screen&quot;&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/templates/set_ushahidicooker/_js/jquery-1.2.6.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/templates/set_ushahidicooker/_js/hoverIntent.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/templates/set_ushahidicooker/_js/superfish.js&quot;&gt;&lt;/script&gt;</code></pre>
<p>As you can see in this example, Superfish comes with a jQuery file (jquery-1.2.6.min.js). Note: there is a new folder now inside _css by the name of superfish with a subfolder css. Superfish has a css and an images folder, they both go into the new superfish folder. You'll make your life easier if you keep files in separate folders.</p>
<p>These changes need to be added in the sub-template for the header. For the &quot;Ushahidi Cooker&quot; this is:</p>
<pre class="prettyprint"><code>set_ushahidicooker/_tpl/header.tpl</code></pre>
<p>Because this file already calls jQuery (see below), I leave this line out. I add the lines just beneath the linked jquery.min.js and add the initialising JavaScript before the header closes.</p>
<pre class="prettyprint linenums"><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;!-- Superfish files --&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/templates/set_ushahidicooker/_css/superfish/css/superfish.css&quot; media=&quot;screen&quot;&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/templates/set_ushahidicooker/_js/hoverIntent.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/templates/set_ushahidicooker/_js/superfish.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
    // initialise plugins
    jQuery(function(){
      jQuery(&#39;ul.sf-menu&#39;).superfish();
    });
    &lt;/script&gt;
&lt;/head&gt;</code></pre>
<h3>2. Copying files to correct folders</h3>
<p>Create the folder superfish inside _css and move the css and images folder into is. These are the files and folders you should now have:</p>
<pre class="prettyprint linenums"><code>set_ushahidicooker/_css/superfish/css/
  - superfish.css
  - superfish-navbar.css
  - superfish-vertical.css
set_ushahidicooker/_css/superfish/images/
  - arrows-ffffff.png
  - shadow.png</code></pre>
<p>Also move the JavaScript files into the _js folder.</p>
<h3>3. Create the sub-template to build the navigation</h3>
<p>The file you create is called sf-menu.tpl and is saved inside set_ushahidicooker/_tpl/</p>
<h3>4. Generate the menu HTML with Newscoop</h3>
<p>In our case, we are listing the sections as the visible menu items running horizontally, and the articles in each section are in the pulldown item. The code inside sf-menu.tpl looks like this:</p>
<pre class="prettyprint linenums"><code>    &lt;ul class=&quot;sf-menu&quot;&gt;
{{ list_sections }}
      &lt;li&gt;
        &lt;a href=&quot;{{ uri }}&quot;&gt;{{ $gimme-&gt;section-&gt;name }}&lt;/a&gt;
{{ list_articles }}
{{ if $gimme-&gt;current_list-&gt;at_beginning }}
        &lt;ul&gt;
{{ /if }}
          &lt;li&gt;
            &lt;a href=&quot;{{ uri }}&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;
          &lt;/li&gt;
{{ if $gimme-&gt;current_list-&gt;at_end }}
        &lt;/ul&gt;
{{ /if }}
{{ /list_articles }}
      &lt;/li&gt;
{{ /list_sections }}
    &lt;/ul&gt;</code></pre>
<p>Again, the same list. Now we focus on the Newscoop action that is taking place:</p>
<p>List all sections and open a list item:</p>
<pre class="prettyprint linenums"><code> {{ list_sections }}
      &lt;li&gt;</code></pre>
<p>Create a link to the section, displaying the section name:</p>
<pre class="prettyprint"><code>        &lt;a href=&quot;{{ uri }}&quot;&gt;{{ $gimme-&gt;section-&gt;name }}&lt;/a&gt;</code></pre>
<p>List all articles. These will be the articles inside the current section from the list_section command. In other words: only the ones in the section we just printed:</p>
<pre class="prettyprint"><code>{{ list_articles }}</code></pre>
<p>Now we open another unordered list (ul). But only when we start with the listing of articles:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;current_list-&gt;at_beginning }}
        &lt;ul&gt;
{{ /if }}</code></pre>
<p>Now the articles are listed as list items:</p>
<pre class="prettyprint linenums"><code>          &lt;li&gt;
            &lt;a href=&quot;{{ uri }}&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;
          &lt;/li&gt;</code></pre>
<p>Then we close the unordered list, once we reached the last item and finish list_articles:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;current_list-&gt;at_end }}
        &lt;/ul&gt;
{{ /if }}
{{ /list_articles }}</code></pre>
<p>Now we have left the sub-loop of articles, we are back again with the section. We close the list item and then the section:</p>
<pre class="prettyprint linenums"><code>      &lt;/li&gt;
{{ /list_sections }}</code></pre>
<p>Note: if a section is empty, the sub-list will not be built by Newscoop.</p>
<h3>5. Include sf-menu.tpl in the page</h3>
<p>You can call this page now anywhere you want with:</p>
<pre class="prettyprint"><code>{{ include file=&quot;set_ushahidicooker/_tpl/sf-menu.tpl&quot; }}</code></pre>
<p>The screenshot show the Superfish pulldown at the end of the template _tpl/title.tpl. Open the file title.tpl and add this line at the end. Then it should end like this:</p>
<pre class="prettyprint linenums"><code>...
&lt;h1&gt;{{ $gimme-&gt;publication-&gt;name }}&lt;/h1&gt;
&lt;span&gt;Location and Map Directory with Geographic Data Feed (KML)&lt;/span&gt;
&lt;/div&gt;
{{ include file=&quot;set_ushahidicooker/_tpl/sf-menu.tpl&quot; }}</code></pre>
<p>Done. Now you could adjust the CSS files if you like. If you don't, the Superfish will look like this:</p>
<p><img src="static/screen-superfish-ushahidi-ON.png" /></p>
<p>The &quot;Ushahidi Cooker&quot; now has a pulldown menu, showing the city maps for each section.</p>
<p><span id="ch049_tabs-with-jquery.xhtml"></span></p>
<h1>Tabs with jQuery<br />
</h1>
<p>jQuery tabs are an efficient way to show content like <em>Most Recent Articles</em> or <em>Most Recent Comments</em> in one place. You can read a lot about the jQuery UI Tabs widget at their site, <a href="http://jqueryui.com/demos/tabs/" class="uri" title="jQuery UI Tabs">http://jqueryui.com/demos/tabs/</a></p>
<p>Here is an example jQuery tab (see the chapters on <em>Most Recent Articles</em> or <em>Most Recent Comments</em> to see how those are generated):</p>
<p><img src="static/SCN18.PNG" /></p>
<p>Here's the jQuery part:<br />
</p>
<pre class="prettyprint linenums"><code>$(function(){
  $(&#39;#container-1 ul&#39;).tabs();
});</code></pre>
<p>The rest is done inside Newscoop templates.<br />
Here's the logic:</p>
<pre class="prettyprint linenums"><code>&lt;div id=&quot;container-1&quot;&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#fragment-1&quot;&gt;Title 1&lt;/a&gt;&lt;/li&gt; {{* first tab title *}}
  &lt;li&gt;&lt;a href=&quot;#fragment-2&quot;&gt;Title 2&lt;/a&gt;&lt;/li&gt; {{* second tab title *}}
&lt;/ul&gt;

&lt;div id=&quot;fragment-1&quot;&gt;
  {{* first tab content *}}
&lt;/div&gt;

&lt;div id=&quot;fragment-2&quot;&gt;
  {{* second tab content *}}
&lt;/div&gt;

&lt;/div&gt;</code></pre>
<p>And here's the actual example:</p>
<pre class="prettyprint linenums"><code>&lt;div id=&quot;container-1&quot;&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#fragment-1&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt; {{* first tab title *}}
  &lt;li&gt;&lt;a href=&quot;#fragment-2&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/a&gt;&lt;/li&gt;  {{* second tab title *}}
&lt;/ul&gt;

&lt;div id=&quot;fragment-1&quot;&gt;  {{* first tab content *}}
{{set_section number=&quot;1&quot;}}
{{list_articles length=&quot;12&quot; constraints=&quot;onfrontpage is off onsection is on&quot; ignore_issue=&quot;true&quot;}}
  &lt;h4&gt;&lt;a href=&quot;{{uri options=&quot;article&quot;}}&quot;&gt;{{ $campsite-&gt;article-&gt;name}}&lt;/a&gt;{{if $campsite-&gt;article-&gt;has_video}}&lt;i class=&quot;ico video&quot;&gt;&lt;/i&gt;{{/if}}{{if $campsite-&gt;article-&gt;has_photo}}&lt;i class=&quot;ico photo&quot;&gt;&lt;/i&gt;{{/if}}{{if $campsite-&gt;article-&gt;has_audio}}&lt;i class=&quot;ico audio&quot;&gt;&lt;/i&gt;{{/if}}&lt;/h4&gt;
  &lt;p class=&quot;container-date&quot;&gt;{{$campsite-&gt;article-&gt;publish_date|camp_date_format:&quot;%d %M %Y.&quot;}}&lt;/p&gt;
  &lt;p&gt;{{$campsite-&gt;article-&gt;Intro_front}}{{if $campsite-&gt;article-&gt;comment_count&gt;0}}&lt;a href=&quot;{{uri options=&quot;article&quot;}}#comments&quot; class=&quot;comments_counter&quot;&gt;{{$campsite-&gt;article-&gt;comment_count}}&lt;/a&gt;{{/if}}&lt;/p&gt;
{{/list_articles}}
{{set_default_section}}
&lt;/div&gt;

&lt;div id=&quot;fragment-2&quot;&gt;  {{* second tab content *}}
{{local}}
{{unset_issue}}
{{list_issues length=&quot;2&quot; order=&quot;bynumber desc&quot;}}
{{list_sections constraints=&quot;number greater 9 number smaller 70&quot;}}
  {{list_articles length=&quot;4&quot; constraints=&quot;topic is \ :ru&quot; order=&quot;bynumber desc&quot;}}
  &lt;h4&gt;&lt;a href=&quot;{{uri options=&quot;article&quot;}}&quot;&gt;{{$campsite-&gt;article-&gt;name}}&lt;/a&gt;{{if $campsite-&gt;article-&gt;has_video}}&lt;i class=&quot;ico video&quot;&gt;&lt;/i&gt;{{/if}}{{if $campsite-&gt;article-&gt;has_photo}}&lt;i class=&quot;ico photo&quot;&gt;&lt;/i&gt;{{/if}}{{if $campsite-&gt;article-&gt;has_audio}}&lt;i class=&quot;ico audio&quot;&gt;&lt;/i&gt;{{/if}}&lt;/h4&gt;
  &lt;p class=&quot;container-date&quot;&gt;{{$campsite-&gt;article-&gt;publish_date|camp_date_format:&quot;%d %M %Y.&quot;}}&lt;/p&gt;
  &lt;p&gt;{{$campsite-&gt;article-&gt;intro}}{{if $campsite-&gt;article-&gt;comment_count&gt;0}}&lt;a href=&quot;{{uri options=&quot;article&quot;}}#comments&quot; class=&quot;comments_counter&quot;&gt;{{$campsite-&gt;article-&gt;comment_count}}&lt;/a&gt;{{/if}}&lt;/p&gt;
  {{/list_articles}}
{{/list_sections}}
{{/list_issues}}
{{/local}}
&lt;/div&gt;

&lt;/div&gt;</code></pre>
<p><span id="ch050_ticker-with-jquery.xhtml"></span></p>
<h1>Ticker with jQuery</h1>
<p>Do you want a BBC-style ticker like the one on <a href="http://wadr.org/" class="uri" title="WADR">http://wadr.org/</a> driven by Newscoop? Of course you do!</p>
<p><img src="static/ticker.png" /></p>
<p>Everything important is in this code:</p>
<pre class="prettyprint linenums"><code>&lt;div id=&quot;ticker-wrapper&quot; class=&quot;no-js&quot;&gt;
 &lt;ul id=&quot;js-news&quot; class=&quot;js-hidden&quot;&gt;
  {{ list_articles length=&quot;5&quot; order=&quot;bypublishdate desc&quot; constraints=&quot;section is 5&quot; }}
   &lt;li class=&quot;news-item&quot;&gt;
    &lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot; &gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;
   &lt;/li&gt;
  {{ /list_articles }}
 &lt;/ul&gt;
&lt;/div&gt;</code></pre>
<p>This code selects the last five published articles from section number 5 and creates an unordered list of article names, also linking them to the full article page.</p>
<p>Add some jQuery magic:</p>
<pre class="prettyprint linenums"><code>$(document).ready(function(){
  $(&#39;#js-news&#39;).ticker({
    titleText: &#39;WADR Highlights&#39;
  });
});</code></pre>
<p>The engine behind this is the jQuery News Ticker (<a href="http://www.jquerynewsticker.com/" class="uri">http://www.jquerynewsticker.com/</a>), so be sure to have all necessary includes in their place, in _html-head.tpl</p>
<pre class="prettyprint linenums"><code>&lt;!-- Grab Google CDN&#39;s jQuery. fall back to local if necessary --&gt;
&lt;script src=&quot;/ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;!window.jQuery &amp;&amp; document.write(unescape(&#39;%3Cscript src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/js/jquery-1.5.1.min.js&quot;%3E%3C/script%3E&#39;))&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/js/jquery-ui-1.8.10.custom.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/js/jquery.ticker.js&quot;&gt;&lt;/script&gt;</code></pre>
<p>and also the css file that belongs to it:</p>
<pre class="prettyprint"><code> &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/css/highlights.css&quot; /&gt;</code></pre>
<p>This is of course just one of hundreds of different solutions that you can find on the Internet, so feel free (and encouraged) to explore and play with other toys!</p>
<p><span id="ch051_image-galleries-with-jquery.xhtml"></span></p>
<h1>Image galleries with jQuery</h1>
<p>This example is using a specific gallery solution working with jQuery. Once you understand the logic behind the code, you can use any gallery you want. Just download the package and add Newscoop template code where needed. This chapter will show you how it's done.</p>
<p>Our gallery example will display a number of images attached to an article in your publication. Again, you can modify the logic easily and, for example, call in one image from a list of articles instead.</p>
<p>Start with attaching a number of <em>Images</em> to an <em>Article</em>, which you want to show to the world. In this case we think of the <em>Article</em> as a container for your images. All you need to do is <em>list_article_images</em> and decide, how you want them to show up (Lightbox, Slimbox, whatever) - and that's it!</p>
<p>An important thing before you start is to decide what size (in pixels) your images and thumbnails will have. You will need these numbers set to make all images and thumbnails appear unified.</p>
<p>It's up to you to decide which tool you will use to make your images shine. In this example we will use Fancybox <em>(<a href="http://fancybox.net/" class="uri" title="Fancybox">http://fancybox.net/</a>)</em> and the jQuery plugin. But you are not limited in any way, and can choose any gallery you like - Newscoop will just provide images for your favourite plugin.</p>
<h2>Simple Article Image Gallery</h2>
<p>This type of image gallery could be used to show additional images, which are part of an <em>Article</em>, but do not fit in the main text.</p>
<p>Here's a real life example <em>(<a href="http://ganc-chas.by/by/page/history/323" class="uri" title="Image example">http://ganc-chas.by/by/page/history/323</a>)</em> of how it's done (you can copy &amp; paste it to your page, and edit it later):</p>
<pre class="prettyprint linenums"><code>{{list_article_images columns=&quot;4&quot;}}
{{if $gimme-&gt;current_list-&gt;count &gt; 1}}
  {{if $gimme-&gt;current_list-&gt;at_beginning}}
    &lt;div class=&quot;image-gallery-title&quot;&gt;Article Images&lt;/div&gt;
    &lt;div class=&quot;image-gallery-container&quot;&gt;
  {{/if}}
  {{if $gimme-&gt;image-&gt;article_index &gt; 2}}
    &lt;a href=&quot;{{uri options=&quot;image&quot;}}&quot; rel=&quot;gallery&quot; class=&quot;gallery_thumbnail&quot; title=&quot;{{$gimme-&gt;image-&gt;description|escape}}&quot;&gt;
      &lt;img src=&quot;{{uri options=&quot;image&quot;}}&amp;ImageRatio=20&quot; alt=&quot;{{$gimme-&gt;image-&gt;description|escape}}&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
    &lt;/a&gt;
  {{/if}}
  {{if $gimme-&gt;current_list-&gt;at_end}}
    &lt;/div&gt;
  {{/if}}
{{/if}}
{{/list_article_images}}

&lt;script type=&quot;text/javascript&quot;&gt;
$(document).ready(function(){

$(&quot;a.gallery_thumbnail&quot;).fancybox({
  type: &#39;image&#39;,
  titlePosition: &#39;inside&#39;,
  transitionIn: &#39;none&#39;,
  transitionOut: &#39;none&#39;,
  centerOnScroll: &#39;true&#39;
});
$(&quot;a.gallery_thumbnail&quot;).live(&quot;mouseenter&quot;,function(){$(this).animate({opacity:1},200);});
$(&quot;a.gallery_thumbnail&quot;).live(&quot;mouseleave&quot;,function(){$(this).animate({opacity:0.8},200);});

});
&lt;/script&gt;</code></pre>
<h3>Let's now take a look at parts of code:</h3>
<pre class="prettyprint linenums"><code>{{list_article_images columns=&quot;4&quot;}}
{{if $gimme-&gt;current_list-&gt;count &gt; 1}}
  {{if $gimme-&gt;current_list-&gt;at_beginning}}
    &lt;div class=&quot;image-gallery-title&quot;&gt;Article Images&lt;/div&gt;
    &lt;div class=&quot;image-gallery-container&quot;&gt;
  {{/if}}</code></pre>
<p>We want to have article images placed in 4 columns. First, we check if the <em>Article</em> has images attached. Then we provide a header for the gallery and container &lt;div&gt; element.</p>
<pre class="prettyprint linenums"><code>{{if $gimme-&gt;image-&gt;article_index &gt; 2}}
  &lt;a href=&quot;{{uri options=&quot;image&quot;}}&quot; rel=&quot;gallery&quot; class=&quot;gallery_thumbnail&quot; title=&quot;{{$gimme-&gt;image-&gt;description|escape}}&quot;&gt;
    &lt;img src=&quot;{{uri options=&quot;image&quot;}}&amp;ImageRatio=20&quot; alt=&quot;{{$gimme-&gt;image-&gt;description|escape}}&quot; width=&quot;100&quot; height=&quot;100&quot; /&gt;
  &lt;/a&gt;
{{/if}}</code></pre>
<p>In this example we will list only images with numbers 3 and higher - this is done to separate gallery images from the main article images. You can decide to have images for the gallery numbered 100 and above - it's up to you.</p>
<p>We need to provide Fancybox with a link to an original image (full size), and also a thumbnail image (<strong>&amp;ImageRatio</strong>) to show to the user. We also supply <strong>class</strong> &amp; <strong>rel</strong> names for Fancybox to define a group of image objects that should be used for the gallery. Other <em>Image</em> properties could also be included, like <em>description</em> in the above example. Finally, we close the list:<br />
</p>
<pre class="prettyprint linenums"><code>  {{if $gimme-&gt;current_list-&gt;at_end}}
    &lt;/div&gt;
  {{/if}}
{{/if}}
{{/list_article_images}}</code></pre>
<p>That's pretty much it for Newscoop. Now let's go down to the jQuery part:<br />
</p>
<pre class="prettyprint linenums"><code>&lt;script type=&quot;text/javascript&quot;&gt;
$(document).ready(function(){

$(&quot;a.gallery_thumbnail&quot;).fancybox({
  type: &#39;image&#39;,
  titlePosition: &#39;inside&#39;,
  transitionIn: &#39;none&#39;,
  transitionOut: &#39;none&#39;,
  centerOnScroll: &#39;true&#39;
});
$(&quot;a.gallery_thumbnail&quot;).live(&quot;mouseenter&quot;,function(){$(this).animate({opacity:1},200);});
$(&quot;a.gallery_thumbnail&quot;).live(&quot;mouseleave&quot;,function(){$(this).animate({opacity:0.8},200);});

});
&lt;/script&gt;</code></pre>
<p>This example assumes that you already read the Fancybox HowTo <em>(<a href="http://fancybox.net/howto" class="uri" title="Fancybox How To">http://fancybox.net/howto</a>)</em> and included all necessary jquery and fancybox libraries. The rest is pretty simple - you just need to fire up the plugin, using jquery selector (<strong>a.gallery_thumbnail</strong>) and provide it with the different options you want to have.</p>
<p>Here we also added a few lines of code to make our thumbnails look even fancier. So the final result should look like this:</p>
<p><img src="static/SCN1.PNG" /></p>
<p>And when you click on an image, you have a bigger one with a description and arrows to navigate through the others:</p>
<p><img src="static/SCN2.PNG" /></p>
<h2>Advanced Image Galleries</h2>
<p>You can also make an advanced presentation of <em>Images</em>, using a few more lines of code and plugins. The approach should be the same:</p>
<ul>
<li>Provide a list of links to full-size images (<em>&lt;a href=&quot;{{ uri options=&quot;image&quot; }}&quot;...</em>)</li>
<li>Provide a list of thumbnail images (<em>&lt;img src=&quot;{{ uri options=&quot;image&quot; }}&amp;ImageWidth=100&quot; width=&quot;100&quot; ... /&gt;</em>)</li>
</ul>
<p>For example, you can combine thumbnails + average size images + full-size images:</p>
<p><img src="static/SCN3_1.PNG" /><br />
</p>
<p><span id="ch052_calendars-with-jquery.xhtml"></span></p>
<h1>Calendars with jQuery<br />
</h1>
<p>Usually you will want to use a calendar to show a visual presentation of published articles in the archive. In Newscoop, we added a special function to provide a Calendar control, which will highlight all days that have articles (or issues) published. When a user clicks on a date, a link action fires up to open a defined URL with an additional parameter <em>date</em>. It could be used to address an archive template and sort articles according to the provided date.</p>
<p>The calendar function is based on the jQueryUI widget <strong>Datepicker</strong> (<a href="http://jqueryui.com/demos/datepicker/" class="uri" title="jQuery UI - Datepicker">http://jqueryui.com/demos/datepicker/</a>). So the first thing to do will be to include all required jQuery libraries:</p>
<pre class="prettyprint linenums"><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.11/jquery-ui.min.js&quot;&gt;&lt;/script&gt;
&lt;link type=&quot;text/css&quot; href=&quot;http://ajax.googleapis.com/ajax/dlibs/jqueryui/1.8.11/themes/base/jquery-ui.css&quot; rel=&quot;stylesheet&quot; /&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.11/i18n/jquery.ui.datepicker-ru.min.js&quot;&gt;&lt;/script&gt;</code></pre>
<p>As you can see in this example, we included all libraries from <a href="http://code.google.com/apis/libraries/devguide.html#jqueryUI">Google's CDN</a>. You can use your own custom libraries, downloaded from the jQuery site. The last one is only required if you want to show a calendar in a language other than English. By default, the Calendar will be presented in the current site language. A function detects what language the website content is, and therefore what language the Calendar will be.</p>
<p>The following construction will create a Calendar control::<br />
</p>
<pre class="prettyprint"><code>{{ calendar container=&quot;cal1Container&quot; url=&quot;/?tpl=archive.tpl&quot; style=&quot;my_calendar&quot; min_date=&quot;2009-03-01&quot; max_date=&quot;2009-03-31&quot; clickable_dates=&quot;articles&quot; }}</code></pre>
<ul>
<li>container: This attribute is mandatory. It allows you to define an unique HTML identifier (id) for the calendar container.</li>
</ul>
<ul>
<li>url: This attribute is mandatory. Define the action link of the Calendar once the user clicks a date.</li>
</ul>
<ul>
<li>clickable_dates: This attribute is optional. There are two possible values for this attribute: &quot;articles&quot; and &quot;issues&quot;, with the latter being the default. If you pass &quot;articles&quot;, the Calendar will show as highlighted all dates where at least one article is published (publish_date). If you pass &quot;issues&quot; or nothing at all, thr Calendar will show as highlighted all dates when an issue has been published.</li>
</ul>
<ul>
<li>style: This attribute is optional. Sets a custom CSS class for the calendar container. If it is not defined, the default class &quot;calendar&quot; will be used.</li>
</ul>
<ul>
<li>min_date: This attribute is optional. It sets the Calendar's minimum selectable date. The date format should be &quot;yyyy-mm-dd&quot;.</li>
</ul>
<ul>
<li>max_date: This attribute is optional. It sets the Calendar's maximum selectable date. The date format should be &quot;yyyy-mm-dd&quot;.</li>
</ul>
<p>The resulting output will be like this (remember, we included the Russian language in the example above):</p>
<p><img src="static/SCN5.PNG" /></p>
<p>You can then style the Calendar the way you want it to be (remember, we used the class name &quot;my_calendar&quot;). Also, the look is based on the UI theme that you use, so you can adjust the theme according to your needs (we used the base theme in this example).</p>
<p>The source code of the Calendar output is the following:</p>
<pre class="prettyprint linenums"><code>&lt;!-- Begin Calendar widget //--&gt;
&lt;div class=&quot;my_calendar&quot;&gt;
&lt;div id=&quot;cal1Container&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
$(function() {
  var issueDates = new Array();
  var articleDates = new Array(&quot;2009-03-27&quot;,&quot;2009-03-28&quot;);
  $.datepicker.setDefaults($.datepicker.regional[&quot;en&quot;]);
  $(&quot;#cal1Container&quot;).datepicker({
    dateFormat: &quot;yy-mm-dd&quot;,
    minDate: &quot;2009-03-01&quot;,
    maxDate: &quot;2009-03-31&quot;,
    beforeShowDay: function(displayedDate) {
                  var dDate = &quot;&quot;;
                  var dDay = displayedDate.getDate();
                  var dMonth = displayedDate.getMonth() + 1;

                  if (dDay &lt; 10) dDay = &quot;0&quot; + dDay;
                  if (dMonth &lt; 10) dMonth = &quot;0&quot; + dMonth;
                  dDate = displayedDate.getFullYear() + &quot;-&quot; + dMonth + &quot;-&quot; + dDay;

                  for (i = 0; i &lt; issueDates.length; i++) {
                      if (dDate == issueDates[i]) {
                          return [false,&quot;ui-state-active&quot;,&quot;&quot;];
                      }
                  }
                  for (i = 0; i &lt; articleDates.length; i++) {
                      if (dDate == articleDates[i]) {
                          return [true, &quot;ui-state-active&quot;, &quot;&quot;];
                      }
                  }
                  return [false, &quot;&quot;]; // disable all other days
              },onSelect: function(selectedDate) {
                  var contentDates = new Array(&quot;2009-03-27&quot;,&quot;2009-03-28&quot;);
                  for (var i in contentDates) {
                      if (selectedDate == contentDates[i]) {
                          var linkTo = &quot;/?tpl=archive.tpl&amp;date=&quot; + selectedDate;
                          window.location = linkTo;
                      }
                  }
              }});
});
&lt;/script&gt;
&lt;/div&gt;
&lt;!--End Calendar widget //--&gt;</code></pre>
<h2>Extending functionality<br />
</h2>
<p>You can see that all the hard work of creating the visual presentation is given to jQuery UI Datepicker. All we need to do is provide dates in correct format. You can take this approach and provide any data you want. Just note that it should be readable by the plugin.</p>
<p>Of course, it is much more easier to use a Calendar function supplied in Newscoop, but sometimes you will need more. Here is how we made a Calendar of PDF versions in the archive. First we need to provide variables in JSON format. For that purpose we have made a small template (_json-pdf-items.tpl):<br />
</p>
<pre class="prettyprint linenums"><code>{
&quot;pdf&quot;:{
  {{list_articles constraints=&quot;type is pdf issue greater 1 section is 300 publish_date greater 1900-01-01&quot;}}
    &quot;{{$gimme-&gt;article-&gt;publish_date|date_format:&quot;%Y-%m-%d&quot;}}&quot;:{
      &quot;link&quot;:
        &quot;{{list_article_attachments length=&quot;1&quot;}}http://{{$gimme-&gt;publication-&gt;site}}{{uri options=&quot;articleAttachment&quot;}}{{/list_article_attachments}}&quot;,
        &quot;title&quot;:&quot; {{$gimme-&gt;issue-&gt;name}}({{$gimme-&gt;issue-&gt;number}})  {{$gimme-&gt;issue-&gt;publish_date|camp_date_format:&quot;%d.%m.%Y&quot;}} -  pdf&quot;}{{if !$gimme-&gt;current_list-&gt;at_end}},{{/if}}{{/list_articles}}
      }
}</code></pre>
<p>Next, we need to read variables from that template and save them for jQuery. Actually, we use a cron-job to grab the data and put it into the .json file. But it could also be done directly, addressing the template:<br />
</p>
<pre class="prettyprint linenums"><code>/* Datepickers */
var pdf_date;
$.ajax({async:false,dataType:&#39;json&#39;,url:&#39;/?tpl=_json-pdf-items.tpl&#39;,success: function(d){pdf_date=d;}});</code></pre>
<p>The contents of the JSON-formatted file will be something like this:</p>
<pre class="prettyprint linenums"><code>{
  &quot;pdf&quot;:{
    &quot;2010-06-29&quot;:{&quot;link&quot;:&quot;http://ganc-chas.by/attachment/000000026.pdf&quot;,&quot;title&quot;:&quot; 25(391)  17.06.2010 -  pdf&quot;},
    &quot;2010-06-04&quot;:{&quot;link&quot;:&quot;http://ganc-chas.by/attachment/000000025.pdf&quot;,&quot;title&quot;:&quot; 23(389)  04.06.2010 -  pdf&quot;}
  }
}</code></pre>
<p>And here's a jQuery part of the stuff (we use a slightly modified version which could be found at <a href="http://ganc-chas.by/templates/js/functions.js" class="uri">http://ganc-chas.by/templates/js/functions.js</a>):<br />
</p>
<pre class="prettyprint linenums"><code>// PDF Archive Calendar
$(&quot;#PDFArchive&quot;).datepicker({
  changeMonth: true,
  changeYear: true,
  beforeShowDay: function(d){
    var date = $.datepicker.formatDate(&quot;yy-mm-dd&quot;,d);
    show=false;;caption=&quot;&quot;;link=&quot;#&quot;;
    if (pdf_date.pdf[date]){
      show=true;
      style=&quot;ui-state-attention active&quot;;
      caption=pdf_date.pdf[date].title;
      link=pdf_date.pdf[date].link;
    }
    return [show,style,caption,link];
  }
});</code></pre>
<p>The final output will be a small nifty Calendar containing all your PDF versions (you can see it in action at <a href="http://ganc-chas.by/by/page/archive/" class="uri">http://ganc-chas.by/by/page/archive/</a>):</p>
<p><img src="static/SCN6.PNG" /></p>
<p><em>Calendar interface using jQuery.</em></p>
<p><span id="ch053_using-polls-with-ajax.xhtml"></span></p>
<h1>Using polls with AJAX</h1>
<p>In this chapter you will find an advanced way to use the polls provided with Newscoop. Using AJAX and jQuery, the user interaction becomes smooth, and no visible page reload is required to add a vote and display the poll results. Any modern jQuery version does the trick, and needs to be called in the header of the page. You can find the documentation of the original templates on the Sourcefabric website, in the wiki.</p>
<p>First, we will need to list the current Poll, in our case, the latest one. When loading the page, no poll action has happened yet (meaning: voting) so we display the poll. And most importantly, a DIV container should be defined, which will be used to send and receive data via AJAX.</p>
<pre class="prettyprint linenums"><code>{{list_polls length=&quot;1&quot; order=&quot;bynumber desc&quot;}}
{{if !$gimme-&gt;poll_action-&gt;defined}}
  &lt;p class=&quot;title&quot;&gt;Poll of the day&lt;/p&gt;
  &lt;p class=&quot;poll-question&quot;&gt;{{$gimme-&gt;poll-&gt;question}}&lt;/p&gt;
  &lt;div id=&quot;poll&quot; class=&quot;poll&quot;&gt;
{{/if}}
...</code></pre>
<p>Next we need to check if the poll is still open to votes, and if no data is sent yet. We do not use a submit_button, as the data will be sent by an AJAX call.</p>
<pre class="prettyprint linenums"><code>{{if $gimme-&gt;poll-&gt;is_votable &amp;&amp; !$gimme-&gt;poll_action-&gt;defined}}
 {{poll_form template=&quot;poll.tpl&quot; submit_button=false}}
  {{list_poll_answers order=&quot;byOrder asc&quot;}}
    {{pollanswer_edit}}{{$gimme-&gt;pollanswer-&gt;answer}}&lt;br /&gt;
  {{/list_poll_answers}}
 &lt;input type=&quot;submit&quot; id=&quot;submit_poll&quot; class=&quot;button&quot; value=&quot;I think so!&quot; /&gt;
 {{/poll_form}}
...</code></pre>
<p>The same template is used to provide output, if the data was sent by the user.</p>
<pre class="prettyprint linenums"><code>{{else}}
  &lt;p&gt;Voted: {{$gimme-&gt;poll-&gt;votes}}&lt;/p&gt;
  {{list_poll_answers order=&quot;byOrder asc&quot;}}
    &lt;div class=&quot;answer&quot;&gt;{{$gimme-&gt;pollanswer-&gt;percentage|string_format:&quot;%d&quot;}}%: {{ $gimme-&gt;pollanswer-&gt;answer }}
      &lt;div style=&quot;width:{{$gimme-&gt;pollanswer-&gt;percentage|string_format:&quot;%d&quot;}}%;background:#5d4040;&quot;&gt;&amp;nbsp;&lt;/div&gt;
    &lt;/div&gt;
  {{/list_poll_answers}}
{{/if}}</code></pre>
<p>And finally: the closing tag.</p>
<pre class="prettyprint linenums"><code>...
{{if !$gimme-&gt;poll_action-&gt;defined}}
  &lt;/div&gt;
{{/if}}
{{/list_polls}}</code></pre>
<p>The jQuery part of the code is pretty small. We use $.post to parse the form data, send it via AJAX to the server, and place the resulting output where it should be (&lt;div id=&quot;poll&quot;&gt;).</p>
<pre class="prettyprint linenums"><code>$(document).ready(function(){
  $(&#39;#submit_poll&#39;).click(function(){
    $.post(
      $(&#39;form[name=poll]&#39;).attr(&quot;action&quot;),
      $(&#39;form[name=poll]&#39;).serialize(),
      function(data){$(&#39;#poll&#39;).html(data);
    });
    return false;
  });
});</code></pre>
<p>Below you can see the entire template poll.tpl, which you can include in your page.</p>
<pre class="prettyprint linenums"><code>{{list_polls length=&quot;1&quot; order=&quot;bynumber desc&quot;}}
{{if !$gimme-&gt;poll_action-&gt;defined}}
  &lt;p class=&quot;title&quot;&gt;Poll of the day&lt;/p&gt;
  &lt;p class=&quot;poll-question&quot;&gt;{{$gimme-&gt;poll-&gt;question}}&lt;/p&gt;
  &lt;div id=&quot;poll&quot; class=&quot;poll&quot;&gt;
{{/if}}
{{if $gimme-&gt;poll-&gt;is_votable &amp;&amp; !$gimme-&gt;poll_action-&gt;defined}}
  {{poll_form template=&quot;poll.tpl&quot; submit_button=false}}
  {{list_poll_answers order=&quot;byOrder asc&quot;}}
    {{pollanswer_edit}}{{$gimme-&gt;pollanswer-&gt;answer}}&lt;br /&gt;
  {{/list_poll_answers}}
  &lt;input type=&quot;submit&quot; id=&quot;submit_poll&quot; class=&quot;button&quot; value=&quot;I think so!&quot; /&gt;
  {{/poll_form}}
{{else}}
  &lt;p&gt;Voted: {{$gimme-&gt;poll-&gt;votes}}&lt;/p&gt;
  {{list_poll_answers order=&quot;byOrder asc&quot;}}
    &lt;div class=&quot;answer&quot;&gt;{{$gimme-&gt;pollanswer-&gt;percentage|string_format:&quot;%d&quot;}}%: {{ $gimme-&gt;pollanswer-&gt;answer }}
      &lt;div style=&quot;width:{{$gimme-&gt;pollanswer-&gt;percentage|string_format:&quot;%d&quot;}}%;background:#5d4040;&quot;&gt;&amp;nbsp;&lt;/div&gt;
    &lt;/div&gt;
  {{/list_poll_answers}}
{{/if}}
{{if !$gimme-&gt;poll_action-&gt;defined}}
  &lt;/div&gt;
{{/if}}
{{/list_polls}}

&lt;script type=&quot;text/javascript&quot;&gt;
$(document).ready(function(){
  $(&#39;#submit_poll&#39;).click(function(){
    $.post(
      $(&#39;form[name=poll]&#39;).attr(&quot;action&quot;),
      $(&#39;form[name=poll]&#39;).serialize(),
      function(data){$(&#39;#poll&#39;).html(data);
    });
    return false;
  });
});
&lt;/script&gt;</code></pre>
<p><span id="ch054_widgets-for-youtube-vimeo-flickr.xhtml"></span></p>
<h1>Widgets: YouTube, Vimeo, Twitter, Flickr &amp; Co.</h1>
<p>If you want to include streams from Twitter, Flickr or Vimeo, relax. Just copy and paste their code into your templates. No magic. You don't need to install any widgets or plugins to do this. Just use their embed code. If you want to embed a YouTube video, just copy the embed code into your WYSIWYG editor and save. Done.</p>
<p>Now we cleared the air, and can dive into more interesting ideas...</p>
<h2>Twitter Feed with custom Hashtag / Search for each article</h2>
<p>Wouldn't it be cool to have a Twitter Feed for each article following a certain Hashtag or search word related to the story, like #sourcefabric, #climate change, #wadr, #elvis (these are examples of what your journalists would type in).</p>
<p><img src="static/screen-twitterwidget.png" /></p>
<p>The journalist can set the Hashtag or search term in the Article Edit screen. The template will check if the field is empty, and then either include the Twitter Feed or not. In our example, the Article Field for the Hashtag is called <em>twittersearch</em> and needs to be added in the Newscoop administration interface under <strong>Configure Article Types</strong>.</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;twittersearch|strip_tags|trim !== &quot;&quot; }}
&lt;script src=&quot;http://widgets.twimg.com/j/2/widget.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
new TWTR.Widget({
  version: 2,
  type: &#39;search&#39;,
  search: &#39;\&quot;{{ $gimme-&gt;article-&gt;twittersearch }}\&quot;&#39;,
  interval: 6000,
  title: &#39;{{ $gimme-&gt;publication-&gt;name }} Twitter Service&#39;,
  subject: &#39;follow: {{ $gimme-&gt;article-&gt;twittersearch }}&#39;,
  width: 250,
  height: 300,
  theme: {
    shell: {
      background: &#39;#8ec1da&#39;,
      &#39;#ffffff&#39;
    },
    tweets: {
      background: &#39;#ffffff&#39;,
      &#39;#444444&#39;,
      links: &#39;#1985b5&#39;
    }
  },
  features: {
    scrollbar: false,
    loop: true,
    live: true,
    hashtags: true,
    timestamp: true,
    avatars: true,
    toptweets: true,
    behavior: &#39;default&#39;
  }
}).render().start();
&lt;/script&gt;
{{ /if }}</code></pre>
<h2>Video embedding in custom sizes</h2>
<p>You can copy and paste embed code into your article without any problems. If you follow the examples below, you will get an idea how you can have more control over the layout in the template - and possibly embed the same video in different sizes, depending on where it is shown. Also, you might not want to include embed code inside the article body for various reasons, like delivering to different platforms and devices, or copyright.</p>
<p><img src="static/screen-vimeowidget.png" /></p>
<h3>Vimeo video embed from video ID</h3>
<p>In this example the journalist copies and pastes the video ID from the vimeo URL into the article. The template will check if a video ID is given, and then create the embed code accordingly - you can control the size in the template. If you take the video embed code from vimeo, it starts like this:</p>
<pre class="prettyprint"><code>&lt;iframe src=&quot;http://player.vimeo.com/video/12790651?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;400&quot; height=&quot;225&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</code></pre>
<p>If you compare this with the URL, you see that the video ID is the last part of the URL:</p>
<pre><code>http://vimeo.com/12790651</code></pre>
<p>The value the journalist has added to the article is 12790651 in the field <em>vimeoid</em>. Now you can create the embed code like this:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;vimeoid|strip_tags|trim !== &quot;&quot; }}
&lt;iframe src=&quot;http://player.vimeo.com/video/{{ $gimme-&gt;article-&gt;vimeoid }}?title=0&amp;amp;byline=0&amp;amp;portrait=0&quot; width=&quot;300&quot; height=&quot;180&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;
&lt;em&gt;&lt;a href=&quot;http://vimeo.com/{{ $gimme-&gt;article-&gt;vimeoid }}&quot; target=&quot;_blank&quot;&gt;Watch video in separate window&lt;/a&gt;&lt;/em&gt;
{{ /if }}</code></pre>
<p>Make sure that the URL in the iframe is on one line.</p>
<h3>YouTube video embed from URL</h3>
<p>For this example, journalists will copy and paste the share URL from YouTube into an article field of their story. This way you can display Youtube videos on your site, but without your journalists embedding code in the WYSIWYG editor field. (This is for various different reasons; one of them might be the custom size of your space dedicated to the YouTube embed). You can use the link which YouTube offers by default (click on &quot;share&quot; under the video):</p>
<pre><code>http://youtu.be/NokMkmthduY</code></pre>
<p>What you need to do then is to extract just the important part <em>NokMkmthduY</em> from the field and put it in a wrapper with predefined dimensions, transparency options etc. This is how you can do it:</p>
<pre class="prettyprint linenums"><code>&lt;script type=&quot;text/javascript&quot;&gt;
var embedParts=&quot;{{ $gimme-&gt;article-&gt;youtubeurl }}&quot;.split(&quot;/&quot;);
document.write(&quot;&lt;iframe title=\&quot;YouTube video player\&quot; width=\&quot;435\&quot; height=\&quot;356\&quot; src=\&quot;http://www.youtube.com/embed/&quot;+embedParts[3]+&quot;?wmode=opaque\&quot; frameborder=\&quot;0\&quot; allowfullscreen&gt;&lt;/iframe&gt;&quot;);
&lt;/script&gt;</code></pre>
<h2>Custom flickr Stream for individual articles</h2>
<p>Imagine a journalist writes an article about an event which has its own flickr account. The widget below allows you to call in the latest images from that flickr stream and display them alongside the article. This widget does not show up if a flickr name is not provided by the journalist.</p>
<p><img src="static/screen-flickrwidget.png" /></p>
<p>In our example, the Article Field for the flickr user name is called <em>flickrname</em> and needs to be added in the Newscoop administration interface under <strong>Configure Article Types</strong>.</p>
<p>Firstly, the template checks if the name is set, and if so then (prior to the PHP code) the value is assigned to a variable of the same name. This is necessary because inside PHP the environment has no access to the $gimme object. The styling in this example is included in the code, but you can place it elsewhere. If you want to change the number of images, you can do this inside the widget by changing $rows and $columns.</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;flickrname|strip_tags|trim !== &quot;&quot; }}
&lt;style&gt;
.widget-flickr-wrapper, .widget-flickr-wrapper table { width: 100%; }
.widget-flickr-wrapper table,
.widget-flickr-wrapper table td img { background: #f0f0f0; border: 1px solid #e7e7e7; }
.widget-flickr-wrapper table td { padding: 10px;  }
&lt;/style&gt;
&lt;h3&gt;Latest images from &amp;raquo;{{ $gimme-&gt;article-&gt;flickrname }}&amp;laquo;&lt;/h3&gt;
{{ assign var=&quot;flickrname&quot; value=`$gimme-&gt;article-&gt;flickrname` }}
{{ php }}
$rows = 4;
$colums = 3;
$api = &#39;40a7ac8e64e9bc034d0f72b9a64e1f3a&#39;;
$username = $this-&gt;get_template_vars(&#39;flickrname&#39;);
$total = $rows * $colums;
// get user ID from user name
$user_id = simplexml_load_file(&quot;http://flickr.com/services/rest/?method=flickr.people.findByUsername&amp;api_key=&quot;.$api.&quot;&amp;username=&quot;.$username)-&gt;user[&#39;nsid&#39;];
// get images from user ID
$xml = simplexml_load_file(&quot;http://flickr.com/services/rest/?method=flickr.photos.search&amp;api_key=&quot;.$api.&quot;&amp;user_id=&quot;.$user_id.&quot;&amp;per_page=&quot;.$total);
if (isset($xml-&gt;photos)) {
  $photos = array();
  foreach ($xml-&gt;photos-&gt;photo as $photo) {
    $photos[] = array(
      &#39;src&#39; =&gt; &quot;http://farm1.static.flickr.com/&quot;.$photo[&#39;server&#39;].&quot;/&quot;.$photo[&#39;id&#39;].&quot;_&quot;.$photo[&#39;secret&#39;].&quot;_m.jpg&quot;,
      &#39;link&#39; =&gt; &quot;http://www.flickr.com/photos/&quot;.$user_id.&quot;/&quot;.$photo[&#39;id&#39;],
      &#39;title&#39; =&gt; $photo[&#39;title&#39;]
    );
  }
  echo &quot;&lt;div class=\&quot;widget-flickr-wrapper\&quot;&gt;\n&lt;table border=\&quot;0\&quot; cellpadding=\&quot;0\&quot; cellspacing=\&quot;0\&quot;&gt;\n&quot;;
  for ($i = 0; $i &lt; $rows; $i++) {
    echo &quot;&lt;tr&gt;\n&quot;;
    for ($j = 0; $j &lt; $colums; $j++) {
      $index = $colums * $i + $j;
      if (isset($photos[$index])) {
        $photo = $photos[$index];
        echo &quot;&lt;td&gt;\n&lt;div class=\&quot;widget-flickr-thumb\&quot;&gt;\n&lt;a href=\&quot;&quot;.$photo[&#39;link&#39;].&quot;\&quot; target=\&quot;_blank\&quot;&gt;&lt;img src=\&quot;&quot;.$photo[&#39;src&#39;].&quot;\&quot; height=\&quot;75\&quot; width=\&quot;75\&quot; alt=\&quot;&quot;.$photo[&#39;title&#39;].&quot;\&quot; /&gt;&lt;/a&gt;\n&lt;/div&gt;\n&lt;/td&gt;\n&quot;;
      } else {
        echo &quot;&lt;td&gt;&amp;nbsp;&lt;/td&gt;\n&quot;;
      }
    }
    echo &quot;&lt;/tr&gt;\n&quot;;
  }
  echo &quot;&lt;/table&gt;\n&lt;/div&gt;\n&quot;;
}
{{ /php }}
{{ /if }}</code></pre>
<p><span id="ch055_profile-pictures-gravatar-facebook-twitter.xhtml"></span></p>
<h1>Profile pictures: Gravatar, Facebook, Twitter</h1>
<p>Displaying profile pictures alongside comments can make your article a more personal and engaging space. Below you can find ways to call in images from Gravatar, Facebook or Twitter.</p>
<h3>Gravatar</h3>
<p>Gravatar is a widely used service, providing profile images based on an e-mail address. You can use this service in comments to provide images alongside a comment. If an email is given by the user, the standard image (80 x 80 pixel) is retrieved by calling PHP from the template like this:</p>
<pre class="prettyprint linenums"><code>{{ assign var=&quot;profile_email&quot; value=`$gimme-&gt;comment-&gt;reader_email` }}
{{ php }}
$profile_email = $this-&gt;get_template_vars(&#39;profile_email&#39;);
print &quot;&lt;img src=\&quot;http://www.gravatar.com/avatar/&quot;.md5( strtolower( trim( $profile_email ) ) ).&quot;\&quot; /&gt;&quot;;
{{ /php }}</code></pre>
<p>If the user does not have a Gravatar account, the default Gravatar logo is displayed. You can change the size of the image provided by adding a parameter as shown below. Gravatar images are always square. The following example will deliver an image which is 200 x 200 pixels in size:</p>
<pre class="prettyprint linenums"><code>{{ assign var=&quot;profile_email&quot; value=`$gimme-&gt;comment-&gt;reader_email` }}
{{ php }}
$profile_email = $this-&gt;get_template_vars(&#39;profile_email&#39;);
print &quot;&lt;img src=\&quot;http://www.gravatar.com/avatar/&quot;.md5( strtolower( trim( $profile_email ) ) ).&quot;?s=200\&quot; /&gt;&quot;;
{{ /php }}</code></pre>
<h3>Facebook</h3>
<p>Calling an image from Facebook is very straightforward. The example below calls in the Sourcefabric image:</p>
<pre><code>&lt;img src=\&quot;http://graph.facebook.com/Sourcefabric/picture\&quot; /&gt;</code></pre>
<p>In order to make this work with comments, you could use the <em>nickname</em> input field and label it something like &quot;<em>Facebook name (optional)</em>&quot;. The code below checks if an image is available on Facebook, and if not, does not display anything.</p>
<pre class="prettyprint linenums"><code>{{ assign var=&quot;profile_fbname&quot; value=`$gimme-&gt;comment-&gt;nickname` }}
{{ php }}
$profile_fbname = $this-&gt;get_template_vars(&#39;profile_fbname&#39;);
if (!preg_match(&quot;/error/i&quot;, file_get_contents(&quot;http://graph.facebook.com/&quot;.$profile_fbname.&quot;/picture&quot;))) {
  print &quot;&lt;img src=\&quot;http://graph.facebook.com/&quot;.$profile_fbname.&quot;/picture\&quot; /&gt;&quot;;
}
{{ /php }}</code></pre>
<p>If you are providing a reader registration form for your publication, you can add a custom field to the user profile for the Facebook name. In the template you can check if the user is logged in, and call the image from the Facebook name provided in the user profile.</p>
<h3>Twitter</h3>
<p>The easiest way to retrieve the profile image from Twitter goes like this:</p>
<pre><code>&lt;img src=&quot;http://img.tweetimag.es/i/Sourcefabric&quot; /&gt;</code></pre>
<p>You can make this work with comments by using the <em>nickname</em> input field and labelling it something like &quot;Twitter name (optional)&quot;. To display the image, include the following code:</p>
<pre class="prettyprint linenums"><code>{{ assign var=&quot;profile_twname&quot; value=`$gimme-&gt;comment-&gt;nickname` }}
{{ php }}
$profile_twname = $this-&gt;get_template_vars(&#39;profile_twname&#39;);
print &quot;&lt;img src=\&quot;http://img.tweetimag.es/i/&quot;. $profile_twname .&quot;\&quot; /&gt;&quot;;
{{ /php }}</code></pre>
<p>You might want to check if the name provided actually does exist:</p>
<pre class="prettyprint linenums"><code>{{ assign var=&quot;profile_twname&quot; value=`$gimme-&gt;comment-&gt;nickname` }}
{{ php }}
$profile_twname = $this-&gt;get_template_vars(&#39;profile_twname&#39;);
$api_call = &quot;http://twitter.com/users/show/&quot;.$profile_twname.&quot;.json&quot;;
$results = json_decode(file_get_contents($api_call));
if (!empty($results)) {
print &quot;&lt;img src=\&quot;&quot;.$results-&gt;profile_image_url.&quot;\&quot; /&gt;&quot;;
}
{{ /php }}</code></pre>
<p><span id="ch056_combining-newscoop-and-soundcloud.xhtml"></span></p>
<h1>Combining Newscoop and SoundCloud</h1>
<p>Newscoop 4 includes a plugin for uploading, managing and displaying sound clips which are stored on the <strong>SoundCloud</strong> service (<a href="http://soundcloud.com/" class="uri" title="SoundCloud">http://soundcloud.com/</a>). This function was first implemented by Sourcefabric for its partner, <strong>West Africa Democracy Radio</strong> (<a href="http://www.wadr.org" class="uri">http://www.wadr.org</a>), a news and talk radio station which provides programming to 30 affiliates in West Africa. WADR creates 5-6 hours per day of original content, and all of this content is uploaded to SoundCloud.</p>
<p>There were three major benefits for WADR in using SoundCloud as a distribution channel.</p>
<ul>
<li>The SoundCloud distribution network is fast, so listeners do not have to wait a long time for files to download</li>
<li>The SoundCloud players allow third parties to embed shows and clips on blogs and other websites, thus allowing WADR to reach a larger audience than it would if the clips were stored exclusively on its own site</li>
<li>SoundCloud's paid premium accounts allow for a large amount of items to be stored on the service, and the prices were competitive with other hosted solutions</li>
</ul>
<p>Here is a diagram showing the workflow stages for technical and editorial staff. The first shows workflow for technical staff:</p>
<p><img src="static/soundcloud-technical-workflow.jpg" /><br />
</p>
<p>On the editorial side, editors make use of the SoundCloud plugin to attach uploaded clips to their articles:</p>
<p><img src="static/soundcloud-editorial-workflow_1.jpg" /><br />
</p>
<h3>Using SoundCloud in your templates</h3>
<p>Once SoundCloud tracks are uploaded and attached to articles in Newscoop, they can then be called by the templates just like any other content on the site. The following example lists any SoundCloud tracks that have been attached to an article and calls the SoundCloud player.</p>
<p>This directive gets the track's secret URI, which is then passed to the SoundCloud player for playing out the track:</p>
<pre class="prettyprint linenum"><code>{{ $soundcloud-&gt;track.secret_uri }}</code></pre>
<p>This directive tells Newscoop to list the available SoundCloud tracks for the given article:</p>
<pre class="prettyprint"><code>{{ list_soundcloud_tracks article=$gimme-&gt;article-&gt;number }}</code></pre>
<p>Here is the entire template for listing the available tracks for the article, calling the SoundCloud player, and setting up the player for the track:</p>
<pre class="prettyprint linenums"><code>{{ list_soundcloud_tracks article=$gimme-&gt;article-&gt;number }}
&lt;object height=&quot;81&quot; width=&quot;100%&quot;&gt;
&lt;param name=&quot;wmode&quot; value=&quot;transparent&quot;&gt;
&lt;param name=&quot;movie&quot; value=&quot;http://player.soundcloud.com/player.swf?url={{ $soundcloud-&gt;track.secret_uri }}&amp;amp;show_comments=true&amp;amp;auto_play=false&amp;amp;&gt;&lt;/param&gt;
&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;/param&gt;
&lt;embed allowscriptaccess=&quot;always&quot; height=&quot;81&quot; src=&quot;http://player.soundcloud.com/player.swf?url={{ $soundcloud-&gt;track.secret_uri }}&amp;amp;show_comments=true&amp;amp;auto_play=false&amp;amp; type=&quot;application/x-shockwave-flash&quot; width=&quot;100%&quot;&gt;&lt;/embed&gt;
&lt;/object&gt;
{{ /list_soundcloud_tracks }}</code></pre>
<h2>Working With SoundCloud Sets</h2>
<p>SoundCloud can also prepare and play groups of tracks (like playlists), which it calls sets. In the WADR project, every program has a set player, and then every individual broadcast is added to the set, with the newest broadcast presented at the top of the set.</p>
<p>For its premium customers, SoundCloud provides a special Set Player which can be embedded instead of a track player. The premium player also allows custom artwork and dimensions. Here is an example of how Newscoop works with a SoundCloud Mini Player which handles a set:</p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;miniPlayer&quot;&gt;
&lt;object height=&quot;300&quot; width=&quot;300&quot;&gt;
{{ if $gimme-&gt;language-&gt;english_name == &quot;English&quot; }}
&lt;param name=&quot;movie&quot; value=&quot;http://player.soundcloud.com/player.swf?url=http%3A%2F%2Fapi.soundcloud.com%2Fplaylists%2F662124&amp;amp;auto_play=false&amp;amp;player_type=artwork&amp;amp;&gt;&lt;/param&gt;
&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;/param&gt;
&lt;param name=&quot;wmode&quot; value=&quot;window&quot;&gt;&lt;/param&gt;
&lt;embed wmode=&quot;window&quot; allowscriptaccess=&quot;always&quot; height=&quot;300&quot; src=&quot;http://player.soundcloud.com/player.swf?url=http%3A%2F%2Fapi.soundcloud.com%2Fplaylists%2F662124&amp;amp;auto_play=false&amp;amp;player_type=artwork&amp;amp; type=&quot;application/x-shockwave-flash&quot; width=&quot;300&quot;&gt;&lt;/embed&gt;
{{ else }}
&lt;param name=&quot;movie&quot; value=&quot;http://player.soundcloud.com/player.swf?url=http%3A%2F%2Fapi.soundcloud.com%2Fplaylists%2F714819&amp;amp;auto_play=false&amp;amp;player_type=artwork&amp;amp;&gt;&lt;/param&gt; &lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;/param&gt; &lt;embed allowscriptaccess=&quot;always&quot; height=&quot;300&quot; src=&quot;http://player.soundcloud.com/player.swf?url=http%3A%2F%2Fapi.soundcloud.com%2Fplaylists%2F714819&amp;amp;auto_play=false&amp;amp;player_type=artwork&amp;amp; type=&quot;application/x-shockwave-flash&quot; width=&quot;300&quot;&gt;&lt;/embed&gt;
{{ /if }}
&lt;/object&gt;
&lt;/div&gt;</code></pre>
<p>For further reference, the SoundCloud API documentation is available at:</p>
<p><a href="http://developers.soundcloud.com/docs/api" class="uri">http://developers.soundcloud.com/docs/api</a></p>
<p><span id="ch057_working-with-facebook.xhtml"></span></p>
<h1>Working with Facebook</h1>
<p>It's very easy to integrate Facebook's social plugins with Newscoop pages. In most cases, it's a matter of adding a few lines of the code Facebook provides.</p>
<p>Most of the features that Facebook provides can be implemented in two different ways: the classic way using the &lt;iframe&gt; tag, and the modern way using JavaScript and XFBML. The new way of implementing Facebook features has just two lines of code:</p>
<pre class="prettyprint linenums"><code>&lt;script src=&quot;http://connect.facebook.net/en_US/all.js#xfbml=1&quot;&gt;&lt;/script&gt;
&lt;fb:facepile href=&quot;example.com&quot; width=&quot;200&quot; max_rows=&quot;1&quot;&gt;&lt;/fb:facepile&gt;</code></pre>
<h2>Making your page look good in Facebook using Open Graph Protocol</h2>
<p>Open Graph Protocol makes sure your Newscoop-powered pages are handled by Facebook in the correct way. If they are implemented right, they can be used on Facebook profiles under the &quot;Likes and Interests&quot; section.</p>
<p>You'll need to add Open Graph protocol &lt;meta&gt; tags and the <em>Like</em> button to your header template in order to turn your pages into graph objects. The example below shows which &lt;meta&gt; tags can be used, and what their content should be.</p>
<pre class="prettyprint linenums"><code>&lt;title&gt;{{ if $gimme-&gt;article-&gt;defined }}{{ $gimme-&gt;article-&gt;name }} | Your Site
{{ else }}Your Site
{{ /if }}
&lt;/title&gt;
{{ if $gimme-&gt;article-&gt;defined }}
&lt;meta property=&quot;og:title&quot; content=&quot;{{$gimme-&gt;article-&gt;name|html_entity_decode|regex_replace:&#39;/&amp;(.*?)quo;/&#39;:&#39;&amp;quot;&#39;}}&quot; /&gt;
&lt;meta property=&quot;og:type&quot; content=&quot;article&quot; /&gt;
&lt;meta property=&quot;og:url&quot; content=&quot;http://{{ $gimme-&gt;publication-&gt;site }}{{ uri }}&quot; /&gt;
&lt;meta property=&quot;og:site_name&quot; content=&quot;YourSite.com&quot; /&gt;
{{ if $gimme-&gt;article-&gt;type_name == &quot;news&quot; }}
  &lt;meta property=&quot;og:description&quot; content=&quot;{{$gimme-&gt;article-&gt;deck|strip_tags:false|strip|escape:&#39;html&#39;:&#39;utf-8&#39; }}&quot; /&gt;
{{ elseif $gimme-&gt;article-&gt;type_name == &quot;show&quot; }}
  &lt;meta property=&quot;og:description&quot; content=&quot;{{$gimme-&gt;article-&gt;short_description|strip_tags:false|strip|escape:&#39;html&#39;:&#39;utf-8&#39; }}&quot; /&gt;
{{ /if }}
{{ list_article_images }}
&lt;meta property=&quot;og:image&quot; content=&quot;{{ $gimme-&gt;article-&gt;image-&gt;imageurl }}&quot; /&gt;
{{ /list_article_images }}
{{ if $gimme-&gt;prev_list_empty }}
&lt;meta property=&quot;og:image&quot; content=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/assets/images/logo.png&quot; /&gt;
{{ /if }}
{{ /if }}</code></pre>
<p>We've set up an IF statement that first handles whether an article has been defined. In the first &lt;meta&gt; tag, we're doing a few things to clean up the text and get it ready for Facebook:</p>
<pre class="prettyprint"><code>&lt;meta property=&quot;og:title&quot; content=&quot;{{$gimme-&gt;article-&gt;name|html_entity_decode|regex_replace:&#39;/&amp;(.*?)quo;/&#39;:&#39;&amp;quot;&#39;}}&quot; /&gt;</code></pre>
<p>We're combining three things together in this meta tag:</p>
<ul>
<li>a directive to get the article name: $gimme-&gt;article-&gt;name</li>
<li>a Smarty function to decode the HTML entity</li>
<li>a Smarty function to replace any illegal characters</li>
</ul>
<p>The next one is pretty clear. Our Open Graph type is an article:</p>
<pre class="prettyprint"><code>&lt;meta property=&quot;og:type&quot; content=&quot;article&quot; /&gt;</code></pre>
<p>The next meta tag is for the URL:</p>
<pre class="prettyprint"><code>&lt;meta property=&quot;og:url&quot; content=&quot;http://{{ $gimme-&gt;publication-&gt;site }}{{ uri }}&quot; /&gt;</code></pre>
<p>The og:site tag is really straightforward:</p>
<pre class="prettyprint"><code>&lt;meta property=&quot;og:site_name&quot; content=&quot;YourSite.com&quot; /&gt;</code></pre>
<p>The og:description can be kind of complicated. In this case, it's conditional depending on the article type. If the article type is &quot;news&quot;, it will display one description from the <em>deck</em> field, but if the article type is &quot;show&quot; the description will be different, taken from the <em>short_description</em> field. In the case of &quot;news&quot;, it strips out any illegal characters from the <em>deck</em> field and uses the result as what Open Graph Protocol calls <em>content</em>:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;type_name == &quot;news&quot; }}
  &lt;meta property=&quot;og:description&quot; content=&quot;{{$gimme-&gt;article-&gt;deck|strip_tags:false|strip|escape:&#39;html&#39;:&#39;utf-8&#39; }}&quot; /&gt;
{{ elseif $gimme-&gt;article-&gt;type_name == &quot;show&quot; }}
  &lt;meta property=&quot;og:description&quot; content=&quot;{{$gimme-&gt;article-&gt;short_description|strip_tags:false|strip|escape:&#39;html&#39;:&#39;utf-8&#39; }}&quot; /&gt;
{{ /if }}</code></pre>
<p>The final conditions have to do with the display of article images. We're taking the list of available article images and passing that to Facebook as the potential images that a user sharing a link can flip through. But if there isn't an image attached to the article (that's the IF statement for {{ if $gimme-&gt;prev_list_empty }} command), then it displays the site logo:</p>
<pre class="prettyprint linenums"><code>{{ list_article_images }}
&lt;meta property=&quot;og:image&quot; content=&quot;{{ $gimme-&gt;article-&gt;image-&gt;imageurl }}&quot; /&gt;
{{ /list_article_images }}
{{ if $gimme-&gt;prev_list_empty }}
&lt;meta property=&quot;og:image&quot; content=&quot;http://{{ $gimme-&gt;publication-&gt;site }}/templates/assets/images/logo.png&quot; /&gt;
{{ /if }}</code></pre>
<p>You can get more info about the Open Graph protocol on Facebook's developer pages: <a href="http://developers.facebook.com/docs/opengraph/" class="uri" title="Open Graph protocol">http://developers.facebook.com/docs/opengraph/</a></p>
<h2>Adding a Like button to your page</h2>
<p>The Like button is the most popular Facebook feature. The team at Facebook made adding a Like button very easy, by going to a particular page and generating the code needed.</p>
<p>Here's an excerpt from a Newscoop article page template that includes a Like button:</p>
<pre class="prettyprint"><code>&lt;iframe src=&quot;http://www.facebook.com/plugins/like.php?href={{ url|escape:&quot;url&quot; }}&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=400&amp;amp;action=recommend&amp;amp;font=arial&amp;amp;colorscheme=light&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowTransparency=&quot;true&quot; style=&quot;border:none; overflow:hidden; width:400px; height:px&quot;&gt;&lt;/iframe&gt;</code></pre>
<p>In this case, we're using Newscoop to generate the article's URL and pass that to Facebook so that it knows where to send its users when they see the article in their pages. We're also adding a Smarty function to escape the URL so that Facebook can handle it in the right way. That's what's going on in this part:</p>
<pre class="prettyprint"><code> src=&quot;http://www.facebook.com/plugins/like.php?href={{ url|escape:&quot;url&quot; }}</code></pre>
<p>More info about the Like button can be found on the Facebook developer pages: <a href="http://developers.facebook.com/docs/reference/plugins/like/" class="uri" title="Facebook Like plugin">http://developers.facebook.com/docs/reference/plugins/like/</a></p>
<h2>Adding a Like Box</h2>
<p>The <em>Like Box</em> feature enables Facebook users to bring the &quot;like&quot; activity to their own site. The Like Box enables readers of your publication to:</p>
<ul>
<li>See how many people liked your Facebook page, and which of their friends like it too</li>
<li>Read recent posts from the Facebook page</li>
<li>Like the Facebook page with just one click, without needing to visit Facebook directly<br />
</li>
</ul>
<p>Here is an example of a Like Box used in Newscoop templating:</p>
<pre class="prettyprint"><code>&lt;script src=&quot;http://connect.facebook.net/en_US/all.js#xfbml=1&quot;&gt;&lt;/script&gt;&lt;fb:like href=&quot;{{ uri options=&quot;article&quot; }}&quot; layout=&quot;button_count&quot; show_faces=&quot;true&quot; width=&quot;450&quot; font=&quot;&quot;&gt;&lt;/fb:like&gt;</code></pre>
<p>The other options allow you to:</p>
<ul>
<li>Set the Like Box's width in pixels</li>
<li>Show your fans' profile pictures (show_faces=&quot;true&quot;)</li>
<li>Set the type of button layout (see more about this on the Facebook developer pages)</li>
</ul>
<p>More information about the Like Box can be found on the Facebook developer pages: <a href="http://developers.facebook.com/docs/reference/plugins/like-box/" class="uri">http://developers.facebook.com/docs/reference/plugins/like-box/</a></p>
<h2>Adding Facebook Comments</h2>
<p>The Comments Box feature can help your replace the built-in commenting system of Newscoop with the one provided by Facebook. Facebook can also provide moderation and distribution tools with this feature.</p>
<p>The Comments Box can be used only with XFBML and the JavaScript file provided by Facebook:</p>
<pre class="prettyprint linenums"><code>&lt;div id=&quot;fb-root&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;http://connect.facebook.net/en_US/all.js#appId=APP_ID&amp;amp;xfbml=1&quot;&gt;&lt;/script&gt;
&lt;fb:comments href=&quot;sourcefabric.org&quot; num_posts=&quot;2&quot; width=&quot;500&quot;&gt;&lt;/fb:comments&gt;</code></pre>
<p>More info about Facebook Comments can be found on the Facebook developer pages: <a href="http://developers.facebook.com/docs/reference/plugins/comments/%20" title="Facebook comments plugin">http://developers.facebook.com/docs/reference/plugins/comments/</a></p>
<p><span id="ch058_working-with-advertising.xhtml"></span></p>
<h1>Working with advertising</h1>
<p>Generating revenue with advertisements usually means including code from advertisers or ad networks in your pages. In Newscoop this means incorporating ads in an existing template, or creating special templates for different campaigns. As shown in this Cookbook, there are many ways you can make content related decisions on which advertisement to include, for example based on article type, keywords, topics, section and so on.</p>
<p>At the end of this chapter you'll find a suggestion about how to handle your own banners. But first, let's look at external providers.</p>
<h2>Include insert codes from a local OpenX server</h2>
<p>Using insert codes from OpenX is quite easy. Once you have OpenX installed, you will need to define what they call &quot;zones&quot; for your advertising. Once defined, you can copy and paste the resulting insert code into your template. Here is a sample script for including a banner ad served from OpenX:</p>
<pre class="prettyprint linenums"><code>&lt;script type=&#39;text/javascript&#39;&gt;&lt;!--//&lt;![CDATA[
   var m3_u = (location.protocol==&#39;https:&#39;?&#39;https://openx.YOURSITE.COM/delivery/ajs.php&#39;:&#39;http://openx.YOURSITE.COM/delivery/ajs.php&#39;);
   var m3_r = Math.floor(Math.random()*99999999999);
   if (!document.MAX_used) document.MAX_used = &#39;,&#39;;
   document.write (&quot;&lt;scr&quot;+&quot;ipt type=&#39;text/javascript&#39; src=&#39;&quot;+m3_u);
   document.write (&quot;?zoneid=66&amp;amp;target=_top&amp;amp;charset=UTF-8&quot;);
   document.write (&#39;&amp;amp;cb=&#39; + m3_r);
   if (document.MAX_used != &#39;,&#39;) document.write (&quot;&amp;amp;exclude=&quot; + document.MAX_used);
   document.write (&#39;&amp;amp;charset=UTF-8&#39;);
   document.write (&quot;&amp;amp;loc=&quot; + escape(window.location));
   if (document.referrer) document.write (&quot;&amp;amp;referer=&quot; + escape(document.referrer));
   if (document.context) document.write (&quot;&amp;context=&quot; + escape(document.context));
   if (document.mmm_fo) document.write (&quot;&amp;amp;mmm_fo=1&quot;);
   document.write (&quot;&#39;&gt;&lt;\/scr&quot;+&quot;ipt&gt;&quot;);
//]]&gt;--&gt;&lt;/script&gt;
&lt;noscript&gt;
   &lt;a href=&#39;http://openx.YOURSITE.COM/delivery/ck.php?n=a16e8b28&amp;amp;cb=INSERT_RANDOM_NUMBER_HERE&#39; target=&#39;_top&#39;&gt;
   &lt;img src=&#39;http://openx.YOURSITE.COM/delivery/avw.php?zoneid=66&amp;amp;charset=UTF-8&amp;amp;cb=INSERT_RANDOM_NUMBER_HERE&amp;amp;n=a16e8b28&#39; border=&#39;0&#39; alt=&#39;&#39; /&gt;
   &lt;/a&gt;
&lt;/noscript&gt;</code></pre>
<p>For more info on OpenX, check their documentation at <a href="http://www.openx.org/support/documentation" class="uri">http://www.openx.org/support/documentation</a></p>
<h2>Include insert codes from Google AdSense</h2>
<p>Once you have successfully created a publisher account with Google AdSense, you can copy and paste the insert code into your template with your publisher ID and ad slot info. Here is an example:</p>
<pre class="prettyprint linenums"><code>&lt;script type=&quot;text/javascript&quot;&gt;
   &lt;!--
   google_ad_client = &quot;pub-XXXXXXXXXXXXXXXX&quot;;
   /* 300x250, created 6/25/09 */
   google_ad_slot = &quot;YYYYYYYYYY&quot;;
   google_ad_width = 300;
   google_ad_height = 250;
   //--&gt;
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;
   src=&quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&quot;&gt;
&lt;/script&gt;</code></pre>
<p>You can find out more about Google AdSense at <a href="http://www.google.com/adsense" class="uri">http://www.google.com/adsense</a></p>
<h2>Handling banners in Newscoop templates</h2>
<p>You can also build your own logic for banner ads in your site. In the following example we will display different banners in different sections.</p>
<p>1. Create banner templates</p>
<p>Inside the folder of your template pack, create a new folder <em>_banners</em>. In this example we are building banners for the &quot;Ushahidi Cooker&quot; so the folder path is:</p>
<pre><code>set_ushahidicooker/_banners</code></pre>
<p>Inside this folder, create template files with banners. There is no Newscoop code inside these templates, just simple HTML displaying a banner with link or embedding a Flash banner - anything you like, we won't explain how to do these. In our example the banner templates are named:</p>
<ul>
<li>banner_hospitals.tpl</li>
<li>banner_libraries.tpl</li>
</ul>
<p>2. Create a template to handle the banner display</p>
<p>Inside the same folder, create a file called check_banner.tpl. This file contains code similar to the following (adjust it for your publication):</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;section-&gt;number == 10 }}
  {{ include file=&quot;set_ushahidicooker/_banners/banner_hospitals.tpl&quot; }}
{{ /if }}
{{ if $gimme-&gt;section-&gt;number == 11 }}
  {{ include file=&quot;set_ushahidicooker/_banners/banner_libraries.tpl&quot; }}
{{ /if }}</code></pre>
<p>This template can be extended to cover more sections.</p>
<p>3. Include the master banner</p>
<p>Now all you need to do is include the check_banner.tpl template in your publication at the place where you want to display banner ads:</p>
<pre class="prettyprint"><code>{{ include file=&quot;set_ushahidicooker/_banners/check_banner.tpl&quot; }}</code></pre>
<p>Using the Newscoop template language, you can modify the IF condition any way that fits your publication's needs.</p>
<p><span id="ch059_ways-to-create-archives.xhtml"></span></p>
<h1>Ways to create archives</h1>
<p>There are different approaches to creating archives. It can be:</p>
<ul>
<li>a list of Articles</li>
<li>a list of Issues</li>
<li>a list of PDF versions</li>
<li>a list of Polls<br />
</li>
<li>a calendar of Articles / Issues / PDF versions</li>
<li>a search form to look through all materials<br />
</li>
</ul>
<p>You would usually combine different options or make your own, depending on your needs.</p>
<h2>General Archive type based on Issues<br />
</h2>
<p>This is a very basic and widely used type of Archive. It is convenient even if you have many issues. You can see an example in our &quot;Journal&quot; template package:</p>
<pre class="prettyprint linenums"><code>&lt;div id=&quot;accordion&quot;&gt;
{{ list_issues constraints=&quot;number not 1&quot; order=&quot;bypublishdate desc&quot; }}
  &lt;h3 style=&quot;margin-bottom: 20px&quot;&gt;&lt;a href=&quot;#&quot;&gt;{{ $gimme-&gt;issue-&gt;name }}&lt;/a&gt;&lt;/h3&gt;
    &lt;div&gt;
{{ list_sections }}
{{ list_articles }}
{{ if $gimme-&gt;current_articles_list-&gt;at_beginning }}
      &lt;h4&gt;&lt;a href=&quot;{{ uri options=&quot;section&quot; }}&quot;&gt;{{ $gimme-&gt;section-&gt;name }}&lt;/a&gt;&lt;/h4&gt;
        &lt;ul&gt;
{{ /if }}
          &lt;li&gt;&lt;a href=&quot;{{ uri options=&quot;article&quot; }}&quot;&gt;{{ $gimme-&gt;article-&gt;name }}&lt;/a&gt; - {{ $gimme-&gt;article-&gt;publish_date|camp_date_format:&quot;%e %M %Y&quot; }} - {{ $gimme-&gt;article-&gt;comment_count }} comment(s)&lt;/li&gt;
{{ if $gimme-&gt;current_articles_list-&gt;at_end }}
        &lt;/ul&gt;
{{ /if }}
{{ /list_articles }}
{{ /list_sections }}
    &lt;/div&gt;
{{ /list_issues }}
&lt;/div&gt;&lt;!-- /#accordion --&gt;</code></pre>
<p>And after adding just a few lines of jQuery code you get a nice accordion effect:</p>
<pre class="prettyprint linenums"><code>$(function() {
  $( &quot;#accordion&quot; ).accordion();
})</code></pre>
<p>The result will look like this:<br />
</p>
<p><img src="static/SCN11.PNG" /></p>
<h2>Combination of different types of Archives</h2>
<p>If you have lots of issues, and especially if you plan to maintain the Archive for a long time, you might want to have a combination of different types of archives. You can take a look at an example of how it's done at: <a href="http://ganc-chas.by/by/page/archive" class="uri">http://ganc-chas.by/by/page/archive</a></p>
<p><img src="static/SCN12.PNG" /></p>
<p>Implementing a search-based archive is a good practice, as it gives your readers the opportunity to find the required material in a click. We use an Advanced Search form for that purpose (please take a look at the <em>Template Reference</em> for more information about <em>Advanced Search</em>).<br />
</p>
<p><strong><em>archive-search-form.tpl</em></strong></p>
<pre class="prettyprint linenums"><code>&lt;div id=&quot;archive_search_form&quot;&gt;
&lt;form method=&quot;post&quot; action=&quot;{{uri}}&quot; name=&quot;search_articles&quot;&gt;
&lt;input type=&quot;hidden&quot; value=&quot;{{$gimme-&gt;template-&gt;identifier}}&quot; name=&quot;tpl&quot; /&gt;
&lt;input type=&quot;hidden&quot; value=true name=&quot;f_search_articles&quot; /&gt;
&lt;fieldset&gt;
        &lt;div&gt;&lt;label&gt;Find:&lt;/label&gt;&lt;input type=&quot;text&quot; value=&quot;{{$gimme-&gt;search_articles_action-&gt;search_phrase}}&quot; name=&quot;f_search_keywords&quot; /&gt;&lt;/div&gt;
        &lt;div&gt;&lt;label&gt;Search by:&lt;/label&gt;
    &lt;span&gt;
      &lt;input type=&quot;radio&quot; name=&quot;f_search_scope&quot; value=&quot;content&quot; checked=&quot;checked&quot; /&gt; text &amp;nbsp;
      &lt;input type=&quot;radio&quot; name=&quot;f_search_scope&quot; value=&quot;title&quot; /&gt; title &amp;nbsp;
      &lt;input type=&quot;radio&quot; name=&quot;f_search_scope&quot; value=&quot;author&quot; /&gt; author
    &lt;/span&gt;
  &lt;/div&gt;
        &lt;div&gt;&lt;label&gt;Issue:&lt;/label&gt;{{camp_select object=&quot;search&quot; attribute=&quot;issue&quot;}}&lt;/div&gt;
        &lt;div&gt;&lt;label&gt;Date:&lt;/label&gt;&lt;input type=&quot;text&quot; id=&quot;f_search_start_date&quot; name=&quot;f_search_start_date&quot; /&gt;&lt;input type=&quot;text&quot; id=&quot;f_search_end_date&quot; name=&quot;f_search_end_date&quot; /&gt;&lt;/div&gt;
        &lt;div&gt;&lt;input type=&quot;submit&quot; class=&quot;button-greent1&quot; name=&quot;f_search_articles&quot; value=&quot;Find&quot; /&gt;&lt;/div&gt;
&lt;/fieldset&gt;
&lt;/form&gt;
&lt;/div&gt;</code></pre>
<p>To make other search controls (please read the chapter on <em>Using Calendars</em>) and control the looks and flow we utilize jQuery a lot:<br />
</p>
<p><strong><em>functions.js</em></strong></p>
<pre class="prettyprint linenums"><code>/* Archive search form &amp; results */

$(&quot;form[name=search_articles] select[name=f_search_issue] option[value=1]&quot;).remove(); /* remove first issue from the list */
// Submitting a form
$(&#39;#archive_search_form .button-greent1&#39;).live(&quot;click&quot;,function(){
  var url = $(&#39;#archive_search_form form[name=search_articles]&#39;).attr(&quot;action&quot;) + &#39;?tpl=archive-search-results.tpl&#39;;
  var form = $(&#39;#archive_search_form form[name=search_articles]&#39;).serialize();
  $.post(url, form, function(data){$(&#39;#archive_search_results&#39;).html(data);});
  return false;
});

/* Datepickers */

// Load results with AJAX if a date was clicked in a calendar
$(&quot;#ArticleArchive .ui-state-highlight a&quot;).live(&quot;click&quot;,function(){
  $(&quot;#archive_search_results&quot;).load( $(this).attr(&quot;href&quot;) + &#39;&amp;tpl=archive-search-results.tpl&#39; );
  return false;
});

var cs_date;var pdf_date;
$.ajax({async:false,dataType:&#39;json&#39;,url:&#39;/templates/js/calendar-items.json&#39;,success: function(d){cs_date=d;}});
$.ajax({async:false,dataType:&#39;json&#39;,url:&#39;/templates/js/pdf-items.json&#39;,success: function(d){pdf_date=d;}});

// Article Archive Calendar
$(&quot;#ArticleArchive&quot;).datepicker({
  changeMonth: true,
  changeYear: true,
  beforeShowDay: function(d){
    var date = $.datepicker.formatDate(&quot;yy-mm-dd&quot;,d);
    var link = &quot;page_url?date=&quot;+date;
    show=false;;caption=&quot;&quot;;
    if ($.inArray(date,cs_date.article)!=-1){
      var x=0;
      $.grep(cs_date.article,function(n,i){if(n==date) x++;});
      show=true;style=&quot;ui-state-highlight active&quot;;caption+=&quot;Articles found: &quot;+x;
    }
    return [show,style,caption,link];
  }
});

// PDF Archive Calendar
$(&quot;#PDFArchive&quot;).datepicker({
  changeMonth: true,
  changeYear: true,
  beforeShowDay: function(d){
    var date = $.datepicker.formatDate(&quot;yy-mm-dd&quot;,d);
    show=false;;caption=&quot;&quot;;link=&quot;#&quot;;
    if (pdf_date.pdf[date]){
      show=true;
      style=&quot;ui-state-attention active&quot;;
      caption=pdf_date.pdf[date].title;
      link=pdf_date.pdf[date].link;
    }
    return [show,style,caption,link];
  }
});</code></pre>
<p>And the whole process is going on in one template, which receives data and provides output.</p>
<p><strong><em>archive-search-results.tpl</em></strong></p>
<p>First, we need to check if the <em>date</em> parameter was supplied. In this case, we provide a list of articles published on that date:<br />
</p>
<pre class="prettyprint linenums"><code>{{if $smarty.get.date}}
{{assign var=&quot;get_date&quot; value=$smarty.get.date|camp_date_format:&quot;%Y-%m-%d&quot;}}
  &lt;div class=&quot;header-diag&quot;&gt;
    Materials on: {{$get_date|camp_date_format:&quot;%e %M %Y&quot;}}
  &lt;/div&gt;</code></pre>
<p>We are trying to look for articles on a given date in sections that contain articles of type 'article':<br />
</p>
<pre class="prettyprint linenums"><code>  {{list_articles columns=&quot;15&quot; constraints=&quot;type is article issue greater 1 section smaller_equal 120 publish_date is `$get_date`&quot;}}
    {{if $gimme-&gt;current_list-&gt;count &gt; 15}}{{assign var=&quot;navigation&quot; value=true}}{{/if}}
  {{if $gimme-&gt;current_list-&gt;row==$page}}
    {{if $gimme-&gt;current_list-&gt;column==1}}
      &lt;dl class=&quot;b-comm&quot;&gt;
    {{/if}}
      {{if $gimme-&gt;section-&gt;name != $section}}&lt;dt&gt;{{$gimme-&gt;section-&gt;name}}&lt;/dt&gt;{{/if}}
        &lt;dd&gt;&lt;a href=&quot;{{uri}}&quot;&gt;{{$gimme-&gt;article-&gt;name}}&lt;/a&gt;&lt;/dd&gt;
      {{assign var=&quot;section&quot; value=$gimme-&gt;section-&gt;name}}
    {{if $gimme-&gt;current_list-&gt;column==15}}
      &lt;/dl&gt;
    {{/if}}
  {{/if}}
  {{/list_articles}}
  {{if $gimme-&gt;prev_list_empty}}&lt;em&gt;Nothing was found.&lt;/em&gt;{{/if}}</code></pre>
<p>Otherwise, if there was a search action, we should output search results:</p>
<pre class="prettyprint linenums"><code>{{elseif $gimme-&gt;search_articles_action-&gt;defined}}

&lt;div class=&quot;header-diag&quot;&gt;Search results {{if $gimme-&gt;search_articles_action-&gt;search_phrase}}for &quot;{{$gimme-&gt;search_articles_action-&gt;search_phrase}}&quot;{{/if}}&lt;/div&gt;

  {{list_search_results columns=&quot;10&quot; order=&quot;bypublishdate desc&quot;}}
    {{if $gimme-&gt;current_list-&gt;column==1}}
      &lt;dl class=&quot;b-comm&quot;&gt;
    {{/if}}
        &lt;dt&gt;&lt;span&gt;&lt;a href=&quot;{{uri}}&quot;&gt;{{$gimme-&gt;article-&gt;name}}&lt;/a&gt;&lt;/span&gt;&amp;nbsp;(#{{$gimme-&gt;issue-&gt;name}}({{$gimme-&gt;issue-&gt;number}}) {{$gimme-&gt;article-&gt;publish_date|camp_date_format:&quot;%d.%m.%Y&quot;}})&lt;/dt&gt;
        &lt;dd&gt;{{$gimme-&gt;article-&gt;intro|strip_tags:false|strip|truncate:300}}&lt;/dd&gt;
    {{if $gimme-&gt;current_list-&gt;column == 10}}
      &lt;/dl&gt;
    {{/if}}
  {{/if}}
  {{/list_search_results}}
  {{if $gimme-&gt;prev_list_empty}}&lt;em&gt;Nothing was found.&lt;/em&gt;{{/if}}</code></pre>
<p>Else, if there's no search action or date provided, just output the list of articles in the current and previous issues:</p>
<pre class="prettyprint linenums"><code>{{else}}

  &lt;div class=&quot;header-diag&quot;&gt;Latest materials&lt;/div&gt;
  &lt;dl class=&quot;ui-accordion ui-widget&quot;&gt;

    &lt;dt class=&quot;ui-accordion-header ui-state-default&quot;&gt;Last Issue&lt;/dt&gt;
    &lt;dd class=&quot;ui-accordion-content&quot;&gt;
    {{local}}{{set_current_issue}}{{assign var=&quot;issn&quot; value=$gimme-&gt;issue-&gt;number}}{{/local}}
    {{list_articles constraints=&quot;type is article issue is $issn section smaller_equal 120&quot;}}
      {{if $gimme-&gt;section-&gt;name != $section}}{{if $gimme-&gt;current_list-&gt;index&gt;1}}&lt;br /&gt;{{/if}}&lt;p&gt;&lt;strong&gt;{{$gimme-&gt;section-&gt;name}}&lt;/strong&gt;&lt;/p&gt;{{/if}}
      &lt;p&gt;&lt;a href=&quot;{{uri}}&quot;&gt;{{$gimme-&gt;article-&gt;name}}&lt;/a&gt;&lt;/p&gt;
      {{assign var=&quot;section&quot; value=$gimme-&gt;section-&gt;name}}
    {{/list_articles}}
    {{if $gimme-&gt;prev_list_empty}}&lt;p&gt;Nothing was found.&lt;/p&gt;{{/if}}
    &lt;/dd&gt;

    {{list_issues length=&quot;1&quot; constraints=&quot;number smaller $issn&quot; order=&quot;byPublishDate desc&quot;}}
    &lt;dt class=&quot;ui-accordion-header ui-state-default&quot;&gt;Previous Issue&lt;/dt&gt;
    &lt;dd class=&quot;ui-accordion-content&quot;&gt;
    {{list_articles constraints=&quot;type is article section smaller_equal 120&quot;}}
      {{if $gimme-&gt;section-&gt;name != $section}}{{if $gimme-&gt;current_list-&gt;index&gt;1}}&lt;br /&gt;{{/if}}&lt;p&gt;&lt;strong&gt;{{$gimme-&gt;section-&gt;name}}&lt;/strong&gt;&lt;/p&gt;{{/if}}
      &lt;p&gt;&lt;a href=&quot;{{uri}}&quot;&gt;{{$gimme-&gt;article-&gt;name}}&lt;/a&gt;&lt;/p&gt;
      {{assign var=&quot;section&quot; value=$gimme-&gt;section-&gt;name}}
    {{/list_articles}}
    {{if $gimme-&gt;prev_list_empty}}&lt;p&gt;Nothing was found.&lt;/p&gt;{{/if}}
    &lt;/dd&gt;
    {{/list_issues}}</code></pre>
<p>In this example we are also listing the latest PDF issues and Polls:<br />
</p>
<pre class="prettyprint linenums"><code>    &lt;dt class=&quot;ui-accordion-header ui-state-default&quot;&gt;Latest PDF versions&lt;/dt&gt;
    &lt;dd class=&quot;ui-accordion-content&quot;&gt;
      {{list_articles constraints=&quot;type is pdf issue greater 1 section is 300 publish_date greater 1900-01-01&quot;}}{{list_article_attachments length=&quot;1&quot;}}
        &lt;a href=&quot;http://{{$gimme-&gt;publication-&gt;site}}{{uri options=&quot;articleAttachment&quot;}}&quot;&gt;PDF #{{$gimme-&gt;issue-&gt;name}}({{$gimme-&gt;issue-&gt;number}}) / {{$gimme-&gt;issue-&gt;publish_date|camp_date_format:&quot;%d.%m.%Y&quot;}}&lt;/a&gt;&lt;br /&gt;
      {{/list_article_attachments}}{{/list_articles}}
    &lt;/dd&gt;

    &lt;dt class=&quot;ui-accordion-header ui-state-default&quot;&gt;Latest Polls&lt;/dt&gt;
    &lt;dd class=&quot;ui-accordion-content&quot;&gt;
      {{list_polls length=&quot;3&quot; order=&quot;bynumber desc&quot;}}
        {{if $gimme-&gt;current_list-&gt;index&gt;1}}&lt;br /&gt;&lt;br /&gt;{{/if}}&lt;p&gt;&lt;b&gt;{{$gimme-&gt;poll-&gt;question}}&lt;/b&gt;&lt;/p&gt;&lt;br /&gt;
        {{list_poll_answers}}&lt;p&gt;
        &lt;div&gt;{{$gimme-&gt;pollanswer-&gt;answer}}
          &lt;div class=&quot;poll-result ui-state-highlight&quot; style=&quot;width:{{$gimme-&gt;pollanswer-&gt;percentage|string_format:&quot;%d&quot;}}%;&quot;&gt;{{$gimme-&gt;pollanswer-&gt;percentage|string_format:&quot;%d&quot;}}%&lt;/div&gt;
        &lt;/div&gt;&lt;/p&gt;
        {{/list_poll_answers}}
      {{/list_polls}}
    &lt;/dd&gt;

  &lt;/dl&gt;
{{/if}}</code></pre>
<p><img src="static/SCN13.PNG" /></p>
<p>And that's pretty much it!<br />
</p>
<p>Definitely, you should think in advance about what type of archive you will need. After ten years of work, you would still like to have everything in good order.</p>
<p><span id="ch061_language-elements-and-conventions.xhtml"></span></p>
<h1>Language elements and conventions</h1>
<p>In the following chapters describing the template language the following conventions are used:</p>
<ul>
<li>identifiers in between '&lt;' and '&gt;' must be replaced in the template according to their description</li>
<li>spaces must be used as in the language description</li>
<li>identifiers that are not in between '&lt;' and '&gt;' are language keywords and must be written as in the language description</li>
<li>identifiers enclosed by '[' and ']' characters are not mandatory in the statement</li>
<li>sequences of identifiers separated by '|' character describe a situation where all the identifiers are valid but only one can be used at a time</li>
</ul>
<p>The template language is composed of:</p>
<ul>
<li>statements: keywords with a special meaning that define actions taken by the template parser</li>
<li>parameters: keywords describing statement features; they are used to specify statement constraints</li>
<li>parameter values: keywords that describe the parameter that must be taken</li>
</ul>
<p>Any value must be put in between double quotes (&quot;&quot;). The double quote must be escaped any time it is used in an identifier. For example, escaping a value that contains a quote:<br />
</p>
<pre class="prettyprint"><code>{{ if $gimme-&gt;article-&gt;name == &quot;Lucas \&quot;the beast\&quot;&quot; }}</code></pre>
<p>In some statements (usually lists) there is a special parameter named &quot;constraints&quot;. This parameter describes conditions that cannot be specified in the usual way:</p>
<pre class="prettyprint"><code>parameter=&quot;value&quot;</code></pre>
<p>Instead, constraints are specified in the following way:</p>
<pre class="prettyprint"><code>constraints=&quot;&lt;constraints_list&gt;&quot;</code></pre>
<p>Constraints are built from the following expressions:</p>
<ul>
<li>comparison expressions: &lt;attribute&gt; &lt;operator&gt; &lt;value&gt;</li>
<li>attributes without type: &lt;attribute&gt;</li>
</ul>
<p>Attributes may have no type, or one of the following types:</p>
<ul>
<li>integer: signed, 10 digits number</li>
<li>string of characters: may contain any character except control characters - these will be removed automatically</li>
<li>switch: has two values: &quot;on&quot; and &quot;off&quot;</li>
<li>date: year, month, day; where the date value is specified it must be written in &quot;yyyy-mm-dd&quot; format</li>
<li>time: hour, minute, second; where the time value is specified it must be written in &quot;hh:mm:ss&quot; format</li>
<li>datetime: year, month, day, hour, minute, second; where the datetime value is specified it must be written in &quot;yyyy-mm-dd hh:mm:ss&quot; format</li>
<li>topic: list of names defined by the Newscoop user for categorizing articles</li>
</ul>
<p>Every type has a list of valid operators that can be used on attributes of that particular type. The operators list corresponding to defined types is:</p>
<ul>
<li>integer: &lt;integer_operator&gt; = is | not | greater | greater_equal | smaller | smaller_equal</li>
<li>string of characters: &lt;string_operator&gt; = is | not | greater | greater_equal | smaller | smaller_equal</li>
<li>switch: &lt;switch_operator&gt; = is | not</li>
<li>date: &lt;date_operator&gt; = is | not | greater | greater_equal | smaller | smaller_equal</li>
<li>time: &lt;time_operator&gt; = is | not | greater | greater_equal | smaller | smaller_equal</li>
<li>datetime: &lt;datetime_operator&gt; = is | not | greater | greater_equal | smaller | smaller_equal</li>
<li>topic: &lt;topic_operator&gt; = is | not</li>
</ul>
<p>Spaces in values must be escaped with backslash, for example:</p>
<pre class="prettyprint"><code>constraints=&quot;topic is Global\ Warming:en&quot;</code></pre>
<p>In this case, &quot;Global Warming&quot; is the topic name.<br />
</p>
<p><span id="ch062_basic-syntax.xhtml"></span></p>
<h1>Basic syntax</h1>
<p>The Newscoop template engine was built on Smarty, so the Newscoop template language is actually an extension of the Smarty template language. For details of the Smarty template language please read: <a href="http://smarty.net/manual/en/smarty.for.designers.php" class="uri" title="Smarty for Template Designers">http://smarty.net/manual/en/smarty.for.designers.php</a></p>
<p>All template tags are enclosed within delimiters. By default in Smarty these are the single curly brackets { and } but they can be changed. In Newscoop we use the double curly brackets {{ and }} for template tag delimiters.</p>
<p>For the examples in this Cookbook, we will assume that you are using the default Newscoop delimiters. All content outside of delimiters is displayed as static content, or unchanged. When the template engine encounters template tags, it attempts to interpret them, and displays the appropriate output in their place.</p>
<p>The following sub-chapters, which were copied from the Smarty manual, will familiarize you with the Smarty syntax.</p>
<h2>Attributes</h2>
<p>Most of the functions take attributes that specify or modify their behaviour. Attributes to Smarty functions are much like HTML attributes. Static values don't have to be enclosed in quotes, but it is recommended for literal strings. Variables may also be used, and should not be in quotes.</p>
<p>Some attributes require boolean values (TRUE or FALSE). These can be specified as either unquoted true, on, and yes; or false, off, and no.</p>
<pre class="prettyprint linenums"><code>{{include file=&#39;header.tpl&#39;}}
{{include file=&#39;header.tpl&#39; attrib_name=&#39;attrib value&#39;}}
{{include file=$includeFile}}
{{include file=#includeFile# title=&#39;Smarty is cool&#39;}}

 {{html_select_date display_days=yes}}
  {{mailto address=&#39;smarty@example.com&#39;}}
   &lt;select name=&#39;company_id&#39;&gt;
    {{html_options options=$companies selected=$company_id}}
   &lt;/select&gt;</code></pre>
<h2>Comments</h2>
<p>Template comments are surrounded by asterisks, and then surrounded by the delimiter tags like this:</p>
<pre class="prettyprint linenums"><code>{{* this is a comment *}}
Comments are NOT displayed in the final output of the template, unlike &lt;!-- HTML comments --&gt;. These are useful for making internal notes in the templates which no one will see.
{{* I am a template comment, I don&#39;t exist in the compiled output  *}}
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;{{$title}}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
{{* another single line comment  *}}
&lt;!-- HTML comment that is sent to the browser --&gt;
{{* this multiline
   comment is
   not sent to browser
*}}
{{*********************************************************
Multi line comment block with credits block
  @ author:         bg@example.com
  @ maintainer:     support@example.com
  @ para:           var that sets block style
  @ css:            the style output
**********************************************************}}
{{* The header file with the main logo and stuff  *}}
{{include file=&#39;header.tpl&#39;}}
{{* Dev note:  the $includeFile var is assigned in foo.php script  *}}
&lt;!-- Displays main content block --&gt;
{{include file=$includeFile}}
{{* this &lt;select&gt; block is redundant *}}
{{*
&lt;select name=&quot;company&quot;&gt;
  {{html_options options=$vals selected=$selected_id}}
&lt;/select&gt;
*}}
&lt;!-- Show header from affiliate is disabled --&gt;
{{* $affiliate|upper *}}
{{* you cannot nest comments *}}
{{*
&lt;select name=&quot;company&quot;&gt;
  {{* &lt;option value=&quot;0&quot;&gt;-- none -- &lt;/option&gt; *}}
  {{html_options options=$vals selected=$selected_id}}
&lt;/select&gt;
*}}
{{* cvs tag for a template, below the 36 SHOULD be an american currency
. however its converted in cvs.. *}}
{{* &amp;#36;Id: Exp &amp;#36; *}}
{{* $Id: *}}
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<h2>Embedding vars in double quotes</h2>
<p>Smarty will recognize assigned variables embedded in &quot;double quotes&quot; so long as the variable name contains only numbers, letters, under_scores and square brackets []. See the PHP naming documentation at <a href="http://php.net/language.variables" class="uri" title="PHP language variables">http://php.net/language.variables</a> for more detail.</p>
<p>With any other characters, for example a .period or $object&gt;reference, then the variable must be surrounded by `backticks`.</p>
<p>You cannot embed modifiers, they must always be applied outside of quotes.</p>
<pre class="prettyprint linenums"><code>{{func var=&quot;test $foo test&quot;}}       &lt;-- sees $foo
{{func var=&quot;test $foo_bar test&quot;}}   &lt;-- sees $foo_bar
{{func var=&quot;test $foo[0] test&quot;}}    &lt;-- sees $foo[0]
{{func var=&quot;test $foo[bar] test&quot;}}  &lt;-- sees $foo[bar]
{{func var=&quot;test $foo.bar test&quot;}}   &lt;-- sees $foo (not $foo.bar)
{{func var=&quot;test `$foo.bar` test&quot;}} &lt;-- sees $foo.bar
{{func var=&quot;test `$foo.bar` test&quot;|escape}} &lt;-- modifiers outside quotes!</code></pre>
<p>Here are some practical examples:</p>
<pre class="prettyprint linenums"><code>{{* will replace $tpl_name with value *}}
{{include file=&quot;subdir/$tpl_name.tpl&quot;}}

{{* doesn&#39;t replace $tpl_name *}}
{{include file=&#39;subdir/$tpl_name.tpl&#39;}}

{{* must have backticks as it contains a . *}}
{{cycle values=&quot;one,two,`$smarty.config.myval`&quot;}}

{{*  same as $module[&#39;contact&#39;].&#39;.tpl&#39; in a php script *}}
{{include file=&quot;`$module.contact`.tpl&quot;}}

{{*  same as $module[$view].&#39;.tpl&#39; in a php script *}}
{{include file=&quot;$module.$view.tpl&quot;}}</code></pre>
<h2>Escaping Smarty parsing</h2>
<p>It is sometimes desirable or even necessary to have Smarty ignore sections it would otherwise parse. A classic example is embedding Javascript or CSS code in a template. The problem arises as those languages use the { and } characters which are also the default delimiters for Smarty.</p>
<p>The simplest thing is to avoid the situation altogether by separating your Javascript and CSS code into their own files and then using standard HTML methods to access them.</p>
<p>Including literal content is possible using literal../literal blocks. Similar to HTML entity usage, you can use ldelim, rdelim or $smarty.ldelim to display the current delimiters.</p>
<h2>Functions</h2>
<p>Every Smarty tag either prints a variable or invokes some sort of function. These are processed and displayed by enclosing the function and its attributes within delimiters like so: funcname attr1='val1' attr2='val2'.</p>
<pre class="prettyprint linenums"><code>{{config_load file=&#39;colors.conf&#39;}}
{{include file=&#39;header.tpl&#39;}}
{{insert file=&#39;banner_ads.tpl&#39; title=&#39;Smarty is cool&#39;}}
{{if $logged_in}}
    Welcome, &lt;font &gt;{{$name}}!&lt;/font&gt;
{{else}}
    hi, {{$name}}
{{/if}}
{{include file=&#39;footer.tpl&#39; ad=$random_id}}</code></pre>
<ul>
<li>Both built-in functions and custom functions have the same syntax within templates.</li>
<li>Built-in functions are the inner workings of Smarty, such as if, section and strip. There should be no need to change or modify them.</li>
<li>Custom functions are additional functions implemented via plugins. They can be modified to your liking, or you can create new ones. html_options and popup are examples of custom functions.</li>
</ul>
<h2>Math</h2>
<p>Math can be applied directly to variable values.</p>
<pre class="prettyprint linenums"><code>{{$foo+1}}

{{$foo*$bar}}

{{* some more complicated examples *}}

{{$foo-&gt;bar-$bar[1]*$baz-&gt;foo-&gt;bar()-3*7}}

{{if ($foo+$bar.test%$baz*134232+10+$b+10)}}

{{$foo|truncate:&quot;`$fooTruncCount/$barTruncFactor-1`&quot;}}

{{assign var=&quot;foo&quot; value=&quot;`$foo+$bar`&quot;}}</code></pre>
<h2>Variable modifiers</h2>
<p>Modifiers can be applied to variables, custom functions or strings. To apply a modifier, specify the value followed by a | (pipe) and the modifier name. A modifier may accept additional parameters that affect its behaviour. These parameters follow the modifier name and are separated by a : (colon). Also, all PHP functions can be used as modifiers implicitly (more below) and modifiers can be combined.</p>
<pre class="prettyprint linenums"><code>{{* apply modifier to a variable *}}
{{$title|upper}}

{{* modifier with parameters *}}
{{$title|truncate:40:&#39;...&#39;}}

{{* apply modifier to a function parameter *}}
{{html_table loop=$myvar|upper}}

{{* with parameters *}}
{{html_table loop=$myvar|truncate:40:&#39;...&#39;}}

{{* apply modifier to literal string *}}
{{&#39;foobar&#39;|upper}}

{{* using date_format to format the current date *}}
{{$smarty.now|date_format:&quot;%Y/%m/%d&quot;}}

{{* apply modifier to a custom function *}}
{{mailto|upper address=&#39;smarty@example.com&#39;}}

{{* using  php&#39;s str_repeat *}}
{{&#39;=&#39;|str_repeat:80}}

{{* php&#39;s count *}}
{{$myArray|@count}}

{{* php&#39;s shuffle on servers&#39;s ip *}}
{{$smarty.server.SERVER_ADDR|shuffle}}

{{* this will uppercase and truncate the whole array *}}
 &lt;select name=&quot;name_id&quot;&gt;
  {{html_options output=$myArray|upper|truncate:20}}
 &lt;/select&gt;</code></pre>
<p>If you apply a modifier to an array variable instead of a single value variable, the modifier will be applied to every value in that array. If you really want the modifier to work on an entire array as a value, you must prepend the modifier name with an @ symbol.</p>
<p>For example:</p>
<pre class="prettyprint"><code>{{$articleTitle|@count}}</code></pre>
<p>will print out the number of elements in the $articleTitle array using the php count() function as a modifier.</p>
<p>Modifiers are autoloaded from the $plugins_dir or can be registered explicitly with the register_modifier() function. The later is useful for sharing a function between PHP scripts and Smarty templates.</p>
<p>All PHP functions can be used as modifiers implicitly, as demonstrated in the example above. However, using PHP functions as modifiers has two little pitfalls:</p>
<p>First - sometimes the order of the function-parameters is not the desirable one. Formatting $foo with {{&quot;%2.f&quot;|sprintf:$foo}} actually works, but asks for the more intuitive, like {{$foo|string_format:&quot;%2.f&quot;}} that is provided by the Smarty distribution.</p>
<p>Secondly - if $security is enabled, all PHP functions that are to be used as modifiers have to be declared trusted in the MODIFIER_FUNCS element of the $security_settings array</p>
<p>You can apply any number of modifiers to a variable. They will be applied in the order they are combined, from left to right. They must be separated with a | (pipe) character:</p>
<pre class="prettyprint linenums"><code>{{$articleTitle}}
{{$articleTitle|upper|spacify}}
{{$articleTitle|lower|spacify|truncate}}
{{$articleTitle|lower|truncate:30|spacify}}
{{$articleTitle|lower|spacify|truncate:30:&quot;. . .&quot;}}</code></pre>
<h2>Variables</h2>
<p>Template variables start with the $dollar sign. They can contain numbers, letters and underscores, much like a PHP variable. You can reference arrays by index numerically or non-numerically. Also reference object properties and methods.</p>
<p>Config file variables are an exception to the $dollar syntax and are instead referenced with surrounding #hashmarks#, or via the $smarty.config variable.</p>
<pre class="prettyprint linenums"><code>{{$foo}}        &lt;-- displaying a simple variable (non array/object)

{{$foo[4]}}     &lt;-- display the 5th element of a zero-indexed array

{{$foo.bar}}    &lt;-- display the &quot;bar&quot; key value of an array, similar to PHP $foo[&#39;bar&#39;]

{{$foo.$bar}}   &lt;-- display variable key value of an array, similar to PHP $foo[$bar]

{{$foo-&gt;bar}}   &lt;-- display the object property &quot;bar&quot;

{{$foo-&gt;bar()}} &lt;-- display the return value of object method &quot;bar&quot;

{{#foo#}}       &lt;-- display the config file variable &quot;foo&quot;

{{$smarty.config.foo}} &lt;-- synonym for {{#foo#}}

{{$foo[bar]}}   &lt;-- syntax only valid in a section loop, see {{section}}

{{assign var=foo value=&#39;baa&#39;}}{{$foo}} &lt;--  displays &quot;baa&quot;, see {{assign}}</code></pre>
<p>Many other combinations are allowed:</p>
<pre class="prettyprint linenums"><code>{{$foo.bar.baz}}
{{$foo.$bar.$baz}}
{{$foo[4].baz}}
{{$foo[4].$baz}}
{{$foo.bar.baz[4]}}

{{$foo-&gt;bar($baz,2,$bar)}} &lt;-- passing parameters

{{&quot;foo&quot;}}       &lt;-- static values are allowed

{{* display the server variable &quot;SERVER_NAME&quot; ($_SERVER[&#39;SERVER_NAME&#39;])*}}
{{$smarty.server.SERVER_NAME}}</code></pre>
<p><span id="ch064_introduction-to-newscoop-objects.xhtml"></span></p>
<h1>Introduction to Newscoop objects</h1>
<p>The Newscoop template engine stores the template environment in an object named 'gimme'. All Newscoop properties and objects are attributes of the $gimme object.<br />
<br />
The $gimme object has the following attributes which are not objects:<br />
</p>
<ul>
<li>version: the Newscoop version</li>
<li>preview: true if the page was displayed in the preview window (by a Newscoop staff user)</li>
<li>prev_list_empty: true if a list was displayed before querying this attribute and this list was empty<br />
</li>
</ul>
<p>Any Newscoop object (e.g.: $gimme-&gt;language, or $gimme-&gt;article ) has the following functions:</p>
<ul>
<li>has_property(&quot;property_name&quot;)<br />
</li>
</ul>
<p>Returns true when the object has the given property. This function can be used for dynamic article properties too. For example, $gimme-&gt;article-&gt;has_property(&quot;name&quot;) will return true.<br />
</p>
<ul>
<li>same_as($gimme-&gt;other_object)<br />
</li>
</ul>
<p>Returns true if the object variable given as a parameter points to the same data as the current object. For example, {{ if $gimme-&gt;article-&gt;same_as($gimme-&gt;default_article) }} will return true if the current article was the same as the article defined at the beginning of the template. If both were undefined this function returns true.<br />
</p>
<p><span id="ch065_article-object-and-attachment-comment-location.xhtml"></span></p>
<h1>Article object and attachment, comment, location</h1>
<h2>Article</h2>
<p>The article object is set at the beginning of the main template based on the request URL. This object can be changed using the set_article function. The article object has the following properties:</p>
<h3>Base properties/functions:</h3>
<ul>
<li>name: article name</li>
<li>number: article identifier in the Newscoop database</li>
<li>author: returns an object corresponding to the first author in the list of authors, with the following properties:</li>
<li><ul>
<li>name</li>
<li>first_name</li>
<li>last_name</li>
<li>email<br />
</li>
<li>defined</li>
</ul></li>
<li>authors: returns the complete list of authors for the current article - objects of type author (see above or &quot;Author&quot;).</li>
<li>keywords: text containing the article keywords separated by the Newscoop defined separator (default is comma [,])</li>
<li>has_keyword (&lt;keyword&gt;): returns true if the given keyword existed in the article keywords list</li>
</ul>
<h3>Example:</h3>
<pre class="prettyprint"><code>{{ if $gimme-&gt;article-&gt;has_keyword (mp3podcast) }}&lt;span class=&quot;audio&quot;&gt;&lt;/span&gt;{{ /if }}</code></pre>
<p><strong>Important:</strong> the command matches parts of the keyword. In the above example keywords &quot;mp3podcast10&quot; and &quot;mp3podcasttalk&quot; both return true.</p>
<ul>
<li>type_name: article type name</li>
<li>type_translated: article type name translated to the environment language</li>
<li>&lt;date_attribute&gt;: article creation date field (year, month, day etc.)<br />
</li>
<li>creation_date: article creation date; you can customize the date display format by using the filter camp_date_format</li>
<li>publish_date: article publish date; you can customize the date display format by using the filter camp_date_format</li>
<li>last_update: time of the last article edit</li>
<li>template: the full path of the article template file</li>
<li>type-&gt; &lt;article_type&gt;-&gt; &lt;article_type_attribute&gt;: returns the content of an article field specific to a certain article type (see the &quot;Article Types&quot; chapter in <em>Newscoop for Journalists and Editors</em>); read the chapter <em>Date and e-mail formatting</em> in this Cookbook for formatting the content of type date/time; see also the notes below</li>
<li>url_name: the article name used in URL display (see the &quot;Creating An Article&quot; chapter in <em>Newscoop for Journalists and Editors</em>)</li>
<li>translated_to(&lt;language_code&gt;): true if an article translation for the language with the given code existed</li>
<li>subtitles_count(&lt;field_name&gt;): returns the number of the subtitles in the given content field; the article name is counted as the first subtitle so this function returns a number greater or equal to 1. If the specified field was not a content field it returns null.</li>
<li>subtitle_url_id(&lt;field_name&gt;): returns the URL parameter which sets the number of the subtitle to be displayed from the field &lt;field_name&gt;</li>
<li>current_subtitle_no(&lt;field_name&gt;): returns the number of the subtitle which will be displayed through the statement {{ $gimme-&gt;article-&gt;&lt;field_name&gt; }}; 0 for the default subtitle, 1 for the first subtitle defined in the article content field etc.</li>
<li>publication: the publication to which this article belongs to - object of type publication (see the chapter &quot;Publication&quot;)</li>
<li>issue: the issue to which this article belongs to - object of type issue (see the chapter &quot;Issue&quot;)</li>
<li>section: the section to which this article belongs to - object of type section</li>
<li>language: the article language - object of type language (see the chapter &quot;Language&quot;)</li>
<li>owner: the user who created the article - object of type user (see the chapter &quot;User&quot;)</li>
<li>defined: boolean value (true/false) - true if the article was set in the current environment; false otherwise</li>
</ul>
<p>Comments related properties/functions:</p>
<ul>
<li>comments_enabled: true if comments were enabled for the article publication, article type and the current article</li>
<li>comments_locked: true if comments were locked (meaning they can be listed but no new comments can be posted)</li>
<li>comment_count: returns the number of the comments posted to the article and approved</li>
</ul>
<p>Accessibility properties/functions:</p>
<ul>
<li>on_front_page: true if article front page flag was set</li>
<li>on_section_page: true if article section page flag was set</li>
<li>is_published: true if the article was published</li>
<li>is_public: true if the article was accessible to the public</li>
<li>is_indexed: true if the article was indexed by the search engine</li>
<li>content_accessible: returns true if the content of the article is accessible for reading: either it is public or the reader subscribed to the publication (see also Editing An Article and Creating a Publication chapters in <em>Newscoop for Journalists and Editors</em>)</li>
</ul>
<p>Attachment related properties/functions:</p>
<ul>
<li>has_attachments: true if the article had attached files</li>
<li>image: returns the image object that was defined in the template environment; if the image was not defined in the environment, returns the first image of the article; if the article didn't have any image attached returns an unset image object</li>
<li>image_index: returns the index of the current image inside the article; if the image wasn't defined in the environment or it doesn't belong to the article returns null.</li>
<li>has_image(&lt;image_index&gt;): true if the article had an attached image and it's index was equal to the given index</li>
<li>image(&lt;image_index&gt;): returns the attached image having the given index; if no such image existed, returns an unset image object. This is a function so the image index is given in between brackets. For example: $gimme-&gt;article-&gt;image(3)</li>
<li>image&lt;image_index&gt;: returns the attached image having the given index; if no such image existed, returns an unset image object. This is a property, not a function. For example: $gimme-&gt;article-&gt;image3</li>
<li>topics_count: returns the number of topics attached to this article</li>
<li>has_topics: true if the article had attached topics</li>
<li>has_topic(&lt;topic_identifier&gt;): true if the article had the specified topic attached to it</li>
</ul>
<p>Statistics properties/functions:</p>
<ul>
<li>reads: returns the number of readers that viewed this article since it was published</li>
<li>request_object_id: the identifier used in statistics gathering</li>
</ul>
<p>&lt;date_attribute&gt; may be one of the following:</p>
<ul>
<li>year: year (four digits)</li>
<li>mon: month as a number (1..12)</li>
<li>mday: day of the month as a number (1..31)</li>
<li>yday: day of the year (1..366)</li>
<li>wday: day of the week as a number (0=Sunday..6=Saturday)</li>
<li>hour: hour (0..23)</li>
<li>min: minute (two digits)</li>
<li>sec: seconds (two digits)</li>
<li>mon_name: name of the month</li>
<li>wday_name: day of the week</li>
</ul>
<p><strong>Note regarding the attribute type-&gt;[&lt;article_type&gt;-&gt;]&lt;article_type_attribute&gt;:</strong></p>
<p>Attributes which are body fields (content) have the following properties:</p>
<ul>
<li>all_subtitles: returns the whole content of the body field, not just the current subtitle</li>
<li>first_paragraph: returns the first paragraph of the current subtitle</li>
<li>subtitles_count: returns the number of the subtitles in the body field</li>
<li>subtitle_number: returns the number of the current subtitle: 0 for the default subtitle, 1 for the first subtitle defined in the article content field etc.</li>
<li>subtitle_is_current: true if the subtitle that would be displayed through the statement {{ $gimme-&gt;article-&gt;&lt;article_type_attribute&gt; }} is the same as the subtitle defined in the template environment (see also the chapter &quot;Subtitle (subheads in long articles)&quot; and current_subtitle_no(&lt;field_name&gt;) above)</li>
<li>has_previous_subtitles: true if the current subtitle from this field was not the first subtitle</li>
<li>has_next_subtitles: true if the current subtitle from this field was not the last subtitle</li>
</ul>
<p>Example: displaying the first paragraph of the dynamic field &quot;content&quot;:</p>
<pre><code>$gimme-&gt;article-&gt;content-&gt;first_paragraph</code></pre>
<p><strong>Note regarding the attribute type-&gt;[&lt;article_type&gt;-&gt;]&lt;article_type_attribute&gt;:</strong></p>
<p>In Newscoop the table cell containing the image link in article body fields has the class <em>cs_img</em> and the cell containing the caption text has the class <em>caption</em>; this allows the web designer to change the layout of the article images by using a CSS file. The image link has the following structure:</p>
<pre class="prettyprint linenums"><code>&lt;table border=&quot;0&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; class=&quot;cs_img&quot; align=left&gt;
  &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;
      &lt;img src=&quot;/get_img?NrArticle=143&amp;NrImage=1&quot; border=&quot;0&quot;
           hspace=&quot;5&quot; vspace=&quot;5&quot;&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;&lt;td align=&quot;center&quot; class=&quot;caption&quot;&gt;Newscoop team&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;</code></pre>
<p><strong>Note regarding the attribute type-&gt;[&lt;article_type&gt;-&gt;]&lt;article_type_attribute&gt;:</strong></p>
<p>The subtitle in the article body fields has the class <em>articlesubhead</em>; this allows the web designer to change the layout of the subtitles by using a CSS file. The subtitle anchor has the following structure:</p>
<pre class="prettyprint linenums"><code>&lt;span class=&quot;articlesubhead&quot;&gt;
    &lt;a name=&quot;a1.250_s1&quot;&gt;Version 2.3.0 - 2.3.1&lt;/a&gt;
&lt;/span&gt;</code></pre>
<p>The structure of the anchor name is:</p>
<p>a&lt;language_identifier&gt;.&lt;article_number&gt;_s&lt;subtitle_number&gt;</p>
<h2>Article Attachment</h2>
<p>The article attachment object is usually initialized inside a list of article attachments. It is not initialized at the beginning of the template and can not be initialized by other Newscoop functions. The article attachment object has the following properties:</p>
<ul>
<li>identifier: the attachment identifier in the Newscoop database (integer value)</li>
<li>file_name: the name of the attached document</li>
<li>mime_type: the mime type of the attached document</li>
<li>extension: the file extension of the attached document</li>
<li>description: the user filled description field of the attached document in the current language</li>
<li>size_b: the size of the attached document in bytes</li>
<li>size_kb: the size of the attached document in kilobytes</li>
<li>size_mb: the size of the attached document in megabytes</li>
<li>defined: boolean value (true/false) - true if the attachment was set in the current environment; false otherwise</li>
</ul>
<h3>Examples</h3>
<p>Taken from Template Pack &quot;The Custodian&quot; (date 2011-03-15) file &quot;if-audio.tpl&quot;</p>
<pre class="prettyprint"><code>{{ if ($gimme-&gt;attachment-&gt;extension == mp3) || ($gimme-&gt;attachment-&gt;extension == ogg) }}</code></pre>
<p>Taken from Template Pack &quot;The Custodian&quot; (date 2011-03-15) file &quot;if-audio.tpl&quot;</p>
<pre class="prettyprint"><code>&lt;div class=&quot;audio-attachment-description&quot;&gt;{{ $gimme-&gt;attachment-&gt;description }}&lt;/div&gt;</code></pre>
<p>Taken from Template Pack &quot;The Custodian&quot; (date 2011-03-15) file &quot;if-audio.tpl&quot;</p>
<pre class="prettyprint linenums"><code>&lt;audio controls&gt;
    &lt;source src=&quot;http://{{ $gimme-&gt;publication-&gt;site }}{{ uri options=&quot;articleattachment&quot; }}&quot; type=&quot;{{ $gimme-&gt;attachment-&gt;mime_type }}&quot;&gt;
&lt;/audio&gt;</code></pre>
<h2>Article Comment</h2>
<p>The comment object is usually initialized inside a list of article comments. It can be initialized at the beginning of the template from the URL request but can not be initialized by other Newscoop functions. The article comment object has the following properties:</p>
<ul>
<li>identifier: the numerical identifier of the article comment from the database</li>
<li>real_name: the real name of the reader who posted the comment; the reader must be a registered Newscoop user; for anonymous readers this attribute will return an empty string</li>
<li>nickname: the nickname of the reader who posted the comment</li>
<li>reader_email: the email of the reader who posted the comment</li>
<li>anonymous_author: whether the reader is anonymous or not</li>
<li>submit_date: the date and time the comment was submitted</li>
<li>subject: the subject of the article comment</li>
<li>content: the content of the article comment</li>
<li>content_real: the raw representation of the content</li>
<li>level: the level of the current comment in the tree structure of the comments</li>
<li>article: the article where this comment was submitted to - object of type article</li>
<li>defined: true if the comment object had a valid value</li>
</ul>
<h3>Example</h3>
<pre class="prettyprint linenums"><code>{{ list_article_comments columns=&quot;2&quot; order=&quot;bydate desc&quot;}}
{{ if $gimme-&gt;current_list-&gt;at_beginning }}
  &lt;h2&gt;{{ $gimme-&gt;article-&gt;comment_count }} Response(s) to &amp;#8220;{{ $gimme-&gt;article-&gt;name }}&amp;#8221;&lt;/h2&gt;
  &lt;ol class=&quot;commentlist&quot;&gt;
{{ /if }}
   &lt;li class=&quot;comment {{ if $gimme-&gt;current_list-&gt;column == &quot;1&quot; }}odd{{ else }}even{{ /if }}&quot;&gt;
      &lt;div class=&quot;comment-head cl&quot;&gt;
         &lt;div class=&quot;user-meta&quot;&gt;
             &lt;strong class=&quot;name&quot;&gt;{{ $gimme-&gt;comment-&gt;nickname }}&lt;/strong&gt; {{ $gimme-&gt;comment-&gt;submit_date|camp_date_format:&quot;%e.%m.%Y at %H:%i&quot; }}
          &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;comment-entry&quot;&gt;
          &lt;p&gt;{{ $gimme-&gt;comment-&gt;content }}&lt;/p&gt;
      &lt;/div&gt;
   &lt;/li&gt;
{{ if $gimme-&gt;current_list-&gt;at_end }}
  &lt;/ol&gt;
{{ /if }}
{{ /list_article_comments }}</code></pre>
<h2>Article Location</h2>
<p><em>Note: this works only in Newscoop 3.5.0 and newer versions.</em></p>
<p>Maps require jQuery: In order to use display maps you must include jQuery in the header of your document, with a link like this:</p>
<p>&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&quot;&gt;</p>
<p>The article &quot;location&quot; object is usually initialized inside a list of articles. It is not initialized at the beginning of the template and can not be initialized by other Newscoop functions. The article location object has the following properties:</p>
<ul>
<li>name: the location's name</li>
<li>latitude: latitude in degrees</li>
<li>longitude: longitude in degrees</li>
<li>text: location's text description</li>
<li>content: location's rich text description</li>
<li>multimedia: list of multimedia items related to the location, see the &quot;Location Multimedia&quot; object.</li>
</ul>
<h3>Examples</h3>
<pre class="prettyprint linenums"><code>{{ list_article_locations }}
    {{ if $gimme-&gt;location-&gt;enabled }}
        {{ $gimme-&gt;location-&gt;name }}{{ if $gimme-&gt;current_list-&gt;at_end }}{{ else }}, {{ /if }}
    {{ /if }}
{{ /list_article_locations }}</code></pre>
<h2>Listing all information for locations in an article</h2>
<pre class="prettyprint linenums"><code>&lt;h2&gt;List article with geolocation information&lt;/h2&gt;
&lt;ul&gt;
{{ list_articles}}
  {{ list_article_locations }}
    {{ if $gimme-&gt;location-&gt;enabled }}
      {{ if $gimme-&gt;current_list-&gt;at_beginning }}
        &lt;ul&gt;
          &lt;li&gt;LOCATION DATA FOR: {{ $gimme-&gt;article-&gt;name }}&lt;/li&gt;
        &lt;ul&gt;
      {{ /if }}
            &lt;li&gt;list index: {{ $gimme-&gt;current_list-&gt;index }}&lt;/li&gt;
            &lt;li&gt;name: {{ $gimme-&gt;location-&gt;name }}&lt;/li&gt;
            &lt;li&gt;latitude: {{ $gimme-&gt;location-&gt;latitude }}&lt;/li&gt;
            &lt;li&gt;longitude: {{ $gimme-&gt;location-&gt;longitude }}&lt;/li&gt;
            &lt;li&gt;text: {{ $gimme-&gt;location-&gt;text }}&lt;/li&gt;
            &lt;li&gt;content: {{ $gimme-&gt;location-&gt;content }}&lt;/li&gt;
            &lt;li&gt;multimedia:&lt;/li&gt;
              &lt;ul&gt;
                {{ foreach from=`$gimme-&gt;location-&gt;multimedia` item=multimediaitem }}
                  &lt;li&gt;src: {{ $multimediaitem-&gt;src }}&lt;/li&gt;
                  &lt;li&gt;type: {{ $multimediaitem-&gt;type }}&lt;/li&gt;
                  &lt;li&gt;spec: {{ $multimediaitem-&gt;spec }}&lt;/li&gt;
                  &lt;li&gt;width: {{ $multimediaitem-&gt;width }}&lt;/li&gt;
                  &lt;li&gt;height: {{ $multimediaitem-&gt;height }}&lt;/li&gt;
                {{ /foreach }}
              &lt;/ul&gt;
      {{ if $gimme-&gt;current_list-&gt;at_end }}
          &lt;/ul&gt;
        &lt;/ul&gt;
      {{ /if }}
    {{ /if }}
  {{ /list_article_locations }}
{{ /list_articles }}
&lt;/ul&gt;</code></pre>
<p>Ushahidi compatible KML format. You can use this as a feed to call as a layer in Ushahidi</p>
<pre class="prettyprint linenums"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;kml xmlns=&quot;http://earth.google.com/kml/2.2&quot;&gt;
&lt;Document&gt;
  &lt;name&gt;{{ $gimme-&gt;publication-&gt;name }}&lt;/name&gt;
  &lt;description&gt;&lt;![CDATA[ .]]&gt;&lt;/description&gt;
{{ list_articles}}
  {{ list_article_locations }}
    {{ if $gimme-&gt;location-&gt;enabled }}
  &lt;Style id=&quot;style{{ $gimme-&gt;article-&gt;number }}-{{ $gimme-&gt;current_list-&gt;index }}&quot;&gt;
    &lt;IconStyle&gt;
      &lt;Icon&gt;
        &lt;href&gt;http://www.sourcefabric.org/javascript/geocoding/markers/marker-gold.png&lt;/href&gt;
      &lt;/Icon&gt;
    &lt;/IconStyle&gt;
  &lt;/Style&gt;
    {{ /if }}
  {{ /list_article_locations }}
{{ /list_articles }}
{{ list_articles}}
  {{ list_article_locations }}
    {{ if $gimme-&gt;location-&gt;enabled }}
  &lt;Placemark&gt;
    &lt;name&gt;{{ $gimme-&gt;location-&gt;name }} @ {{ $gimme-&gt;article-&gt;name }}&lt;/name&gt;
    &lt;description&gt;&lt;/description&gt;
    &lt;styleUrl&gt;#style{{ $gimme-&gt;article-&gt;number }}-{{ $gimme-&gt;current_list-&gt;index }}&lt;/styleUrl&gt;
    &lt;Point&gt;
      &lt;coordinates&gt;{{ $gimme-&gt;location-&gt;longitude }},{{ $gimme-&gt;location-&gt;latitude }},0.000000&lt;/coordinates&gt;
    &lt;/Point&gt;
  &lt;/Placemark&gt;
    {{ /if }}
  {{ /list_article_locations }}
{{ /list_articles }}
&lt;/Document&gt;
&lt;/kml&gt;</code></pre>
<p><span id="ch066_author-and-author-biography.xhtml"></span></p>
<h1>Author and author biography</h1>
<h2>Author</h2>
<p><em>Note: this works only in Newscoop 3.5.0 and newer versions.</em></p>
<p>The article author object is usually initialized inside a list of article authors. It is also always possible to access this object for the current article in the environment (see &quot;Article&quot;). It is not initialized at the beginning of the template and can not be initialized by other Newscoop functions. The article author object has the following properties:</p>
<ul>
<li>first_name: the author's first name</li>
<li>last_name: the author's last name</li>
<li>name: the author's full name</li>
<li>email: the author's e-mail address</li>
<li>type: the author type</li>
<li>biography: the author biography - see &quot;Author Biography&quot; object</li>
<li>picture: the author picture - see &quot;Image&quot; object</li>
<li>defined: boolean value (true/false) - true if the author was set in the current environment; false otherwise</li>
</ul>
<p><strong>Examples</strong></p>
<pre class="prettyprint linenums"><code>{{ list_article_authors order=&quot;bylastname&quot; }}
 &lt;p class=&quot;author-head&quot;&gt;
  {{ $gimme-&gt;author-&gt;type }}: {{ $gimme-&gt;author-&gt;name }}
 &lt;/p&gt;
 &lt;p class=&quot;author-bio&quot;&gt;
  &lt;img src=&quot;{{ $gimme-&gt;author-&gt;picture-&gt;imageurl }}&quot; class=&quot;author-pic&quot;&gt;
  {{ $gimme-&gt;author-&gt;biography-&gt;text }}
 &lt;/p&gt;
{{ /list_article_authors }}</code></pre>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;defined }} by
 {{ $gimme-&gt;article-&gt;author-&gt;first_name }}
  {{ $gimme-&gt;article-&gt;author-&gt;last_name }}
   {{ $gimme-&gt;article-&gt;author-&gt;type }}
{{ /if }}</code></pre>
<h2>Author Biography</h2>
<p><em>Note: this works only in Newscoop 3.5.0 and newer versions.</em></p>
<p>The author biography object is usually initialized within the &quot;Author&quot; object. It is not a main object as it can only be used through the &quot;Author&quot; object. Also, it is not initialized at the beginning of the template and cannot be initialized by other Newscoop functions. The author biography object has the following properties:</p>
<ul>
<li>first_name: the translated author's first name</li>
<li>last_name: the translated author's last name</li>
<li>name: the translated author's full name</li>
<li>text: the translated author's biography</li>
<li>defined: boolean value (true/false) - true if the author biography was set in the current environment; false otherwise</li>
</ul>
<p><strong>Example</strong></p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;article-&gt;defined }} by
 {{ $gimme-&gt;article-&gt;author-&gt;biography-&gt;name }}
  ({{ $gimme-&gt;article-&gt;author-&gt;type }})&lt;br /&gt;
   &lt;p&gt;{{ $gimme-&gt;article-&gt;author-&gt;biography-&gt;text }}&lt;/p&gt;
{{ /if }}</code></pre>
<p><span id="ch067_browser.xhtml"></span></p>
<h1>Browser</h1>
<p>(This chapter is based on the PHP browser detection script by Harald Hope, available under GNU GPL v3 from: <a href="http://techpatterns.com/downloads/scripts/browser_detection_php_ar.txt" class="uri" title="Browser detection script">http://techpatterns.com/downloads/scripts/browser_detection_php_ar.txt</a>)<br />
</p>
<p>The browser object is set at the beginning of the main template based on the request URL. The browser object can be called as follows:</p>
<pre><code>{{ $gimme-&gt;browser }} or {{ $gimme-&gt;browser-&gt;browser_name }}</code></pre>
<p>The above statement returns the full browser name string, if available, otherwise it returns ''.  The statement:</p>
<pre><code>{{ $gimme-&gt;browser-&gt;browser_number }}</code></pre>
<p>returns the browser version number, if available, otherwise it returns ''. The statement:</p>
<pre><code>{{ $gimme-&gt;browser-&gt;browser_working }}</code></pre>
<p>returns the working shorthand browser name: ie, op, moz, konq, saf, ns4, webkit, and some others. If not shorthand, it will probably just return the full browser name, like lynx. The statement:</p>
<pre><code>{{ $gimme-&gt;browser-&gt;dom }}</code></pre>
<p>returns true/false if it is a basic dom browser, ie &gt;= 5, opera &gt;= 5, all new mozillas, safaris, or konquerors. The statement:</p>
<pre><code>{{ $gimme-&gt;browser-&gt;ie_version }}</code></pre>
<p>tests to see what general IE it is. Possible return values:</p>
<p>     ie9x - all new msie 9 or greater - note that if in compat mode, 7,8,9 all show as 7<br />
     ie7x - all new msie 7 or greater<br />
     ie5x - msie 5 and 6, not mac<br />
     ieMac - msie 5.x mac release<br />
     ie4 - msie 4<br />
     old - pre msie 4<br />
</p>
<p>The statement:<br />
</p>
<pre><code>{{ $gimme-&gt;browser-&gt;mobile_data }}</code></pre>
<p>returns an array of data about mobiles. Note the browser/os number data is very unreliable so don't count on that. No Blackberry version handling is done explicitly. Make sure to test if this is an array, because if it's not mobile it will be null, not an array listed by array index number:</p>
<p>     0 - $mobile_device<br />
     1 - $mobile_browser<br />
     2 - $mobile_browser_number<br />
     3 - $mobile_os<br />
     4 - $mobile_os_number<br />
     5 - $mobile_server<br />
     6 - $mobile_server_number<br />
     7 - $mobile_device_number<br />
</p>
<p>    Note: $mobile_browser only returns if a specifically mobile browser is detected, like minimo. Same for mobile os, with the exception of GNU/Linux. Otherwise the standard script os/browser data is used. $mobile_server is a handheld service like docomo, novarro-vision, etc. Sometimes the string will contain no other usable data than this to determine if it's handheld or not.</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;browser-&gt;ua_type != &quot;mobile&quot; }}
  {{ assign var=&quot;browserdetect_mobile_device&quot; value=&quot;false&quot; }}
  {{ assign var=&quot;browserdetect_mobile_os&quot; value=&quot;false&quot; }}
  {{ assign var=&quot;browserdetect_mobile_os_number&quot; value=&quot;false&quot; }}
{{ else }}
  {{ assign var=&quot;mobile_data&quot; value=`$gimme-&gt;browser-&gt;mobile_data` }}
  {{ php }}
  $mobile_data = $this-&gt;get_template_vars(&#39;mobile_data&#39;);
  $this-&gt;assign(&#39;browserdetect_mobile_device&#39;, $mobile_data[0]);
  $this-&gt;assign(&#39;browserdetect_mobile_os&#39;, $mobile_data[3]);
  $this-&gt;assign(&#39;browserdetect_mobile_os_number&#39;, $mobile_data[4]);
  {{ /php }}
{{ /if }}</code></pre>
<p>The statement:</p>
<pre><code>{{ $gimme-&gt;browser-&gt;moz_data }}</code></pre>
<p>returns array of mozilla / gecko information. Return Array listed by index number:</p>
<p>      0 - $moz_type [moz version - the specific brand name that is, eg: firefox)<br />
      1 - $moz_number - the full version number of $moz_type (eg: for firefox: 3.6+2b)<br />
      2 - $moz_rv - the Mozilla rv version number, math comparison version. This tells you what gecko engine is running in the browser (eg rv: 1.8)<br />
      3 - $moz_rv_full - rv number (for full rv, including alpha and beta versions: 1.8.1-b3)<br />
      4 - $moz_release_date - release date of the browser</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;browser-&gt;browser_working == &quot;moz&quot; }}
  {{ assign var=&quot;browser_data&quot; value=`$gimme-&gt;browser-&gt;moz_data` }}
  {{ php }}
  $browser_data = $this-&gt;get_template_vars(&#39;browser_data&#39;);
  $this-&gt;assign(&#39;browserdetect_name&#39;, $browser_data[0]);
  $this-&gt;assign(&#39;browserdetect_engine&#39;, &quot;gecko&quot;);
  $this-&gt;assign(&#39;browserdetect_engineversion&#39;, $browser_data[2]);
  $this-&gt;assign(&#39;browserdetect_version&#39;, $browser_data[1]);
  {{ /php }}
{{ /if }}</code></pre>
<p>The statement:</p>
<pre><code>{{ $gimme-&gt;browser-&gt;os }}</code></pre>
<p>returns which os is being used - win, nt, mac, OR iphone, blackberry, palmos, palmsource, symbian, beos, os2, amiga, webtv, linux, unix. The statement:</p>
<pre><code>{{ $gimme-&gt;browser-&gt;os_number }}</code></pre>
<p>returns windows versions, 95, 98, ce, me, nt: 4; 5 [windows 2000]; 5.1 [windows xp]; 5.2 [Server 2003]; 6.0 [Windows Vista], 6.1 [Windows 7]. Only win, nt, mac, iphone return os numbers (mac/iphone return 10 if OS X.) OR returns GNU/Linux distro/unix release name, otherwise returns null.</p>
<pre><code>{{ $gimme-&gt;browser-&gt;run_time }}</code></pre>
<p>The time it takes this script to execute from start to point of returning value. Requires PHP 5 or greater. Returns time in seconds to 8 decimal places: 0.00245687. Run time does not count the time used by PHP to include/parse the file initially. That total time is about 5-10x longer. Because subsequent script run-throughs go very fast, you will see the seconds go from something like 0.00115204 for the first time, to something like 0.00004005 for second and more runs. The statement:</p>
<pre><code>{{ $gimme-&gt;browser-&gt;safe }}</code></pre>
<p>returns true/false, you can determine what makes the browser be safe lower down, currently it's set for ns4 and pre version 1 mozillas not being safe, plus all older browsers. The statement:</p>
<pre><code>{{ $gimme-&gt;browser-&gt;true_ie_number }}</code></pre>
<p>returns the true version of msie running, ignoring the compat mode version.</p>
<p>Note that php will turn 7.0 to 8 when adding 1, so keep that in mind in your tests. 7.1 will become 8.1 as expected, however. This test currently only tests for 7.x -&gt; 8.x</p>
<p>FYI: in PHP, 7.0 == 7 is true but 7.0 === 7 is NOT true. If this is null but set, then it is NOT running in compatibility mode. The statement:</p>
<pre><code>{{ $gimme-&gt;browser-&gt;ua_type }}</code></pre>
<p>returns one of the following:</p>
<p>      bot (web bot)<br />
      bro (normal browser)<br />
      bbro (simple browser)<br />
      mobile (handheld)<br />
      dow (downloading agent)<br />
      lib (http library)</p>
<p>The statement:<br />
</p>
<pre><code>{{ $gimme-&gt;browser-&gt;webkit_data }}</code></pre>
<p>returns array of webkit data. The Return Array is listed by index number:</p>
<p>      0 - $webkit_type [webkit version name (Eg. chrome)]<br />
      1 - $webkit_type_number [webkit version number (Eg. Chrome's: 1.2)]<br />
      2 - $browser_number [the actual webkit version number (Eg. Webkit's: 436)]</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;browser-&gt;browser_working == &quot;webkit&quot; }}
  {{ assign var=&quot;browser_data&quot; value=`$gimme-&gt;browser-&gt;webkit_data` }}
  {{ assign var=&quot;browserdetect_engineversion&quot; value=`$gimme-&gt;browser-&gt;browser_number` }}
  {{ php }}
  $browser_data = $this-&gt;get_template_vars(&#39;browser_data&#39;);
  $this-&gt;assign(&#39;browserdetect_name&#39;, $browser_data[0]);
  $this-&gt;assign(&#39;browserdetect_engine&#39;, &quot;webkit&quot;);
  $this-&gt;assign(&#39;browserdetect_version&#39;, $browser_data[1]);
  {{ /php }}
{{ /if }}</code></pre>
<p><span id="ch068_image.xhtml"></span></p>
<h1>Image</h1>
<p>The image object is usually initialized inside a list of article images or a list of images. It is not initialized at the beginning of the template and can not be initialized by another Newscoop function. The image object has the following properties:</p>
<ul>
<li>number: the image identifier in the images archive</li>
<li>photographer: the name of the photographer that took the picture</li>
<li>place: a short text containing the place where the picture was taken</li>
<li>description: short description of the picture</li>
<li>caption: displays the image caption field</li>
<li>&lt;date_attribute&gt;: image creation date field (year, month, day etc.)</li>
<li>date: image creation date; you can customize the date display format by using the filter camp_date_format (see the chapter &quot;Date and e-mail formatting&quot; )</li>
<li>last_update: displays the time the image was updated</li>
<li>article_index: returns the index of the current image inside the article defined in the environment; if the image wasn't defined in the environment, the article was not defined or the image didn't belong to the article, returns null</li>
<li>imageurl: returns the URL of the current image</li>
<li>thumbnailurl: returns the URL of the current image's thumbnail</li>
<li>type: the subtype from the mimetype field; e.g.: png, jpeg, gif etc.</li>
<li>is_local: 1 if the image was stored locally, 0 if external</li>
<li>defined: boolean value (true/false) - true if the image was set in the current environment; false otherwise</li>
</ul>
<p>&lt;date_attribute&gt; may be one of the following:</p>
<ul>
<li>year: year as a number (four digits)</li>
<li>mon: month as a number (1..12)</li>
<li>mday: day of the month as a number (1..31)</li>
<li>yday: day of the year (1..366)</li>
<li>wday: day of the week as a number (0=Sunday..6=Saturday)</li>
<li>hour: hour (0..23)</li>
<li>min: minute (two digits)</li>
<li>sec: seconds (two digits)</li>
<li>mon_name: name of the month</li>
<li>wday_name: day of the week</li>
</ul>
<p><span id="ch069_issue.xhtml"></span></p>
<h1>Issue</h1>
<p>The issue object is set at the beginning of the main template, based on the request URL. This object can be changed using the set_issue function. The issue object has the following properties:</p>
<ul>
<li>name: issue name</li>
<li>number: issue identifier in the Newscoop database (integer value)</li>
<li>&lt;date_attribute&gt;: issue publish date field (year, month, day etc.)</li>
<li>date: the issue publish date; you can customize the date display format by using the filter camp_date_format (see the chapter &quot;Date and e-mail formatting&quot;)</li>
<li>publish_date: alias of date</li>
<li>template: the full path of the issue template file</li>
<li>publication: the publication to which this issue belongs (see the chapter &quot;Publication&quot;)</li>
<li>language: the issue language (see the chapter &quot;Language&quot;)</li>
<li>url_name: the issue name used in URL display (see the chapter &quot;Creating An Issue&quot; in <em>Newscoop for Journalists and Editors</em>)</li>
<li>defined: boolean value (true/false) - true if the issue was set in the current environment; false otherwise</li>
<li>is_current: true if the issue set in the environment was the latest published issue</li>
<li>is_published: true if the issue has been and is currently published; false otherwise</li>
</ul>
<p>&lt;date_attribute&gt; may be one of the following:</p>
<ul>
<li>year: year as a number (four digits)</li>
<li>mon: month as a number (1..12)</li>
<li>mday: day of the month as a number (1..31)</li>
<li>yday: day of the year (1..366)</li>
<li>wday: day of the week as a number (0=Sunday..6=Saturday)</li>
<li>hour: hour (0..23)</li>
<li>min: minute (two digits)</li>
<li>sec: seconds (two digits)</li>
<li>mon_name: name of the month</li>
<li>wday_name: day of the week</li>
</ul>
<p><span id="ch070_language.xhtml"></span></p>
<h1>Language</h1>
<p>The language object is set at the beginning of the main template, based on the request URL. This object can be changed using the set_language function. The language object has the following properties:</p>
<ul>
<li>name: language name</li>
<li>number: language identifier in the Newscoop database (integer value)</li>
<li>english_name: language name in English</li>
<li>code: language international code</li>
<li>defined: boolean value (true/false) - true if the language was set in the current environment; false otherwise</li>
</ul>
<p>If you want to verify whether the current environment language is the same as the initial language, compare it to the default_language object. For example:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;language == $gimme-&gt;default_language }}
...
{{ /if }}</code></pre>
<p>If you want to display parts of your templates in a different language according to the language selected by the user, you can use something similar to the following code. This snippet was used for a bilingual publication.</p>
<pre class="prettyprint"><code>{{ if $gimme-&gt;language-&gt;code == &quot;en&quot; }}
 archive
  {{ else }}
   [trans]archive
{{ /if }}</code></pre>
<p><span id="ch071_publication.xhtml"></span></p>
<h1>Publication</h1>
<p>The publication object is set at the beginning of the main template, based on the request URL. This object can be changed using the set_publication function. The publication object has the following properties:</p>
<ul>
<li>name: publication name</li>
<li>identifier: publication identifier in the Newscoop database (integer value)</li>
<li>default_language: the publication default language - object of type Language</li>
<li>site: publication site</li>
<li>defined: boolean value (true/false) - true if the publication was set in the current environment; false otherwise</li>
<li>public_comments: true if the public (anonymous readers) are allowed to post comments</li>
<li>moderated_comments: true if the comments posted by the current reader will be moderated</li>
<li>captcha_enabled: true if CAPTCHA will be used to detect spam</li>
<li>subscription_currency: returns the currency used for subscription payments</li>
<li>subscription_time_unit: returns the time unit (day, week, month, year) used to set the subscription length</li>
<li>subscription_trial_time: returns the default time of the trial subscription in time units</li>
<li>subscription_paid_time: returns the default time of the paid subscription in time units</li>
<li>subscription_time: returns the default time of the subscription in time units; the subscription type should be defined through request parameters in the user form (see the chapter &quot;Subscription form&quot; )</li>
<li>subscription_unit_cost: returns the cost of the time unit for the paid subscription, for a single translation of the publication</li>
<li>subscription_unit_cost_all_lang: returns the cost of the time unit for the paid subscription for all translations of the publication</li>
</ul>
<p>For more details on these attributes see also the chapter &quot;Creating a Publication&quot; in <em>Newscoop for Journalists and Editors</em>.</p>
<p><span id="ch072_section.xhtml"></span></p>
<h1>Section</h1>
<p>The <em>section</em> object is set at the beginning of the main template, based on the request URL. This object can be changed using the set_section function. The section object has the following properties:</p>
<ul>
<li>name: section name</li>
<li>number: section identifier in the Newscoop database</li>
<li>description: section description text</li>
<li>url_name: the section name used in URL display (see the <em>&quot;Creating a section&quot;</em> chapter in <em>Newscoop for Journalists and Editors</em>)</li>
<li>template: the full path of the issue template file</li>
<li>publication: the publication to which this section belongs to - object of type Publication</li>
<li>issue: the issue to which this section belongs to - object of type Issue</li>
<li>language: the section language - object of type Language</li>
<li>defined: boolean value (true/false) - true if the section was set in the current environment; false otherwise</li>
</ul>
<p><span id="ch073_subscription.xhtml"></span></p>
<h1>Subscription</h1>
<p>The user subscription object is set at the beginning of the main template based on the session cookies, or if the Login action took place. It can not be initialized by other Newscoop functions. The subscription object has the following properties:</p>
<ul>
<li>identifier: the subscription identifier in the Newscoop database</li>
<li>currency: the currency identifier</li>
<li>type: one of the following values: &quot;trial&quot;, &quot;paid&quot;</li>
<li>start_date: returns the start date of the subscription</li>
<li>expiration_date: the expiration date in the format &quot;yyyy-mm-dd hh:mm:ss&quot;</li>
<li>is_active: true if the subscription was active</li>
<li>is_valid: true if the subscription was active and did not expire</li>
<li>publication: returns the publication to which the subscription was made</li>
<li>has_section(&lt;section_number&gt;): returns true if the subscription included the given section</li>
<li>defined: true if the subscription object had a valid value</li>
</ul>
<p><span id="ch074_subtitle-subheads-in-long-articles.xhtml"></span></p>
<h1>Subtitle (subheads in long articles)</h1>
<p>The subtitle object is usually initialized inside a list of subtitles. It can be initialized at the beginning of the template from the URL request but can not be initialized by other Newscoop functions. The subtitle object has the following properties:</p>
<ul>
<li>number: the order number of the subtitle (starts from 0)</li>
<li>name: subtitle name without the HTML formatting</li>
<li>field_name: the article field name to which the subtitle belongs</li>
<li>formatted_name: the subtitle name with HTML formatting</li>
<li>content: the subtitle content</li>
<li>count: the number of subtitles in the field content</li>
<li>has_previous_subtitles: true if previous subtitles exist</li>
<li>has_next_subtitles: true if subtitles exist after the current subtitle</li>
</ul>
<p><span id="ch075_template.xhtml"></span></p>
<h1>Template</h1>
<p>The template object is set at the beginning of the main template based on the request URL. This object cannot be changed using Newscoop functions. The template object has the following properties:</p>
<ul>
<li>name: the template file name</li>
<li>identifier: the template identifier in the Newscoop database</li>
<li>type: returns one of the following values: issue, section, article, default, nontpl</li>
<li>defined: true if the template object had a valid value</li>
</ul>
<p><span id="ch076_topic.xhtml"></span></p>
<h1>Topic</h1>
<p>The topic object is usually initialized inside a list of article topics or a list of subtopics. It can be initialized at the beginning of the template from the URL request, or by using the set_topic function in Newscoop. The topic object has the following properties:</p>
<ul>
<li>name: returns the topic name in the current language defined in the template environment</li>
<li>value: returns the topic value in the following format: &lt;topic_name_lang_code&gt; = &lt;topic_name&gt;:&lt;language_code&gt;</li>
<li>identifier: the topic identifier in the Newscoop database</li>
<li>defined: true if the topic object had a valid value</li>
</ul>
<p><span id="ch077_url.xhtml"></span></p>
<h1>URL</h1>
<p>The URL object follows the changes in the template environment, meaning that every time an object in the environment changes the URL object is updated. It has the following properties:</p>
<ul>
<li>is_valid: returns true if the URL was valid, false otherwise. On invalid URLs Newscoop returns a &quot;404 not found&quot; HTTP response. This option only works in Newscoop 3.4.0 and newer versions. Here is example code which could be used in a 404 page:<br />
</li>
</ul>
<pre class="prettyprint linenums"><code>{{ if !$gimme-&gt;url-&gt;is_valid }}
 &lt;h3&gt;The requested page was not found.&lt;/h3&gt;
{{ set_language name=`$gimme-&gt;publication-&gt;default_language-&gt;english_name` }}
  {{ set_current_issue }}
{{ else }}
    &lt;!-- display content --&gt;
{{ /if }}</code></pre>
<ul>
<li>uri: returns the complete link URI, and is equivalent to:</li>
</ul>
<pre class="prettyprint"><code>{{ $gimme-&gt;url-&gt;uri_path }}?{{ $gimme-&gt;url-&gt;url_parameters }}</code></pre>
<ul>
<li>uri_path: returns only the path part of the URI, the part before the parameters list. For example, if /en/1/2/3?param1=text was the full URI, uri_path is /en/1/2/3</li>
<li>url: returns the complete URL in the form:</li>
</ul>
<pre class="prettyprint"><code>http://&lt;default_site_alias&gt;&lt;uri&gt;</code></pre>
<ul>
<li>url_parameters: returns a string containing the runtime environment parameters in URL format</li>
<li>form_parameters: the runtime environment parameters in HTML form format:</li>
</ul>
<pre class="prettyprint"><code>&lt;input type=&quot;hidden&quot; name=&quot;&lt;param_name&gt;&quot; value=&quot;&lt;param_value&gt;&quot;&gt;</code></pre>
<ul>
<li>base: returns the URL base in the form:</li>
</ul>
<pre class="prettyprint"><code>http[s]://&lt;server_name&gt;[:&lt;port&gt;]</code></pre>
<p>The port is not displayed if it's value was the default value (80 for HTTP, 443 for HTTPS)</p>
<ul>
<li>path: equivalent to uri_path</li>
<li>query: equivalent to url_parameters</li>
<li>type: returns the identifier of the URL type set in the publication (see also &quot;Creating A Publication&quot; in <em>Newscoop for Journalists and Editors</em>)</li>
<li>request_uri: equivalent to uri</li>
<li>scheme: one of the following values: http, https</li>
<li>host: the host name from the URL</li>
<li>port: the port to which the request was made</li>
<li>language: returns the language object corresponding to the language set in the URL; this value is always the same as the language in the environment (see the chapter &quot;Language&quot; for more details)</li>
<li>publication: returns an object corresponding to the publication identified by the &lt;server_name&gt;; this value is always the same as the publication in the environment (see the chapter &quot;Publication&quot; for more details)</li>
<li>issue: returns an object corresponding to the issue specified in the URL (unset if the issue was not specified); this value is always the same as the issue in the environment (see the chapter &quot;Issue&quot; for more details)</li>
<li>section: returns an object corresponding to the section specified in the URL (unset if the section was not specified); this value is always the same as the section in the environment (see the chapter &quot;Section&quot; for more details)</li>
<li>article: returns an object corresponding to the article specified in the URL (unset if the article was not specified); this value is always the same as the article in the environment (see the chapter &quot;Article object and attachment, comment, location&quot; for more details)</li>
</ul>
<p>The URL object has the following functions:</p>
<ul>
<li>get_parameter(&lt;parameter_name&gt;): returns the value of the given parameter, null if not set</li>
<li>set_parameter(&lt;parameter_name&gt;, &lt;parameter_value&gt;): set the given parameter to the given value</li>
<li>reset_parameter(&lt;parameter_name&gt;): unset the given parameter</li>
</ul>
<p><span id="ch078_user.xhtml"></span></p>
<h1>User</h1>
<p>The user object is set at the beginning of the main template based on the session cookies, or if the Login action or Edit user action took place. It can not be initialized by other Newscoop functions. The user object has the following properties:</p>
<ul>
<li>identifier: the user identifier in the Newscoop database</li>
<li>name: the user's full name</li>
<li>uname: the user's login name</li>
<li>gender: &quot;M&quot; or &quot;F&quot;</li>
<li>email</li>
<li>city</li>
<li>str_address: street address</li>
<li>state</li>
<li>phone</li>
<li>fax</li>
<li>country: the country name</li>
<li>country_code: the country code</li>
<li>contact</li>
<li>second_phone</li>
<li>postal_code</li>
<li>employer</li>
<li>position</li>
<li>interests</li>
<li>how</li>
<li>languages</li>
<li>improvements</li>
<li>field1</li>
<li>field2</li>
<li>field3</li>
<li>field4</li>
<li>field5</li>
<li>text1</li>
<li>text2</li>
<li>text3</li>
<li>pref1</li>
<li>pref2</li>
<li>pref3</li>
<li>pref4</li>
<li>title</li>
<li>age</li>
<li>defined: true if the user object had a valid value</li>
<li>logged_in: true if the user was defined and authenticated</li>
<li>blocked_from_comments: true if the user was blocked from posting comments</li>
<li>subscription: returns the first subscription assigned to this user; unset if the user is a staff member</li>
<li>is_admin: true if the user is a staff member, and can therefore log in to the Newscoop administration interface</li>
<li>has_permission(&lt;permission_name&gt;): true if the user is a staff member and has been given a specific permission in the Newscoop administration interface</li>
</ul>
<p><span id="ch079_default-objects-list-of-all-available-objects.xhtml"></span></p>
<h1>Default objects (list of all available objects)</h1>
<p>The default objects contain the information of a specific object at the beginning of the main template.<br />
</p>
<h2>Default Article</h2>
<p>The default_article object is set at the beginning of the main template based on the request URL and cannot be modified. It has the same attributes as the Article object.</p>
<h2>Default Issue</h2>
<p>The default_issue object is set at the beginning of the main template based on the request URL and cannot be modified. It has the same attributes as the Issue object.</p>
<h2>Default Language</h2>
<p>The default_language object is set at the beginning of the main template based on the request URL and cannot be modified. It has the same attributes as the Language object.</p>
<h2>Default Publication</h2>
<p>The default_publication object is set at the beginning of the main template based on the request URL and cannot be modified. It has the same attributes as the Publication object.</p>
<h2>Default Section</h2>
<p>The default_section object is set at the beginning of the main template based on the request URL and cannot be modified. It has the same attributes as the Section object.</p>
<h2>Default Template</h2>
<p>The default_template object is set at the beginning of the main template based on the request URL and cannot be modified. It has the same attributes as the Template object.</p>
<h2>Default Topic</h2>
<p>The default_topic object is set at the beginning of the main template based on the request URL and cannot be modified. It has the same attributes as the Topic object.</p>
<h2>Default URL</h2>
<p>The default_url object is set at the beginning of the main template based on the request URL and cannot be modified. It has the same attributes as the URL object.</p>
<p><span id="ch081_set-objects.xhtml"></span></p>
<h1>Set objects</h1>
<h2>Set Article</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment article to the one selected by the statement constraint. If the statement constraint was not valid, the section is not changed.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_article name=&quot;&lt;article_name&gt;&quot; }}</code></pre>
<p>Select the article having the specified name. If the supplied name was not valid, this parameter is not modified.</p>
<pre class="prettyprint"><code>{{ set_article number=&quot;&lt;article_number&gt;&quot; }}</code></pre>
<p>Select the article having the specified number. If the supplied number was not valid, this parameter is not modified.</p>
<h3>Constraints:</h3>
<p>Cannot be used inside &quot;list_articles&quot;, &quot;list_article_attachments&quot;, &quot;list_article_comments&quot;, &quot;list_article_topics&quot;, &quot;list_article_audio_attachments&quot;, &quot;list_search_results&quot; and &quot;list_subtitles&quot; statements.</p>
<p>See also &quot;Set Default Article&quot;, and &quot;Unset Article&quot;.</p>
<h2>Set Current Issue</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment issue to the last published issue.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_current_issue }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside any list statement.</p>
<p>See also &quot;Set Issue&quot;, &quot;Set Default Issue&quot;, and &quot;Unset Issue&quot;.</p>
<h2>Set Default Article</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment article to the &quot;default_article&quot;.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_default_article }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside &quot;list_articles&quot;, &quot;list_article_attachments&quot;, &quot;list_article_comments&quot;, &quot;list_article_topics&quot;, &quot;list_article_audio_attachments&quot;, &quot;list_search_results&quot; and &quot;list_subtitles&quot; statements.</p>
<p>See also &quot;Set Article&quot;, and &quot;Unset Article&quot;.</p>
<h2>Set Default Issue</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment issue to the &quot;default_issue&quot;.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_default_issue }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside any list statement.</p>
<p>See also &quot;Set Issue&quot;, &quot;Set Current Issue&quot;, and &quot;Unset Issue&quot;.</p>
<h2>Set Default Language</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment language to the &quot;default_language&quot;.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_default_language }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside any list statement.</p>
<p>See also &quot;Set Language&quot;, and &quot;Unset Language&quot;.</p>
<h2>Set Default Publication</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment publication to the &quot;default_publication&quot;.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_default_publication }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside any list statement.</p>
<p>See also &quot;Set Publication&quot;, and &quot;Unset Publication&quot;.</p>
<h2>Set Default Section</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment section to the &quot;default_section&quot;.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_default_section }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside &quot;list_sections&quot;, &quot;list_articles&quot;, &quot;list_article_attachments&quot;, &quot;list_article_comments&quot;, &quot;list_article_topics&quot;, &quot;list_article_audio_attachments&quot;, &quot;list_search_results&quot; and &quot;list_subtitles&quot; statements.</p>
<p>See also &quot;Set Section&quot;, and &quot;Unset Section&quot;.</p>
<h2>Set Default Topic</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment topic to the &quot;default_topic&quot;.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_default_topic }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside &quot;list_articles&quot; and &quot;list_article_topics&quot; statements.</p>
<p>See also &quot;Set Topic&quot;, and &quot;Unset Topic&quot;.</p>
<h2>Set Issue</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment issue to the one selected by the statement constraint. If the statement constraint was not valid, the issue is not changed.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_issue number=&quot;&lt;issue_number&gt;&quot; }}</code></pre>
<p>Select the issue having the specified number. If the number supplied was not valid, this parameter is not changed.</p>
<h3>Constraints:</h3>
<p>Cannot be used inside any list statement.</p>
<p>See also &quot;Set Default Issue&quot;, &quot;Set Current Issue&quot;, and &quot;Unset Issue&quot;.</p>
<h2>Set Language</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment language to the one selected by its English name. From this statement on, the language set is the newly chosen one. If the language name supplied was not valid, this variable is not modified.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_language name=&quot;&lt;language_name&gt;&quot; }}</code></pre>
<h3>Filters:</h3>
<p>&lt;language_name&gt; is the English name of the selected language.</p>
<h3>Constraints:</h3>
<p>Can not be used inside any list statement.</p>
<p>See also &quot;Set Default Language&quot;, and &quot;Unset Language&quot;.</p>
<h2>Set Publication</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment publication to the one selected by the statement constraint. If the statement constraint was not valid, the publication is not changed.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_publication name=&quot;&lt;publication_name&gt;&quot; }}</code></pre>
<p>Select the publication having the specified name. If the name supplied was not valid, this parameter is not modified.</p>
<pre class="prettyprint"><code>{{ set_publication identifier=&quot;&lt;publication_identifier&gt;&quot; }}</code></pre>
<p>Select the publication having the specified identifier. The publication identifier is a unique number associated to the publication and is supplied by the Newscoop administration interface.</p>
<h3>Constraints:</h3>
<p>Cannot be used inside any list statement.</p>
<p>See also &quot;Set Default Publication&quot;, and &quot;Unset Publication&quot;.</p>
<h2>Set Section</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment section to the one selected by the statement constraint. If the statement constraint was not valid, the section is not changed.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_section name=&quot;&lt;section_name&gt;&quot; }}</code></pre>
<p>Select the section having the specified name; this has to be written in the language of the context. If the name supplied was not valid, this parameter is not modified.</p>
<pre class="prettyprint"><code>{{ set_section number=&quot;&lt;section_number&gt;&quot; }}</code></pre>
<p>Select the section having the specified number; this is not dependent on context language. If the number supplied was not valid, this parameter is not modified.</p>
<h3>Constraints:</h3>
<p>Cannot be used inside &quot;list_sections&quot;, &quot;list_articles&quot;, &quot;list_article_attachments&quot;, &quot;list_article_comments&quot;, &quot;list_article_topics&quot;, &quot;list_article_audio_attachments&quot;, &quot;list_search_results&quot; and &quot;list_subtitles&quot; statements.</p>
<p>See also &quot;Set Default Section&quot;, and &quot;Unset Section&quot;.</p>
<h2>Set Topic</h2>
<h3>Purpose:</h3>
<p>Sets the runtime environment topic to the one selected by the statement constraint. If the statement constraint was not valid, the topic is not changed. Setting the environment topic will change the behaviour of an article list: only articles having that topic will be listed. For example:</p>
<pre class="prettyprint linenums"><code>{{ set_topic name=&quot;test:en&quot; }}
 {{ list_articles }}
 ...
 {{ /list_articles }}</code></pre>
<p>The example above will list only articles having the topic 'test'. The topic is automatically appended to the URL parameters, so you don't have to set the topic in the current page:</p>
<pre class="prettyprint linenums"><code>{{ set_topic name&quot;test:en&quot; }}
&lt;a href=&quot;{{ uri }}&quot;&gt;text&lt;/a&gt;</code></pre>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ set_topic name=&quot;&lt;topic_name_lang_code&gt;&quot; }}</code></pre>
<pre><code>{{ set_topic identifier=&quot;&lt;integer_value&gt;&quot; }}</code></pre>
<p>Select the topic having the specified name:language pair or identifier. If the supplied value was not valid, this variable is not modified. The name:language pair must be written in the following format:</p>
<pre><code>&lt;topic_name_lang_code&gt; = &lt;topic_name&gt;:&lt;language_code&gt;</code></pre>
<h3>Examples:</h3>
<p>sport:en, music:en where 'sport' or 'music' is the topic name and 'en' is the English language code.</p>
<h3>Constraints:</h3>
<p>Cannot be used inside &quot;list_articles&quot; and &quot;list_article_topics&quot; statements.</p>
<p>See also &quot;Set Default Topic&quot;, and &quot;Unset Topic&quot;.</p>
<p><span id="ch082_unset-objects.xhtml"></span></p>
<h1>Unset objects</h1>
<h2>Unset Article</h2>
<h3>Purpose:</h3>
<p>Unset the runtime environment article. After this statement the article object will not be defined any more.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ unset_article }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside &quot;list_articles&quot;, &quot;list_article_attachments&quot;, &quot;list_article_comments&quot;, &quot;list_article_topics&quot;, &quot;list_article_audio_attachments&quot;, &quot;list_search_results&quot; and &quot;list_subtitles&quot; statements.</p>
<p>See also &quot;Set Default Article&quot;, and &quot;Set Article&quot;.</p>
<h2>Unset Comment</h2>
<h3>Purpose:</h3>
<p>Unset the runtime environment comment. After this statement the comment object will not be defined any more.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ unset_comment }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside &quot;list_article_comments&quot; statements.</p>
<h2>Unset Issue</h2>
<h3>Purpose:</h3>
<p>Unset the runtime environment issue. After this statement the issue object will not be defined any more.</p>
<h3>Syntax:</h3>
<pre><code>{{ unset_issue }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside any list statements.</p>
<p>See also &quot;Set Issue&quot;, &quot;Set Current Issue&quot;, and &quot;Set Default Issue&quot;.</p>
<h2>Unset Language</h2>
<h3>Purpose:</h3>
<p>Unset the runtime environment language. After this statement the language object will not be defined any more.</p>
<h3>Syntax:</h3>
<pre><code>{{ unset_language }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside &quot;list_articles&quot;, &quot;list_article_attachments&quot;, &quot;list_article_comments&quot;, &quot;list_article_topics&quot;, &quot;list_article_audio_attachments&quot;, &quot;list_search_results&quot; and &quot;list_subtitles&quot; statements.</p>
<p>See also &quot;Set Language&quot;, and &quot;Set Default Language&quot;.</p>
<h2>Unset Publication</h2>
<h3>Purpose:</h3>
<p>Unset the runtime environment publication. After this statement the publication object will not be defined any more.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ unset_publication }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside any list statement.</p>
<p>See also &quot;Set Publication&quot;, and &quot;Set Default Publication&quot;.</p>
<h2>Unset Section</h2>
<h3>Purpose:</h3>
<p>Unset the runtime environment section. After this statement the section object will not be defined any more.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ unset_section }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside &quot;list_sections&quot;, &quot;list_articles&quot;, &quot;list_article_attachments&quot;, &quot;list_article_comments&quot;, &quot;list_article_topics&quot;, &quot;list_article_audio_attachments&quot;, &quot;list_search_results&quot; and &quot;list_subtitles&quot; statements.</p>
<p>See also &quot;Set Section&quot;, and &quot;Set Default Section&quot;.</p>
<h2>Unset Topic</h2>
<h3>Purpose:</h3>
<p>Unset the runtime environment topic. After this statement the topic object will not be defined any more.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ unset_topic }}</code></pre>
<h3>Constraints:</h3>
<p>Cannot be used inside &quot;list_articles&quot; and &quot;list_article_topics&quot; statements.</p>
<p>See also &quot;Set Default Topic&quot;, and &quot;Set Topic&quot;.</p>
<p><span id="ch083_local-temporary-variable-environment.xhtml"></span></p>
<h1>Local - temporary variable environment</h1>
<h2>Local</h2>
<h3>Purpose:</h3>
<p>Creates a temporary environment; when leaving the local block the previous template environment (before entering local) is restored.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ local }}
 &lt;list_of_instructions&gt;
{{ /local }}</code></pre>
<p>The list of instructions may contain any instruction allowed in the current context. If it is used inside a list it must respect the constraints of the list.</p>
<h3>Constraints:</h3>
<p>None.</p>
<p><strong>Note:</strong> {{ local }} creates a new object. If you use {{ local }} excessively you might run into performance issues because it is resource-hungry.<br />
</p>
<p><span id="ch085_list-articles-and-article-related-content.xhtml"></span></p>
<h1>List articles and article related content</h1>
<h2>List of Articles</h2>
<h3>Purpose:</h3>
<p>Select the list of articles according to the given constraints and current environmental variables. The publication, language, issue, section and article variables may not be defined outside the list_articles statement; inside the statement however, all these variables are defined. The code between &quot;{{ list_articles }}&quot; statement &quot;{{ /list_articles }}&quot; is repeated for every article in the list.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_articles [length=&quot;&lt;integer_value&gt;&quot;]
        [columns=&quot;&lt;integer_value&gt;&quot;]
        [constraints=&quot;&lt;list_of_article_constraints&gt;&quot;]
        [ignore_publication=&quot;true&quot;]
        [ignore_issue=&quot;true&quot;]
        [ignore_section=&quot;true&quot;]
        [ignore_language=&quot;true&quot;]
        [location=&quot;&lt;longitude, latitude&gt;]
        [order=&quot;&lt;order_condition&gt;&quot;] }}
    &lt;list_of_instructions&gt;
{{ /list_articles }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current list</li>
</ul>
<pre class="prettyprint linenums"><code>{{ list_articles length=&quot;10&quot; columns=&quot;2&quot; order=&quot;byPublishDate desc&quot;}}
{{ if $gimme-&gt;current_list-&gt;column == &quot;1&quot; }}
left column
{{ /if }}
{{ /list_articles }}</code></pre>
<ul>
<li>ignore_publication: list articles from all publications, not only from the environment publication</li>
<li>ignore_issue: list articles from all issues, not only from the environment issue; if the section was defined it will list only articles from the environment section</li>
<li>ignore_section: list articles from all sections, not only from the environment section</li>
<li>ignore_language: list articles in all languages; if the issue and section were defined in the environment it lists only articles belonging to the environment issue/section</li>
<li>location: longitude and latitude values for the location</li>
</ul>
<p>&lt;list_of_instructions&gt; may contain any statement except those listed at the end of the page.</p>
<ul>
<li>&lt;list_of_article_constraints&gt;=</li>
<li><ul>
<li>&lt;article_constraint&gt; &lt;list_of_article_constraints&gt;</li>
<li>&lt;article_constraint&gt;</li>
</ul></li>
<li>&lt;article_constraint&gt;=</li>
<li>name &lt;string_operator&gt; &lt;string_value&gt;</li>
<li>number &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>keyword &lt;string_value&gt;</li>
<li>OnFrontPage &lt;switch_operator&gt; &lt;switch_value&gt;</li>
<li>OnSection [&lt;switch_operator&gt; &lt;switch_value&gt;]</li>
<li>upload_date &lt;date_operator&gt; &lt;date_value&gt;</li>
<li>publish_date &lt;date_operator&gt; &lt;date_value&gt;</li>
<li>public &lt;switch_operator&gt; &lt;switch_value&gt;</li>
<li>type &lt;switch_operator&gt; &lt;article_type&gt;</li>
<li>&lt;article_type&gt; &lt;article_type_attribute&gt; &lt;attribute_type_operator&gt; &lt;attribute_type_value&gt;</li>
<li>matchAllTopics</li>
<li>matchAnyTopic</li>
<li>topic is|not &lt;string_value&gt;</li>
<li>reads &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>author &lt;string_operator&gt; &lt;string_value&gt;</li>
<li>issue &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>section &lt;integer_operator&gt; &lt;integer_value&gt;</li>
</ul>
<h3>Examples:</h3>
<p>Taken from Template Pack &quot;The Custodian&quot; (date 2011-03-16) file &quot;article.tpl&quot;</p>
<pre class="prettyprint linenums"><code>{{ list_articles name=&quot;topic_articles&quot;
constraints=&quot;number not `$gimme-&gt;article-&gt;number`
`$topic_cond` matchAnyTopic&quot;  ignore_issue=true length=3 }}
  {{ include file=&quot;classic/tpl/teaserframe_articlelistright.tpl&quot;
}}
  {{ include file=&quot;classic/tpl/pagination.tpl&quot; }}
  {{ assign var=&quot;number_cond&quot; value=&quot;`$number_cond`
number not `$gimme-&gt;article-&gt;number` &quot; }}
{{ /list_articles }}</code></pre>
<p><strong>Examples of constraints:</strong></p>
<p>constraints=&quot;issue greater 10 issue smaller 20&quot;</p>
<p>constraints=&quot;section greater_equal 40 section smaller 60&quot;</p>
<ul>
<li>name, number, upload_date, publish_date are self-explanatory article attributes</li>
<li>keyword: all articles containing the specified keyword (and respecting all the other constraints) will be in the list</li>
<li>OnFrontPage: articles having &quot;Show article on front page&quot; flag in &lt;switch_operator&gt; relation with &lt;switch_value&gt; will be selected; for details see Creating articles within a section</li>
<li>OnSection: articles having &quot;Show article on section page&quot; flag in &lt;switch_operator&gt; relation with &lt;switch_value&gt; will be selected; for details see Creating articles within a section</li>
<li>public: articles having &quot;Allow users without subscription...&quot; flag in &lt;switch_operator&gt; relation with &lt;switch_value&gt; will be selected</li>
<li>type: only articles having the given time will be selected</li>
<li>... &lt;article_type_attribute&gt; ...: articles being of &lt;article_type&gt; and having &lt;article_type_attribute&gt; in &lt;attribute_type_operator&gt; relation with &lt;attribute_type_value&gt; will be selected; for details see &quot;Article Types&quot;</li>
<li>matchAllTopics/matchAnyTopic: defines the behaviour of the list when matching articles topics against the list of topics given as parameters:</li>
<li><ul>
<li>matchAllTopics will force the selection of articles that have all the given topics</li>
<li>matchAnyTopic (default) will select articles that have at least one topic from the given topic list</li>
</ul></li>
<li>topic: if &quot;is&quot; operator is used, articles having specified topic in their list of topics will be selected; if &quot;not&quot; operator is uses articles not having specified topic in their list of topics will be selected</li>
<li>reads: you can set constraints based on the number of readers that viewed this article since it was published</li>
<li>author: you can list articles that have or don't have a certain author; e.g.: &quot;author is John\ Doe&quot; (the backslash is needed to escape the space character - see Language Elements; Conventions at the bottom of the page). The author attribute has a predefined value &quot;__current&quot;; when using this value the author will be filled in from the currently defined article. For example: &quot;author is __current&quot;</li>
</ul>
<p>Note on author attribute: this works only in Newscoop 3.2.1 and newer versions.</p>
<p>Note on topics: the topic name must be written in the following format: &lt;topic_name&gt;:&lt;language_code&gt;</p>
<p><strong>Examples of valid topic names:</strong></p>
<p>sports:en</p>
<p>health:en</p>
<p>Note on topics: If a certain topic was defined in the template environment by use of the &quot;set_topic&quot; statement or URL parameter the list will change the behaviour of the articles list. Only articles having that topic will be listed. For example:</p>
<pre class="prettyprint linenums"><code>{{ set_topic name=&quot;test:en&quot; }}
{{ list_articles }}
...
{{ /list_articles }}</code></pre>
<p>This will list only articles having the topic 'test'. The topic is automatically appended to the URL parameters so you don't have to set the topic in the current page.</p>
<ul>
<li>&lt;order_condition&gt;=</li>
<li><ul>
<li>byNumber desc|asc</li>
<li>byName desc|asc</li>
<li>byDate desc|asc</li>
<li>byCreationDate desc|asc</li>
<li>byPublishDate desc|asc</li>
<li>byLastUpdate desc|asc</li>
<li>byPopularity desc|asc</li>
<li>byPublication desc|asc</li>
<li>byIssue desc|asc</li>
<li>bySection desc|asc</li>
<li>byLanguage desc|asc</li>
<li>bySectionOrder desc|asc</li>
<li>byComments desc|asc</li>
<li>byLastComment desc|asc</li>
</ul></li>
<li>byComments instructs the Newscoop to list articles by the number of comments filed to each article</li>
<li>byLastComment will list articles ordered by the last article comment time</li>
<li>byDate is an alias of byCreationDate</li>
<li>The other order conditions are self-explanatory</li>
<li>The default order of articles in the list (if no order condition was set) is: first they are ordered by the issue number descending, then by the section number ascending and by the article order in the section ascending</li>
</ul>
<p>Note: byComments and byLastComment only work in Newscoop 3.2.2 and newer. byLastUpdate is implemented in Newscoop 3.5 and newer.</p>
<p>Inside the list the data context is defined by the constraints applied to the current article for every processed line. The data context is restored after the list processing.</p>
<h3>Constraints:</h3>
<p>Inside list_articles the following statements are forbidden:</p>
<ul>
<li>list_languages</li>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>set_publication</li>
<li>set_default_publication</li>
<li>unset_publication</li>
<li>list_issues</li>
<li>set_issue</li>
<li>set_default_issue</li>
<li>set_current_issue</li>
<li>unset_issue</li>
<li>list_sections</li>
<li>set_section</li>
<li>set_default_section</li>
<li>unset_section</li>
<li>list_articles</li>
<li>set_article</li>
<li>set_default_article</li>
<li>unset_article</li>
</ul>
<p>list_articles statement cannot be used inside list_subtitles, or list_search_results statements.</p>
<h2>List of Article Attachments</h2>
<h3>Purpose:</h3>
<p>Create a list of documents attached to the article currently defined in the template environment. If the article was not set the list is empty. The code between &quot;{{ list_article_attachments }}&quot; statement and &quot;{{ /list_article_attachments }} is repeated for every attachment in the list.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_article_attachments [length=&quot;&lt;integer_value&gt;&quot;]
                            [columns=&quot;&lt;integer_value&gt;&quot;]
                            [language=&quot;current&quot;] }}
   &lt;list_of_instructions&gt;
{{ /list_article_attachments }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>all_languages: if true (default) the list will contain all article attachments independent of their language; if false, the list will contain only article attachments that have the language currently defined by the template environment</li>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list</li>
<li>language=&quot;current&quot;: list only attachments that were set as available for all translations and available for the language currently set in the template environment</li>
</ul>
<p>Inside list_articles the following statements are forbidden:</p>
<ul>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>set_publication</li>
<li>set_default_publication</li>
<li>unset_publication</li>
<li>list_issues</li>
<li>set_issue</li>
<li>set_default_issue</li>
<li>set_current_issue</li>
<li>unset_issue</li>
<li>list_sections</li>
<li>set_section</li>
<li>set_default_section</li>
<li>unset_section</li>
<li>list_articles</li>
<li>set_article</li>
<li>set_default_article</li>
<li>unset_article</li>
<li>list_article_attachments</li>
</ul>
<p>Inside the list, the current article attachment is set to the current element of the list. The environment context is restored after the list processing.</p>
<h3>Example:</h3>
<pre class="prettyprint linenums"><code>{{ list_article_attachments }}
 {{ if $gimme-&gt;current_list-&gt;at_beginning }}
  &lt;h4&gt;Downloads:&lt;/h4&gt;
 {{ /if }}
  &lt;a href=&quot;/attachment/{{ $gimme-&gt;attachment-&gt;identifier }}&quot;&gt;
   {{ $gimme-&gt;attachment-&gt;file_name }}&lt;/a&gt;
  ({{ $gimme-&gt;attachment-&gt;size_kb }}kb)&lt;br/&gt;
{{ /list_article_attachments }}</code></pre>
<p>Here is an example of how to use the attachment list to play a number of MP3 files:</p>
<pre class="prettyprint linenums"><code>{{ list_article_attachments }}
 {{ if $gimme-&gt;attachment-&gt;extension == &quot;mp3&quot; }}
&lt;object type=&quot;application/x-shockwave-flash&quot;
data=&quot;/templates/radioactive/apps/player_mp3_maxi.swf&quot; width=&quot;200&quot; height=&quot;20&quot;&gt;
&lt;param name=&quot;movie&quot; value=&quot;/templates/radioactive/apps/player_mp3_maxi.swf&quot; /&gt;
&lt;param name=&quot;bgcolor&quot; value=&quot;#444444&quot;/&gt;
&lt;param name=&quot;FlashVars&quot; value=&quot;mp3={{ uri options=&quot;articleattachment&quot; }}&quot; /&gt;
&lt;!-- player home: http://flash-mp3-player.net/ --&gt;
&lt;/object&gt;
 {{ /if }}
{{ /list_article_attachments }}</code></pre>
<h2>List of Article Authors</h2>
<p>Note: this works only in Newscoop 3.5.0 and newer versions.</p>
<h3>Purpose:</h3>
<p>Create the list of authors to the article currently defined in the template environment. If the article was not defined, the list is empty. The code between the &quot;{{ list_article_authors }}&quot; statement and &quot;{{ /list_article_authors }} is repeated for every author in the list. Inside the list every author is represented by an author object, (see &quot;Author&quot;).</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_article_authors [length=&quot;&lt;integer_value&gt;&quot;]
                        [columns=&quot;&lt;integer_value&gt;&quot;]
                        [order=&quot;&lt;author_order&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /list_article_authors }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list.</li>
<li>order=&quot;&lt;author_order&gt;&quot;=</li>
<li><ul>
<li>byFirstName: order by the author's first name</li>
<li>byLastName: order by the author's last name</li>
</ul></li>
</ul>
<h3>Example:</h3>
<p>Taken from Template Pack &quot;The Journal&quot; (date 2011-03-15) file &quot;article-author-popup.tpl&quot;</p>
<pre class="prettyprint linenums"><code>{{ list_article_authors }}
 &lt;div id=&quot;hidden{{ $gimme-&gt;current_list-&gt;index }}Content&quot;  class=&quot;teammemberinfo&quot; style=&quot;display:none&quot;&gt;
  &lt;img style=&quot;width: 150px; float: left; margin: 0 10px 10px 0&quot;
  src=&quot;{{ $gimme-&gt;author-&gt;picture-&gt;imageurl }}&quot; /&gt;
   &lt;h2&gt;{{ $gimme-&gt;author-&gt;name }}&lt;/h2&gt;
    &lt;div class=&quot;text&quot;&gt;
    {{ $gimme-&gt;author-&gt;biography-&gt;text }}
    &lt;/div&gt;
&lt;/div&gt;
{{ /list_article_authors }}</code></pre>
<p>Inside list_articles the following statements are forbidden:</p>
<ul>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>set_publication</li>
<li>set_default_publication</li>
<li>unset_publication</li>
<li>list_issues</li>
<li>set_issue</li>
<li>set_default_issue</li>
<li>set_current_issue</li>
<li>unset_issue</li>
<li>list_sections</li>
<li>set_section</li>
<li>set_default_section</li>
<li>unset_section</li>
<li>list_articles</li>
<li>set_article</li>
<li>set_default_article</li>
<li>unset_article</li>
<li>list_article_images</li>
</ul>
<p>Inside the list, the current author is set to the current element of the list. The environment context is restored after the list processing.</p>
<h2>List of Article Comments</h2>
<h3>Purpose:</h3>
<p>Create a list of comments attached to the article currently defined in the template environment. If the article was not defined the comments list is empty. The code between the &quot;{{ list_article_comments }}&quot; statement and &quot;{{ /list_article_commnets }}&quot; is repeated for every comment in the list.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_article_comments [ignore_language=&quot;true|false&quot;]
                         [ignore_article=&quot;true|false&quot;]
                         [length=&quot;&lt;integer_value&gt;&quot;]
                         [columns=&quot;&lt;integer_value&gt;&quot;]
                         [order=&quot;&lt;order_condition&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /list_article_comments }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>ignore_language: list comments regardless of the comment language</li>
<li>ignore_article: list comments for all articles, not only for the current article</li>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object.</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list.</li>
</ul>
<p>Note on ignore_article: this option will force the list order to date ordering. ignore_language and ignore_article only work in Newscoop 3.2.2 and newer.</p>
<ul>
<li>&lt;order_condition&gt;=</li>
<li><ul>
<li>byDate desc|asc</li>
<li>default desc|asc</li>
</ul></li>
</ul>
<p>The default order of the comments in the list (if no order condition was specified) is based on the tree structure of the comments as in the following example:</p>
<ul>
<li>root comment 1</li>
<li><ul>
<li>reply 1 (parent is root comment 1)</li>
<li><ul>
<li>reply 1_1 (parent is reply 1)</li>
</ul></li>
</ul></li>
<li>root comment 2</li>
<li>...</li>
</ul>
<p>The first element in the list is the first comment that was submitted, second is it's first reply (if it exists), first reply of the first reply .. and so on down the tree structure, until it finds no other reply, second reply to the root element etc.</p>
<p>If the order by date condition was specified the comments are displayed strictly by their submission date, regardless of the relation they had to the other comments.</p>
<h3>Example:</h3>
<pre class="prettyprint linenums"><code>{{ list_article_comments order=&quot;byDate desc&quot; }}
    Subject: {{ $gimme-&gt;comment-&gt;subject }}&lt;br/&gt;
    Posted {{ $gimme-&gt;comment-&gt;submit_date }}
    by &lt;b&gt;{{ $gimme-&gt;comment-&gt;reader_email }}&lt;/b&gt;
    &lt;br/&gt;
    {{ $gimme-&gt;comment-&gt;content }}
    &lt;br/&gt;
{{ /list_article_comments }}</code></pre>
<p>The following example is taken from the Template Pack &quot;The Custodian&quot; (2011-03-16) file &quot;comments.tlp&quot;</p>
<pre class="prettyprint linenums"><code>{{ list_article_comments }}
{{ if $gimme-&gt;current_list-&gt;at_beginning }}
 &lt;a name=&quot;commentlist&quot;&gt;
  &lt;h4&gt;
  {{ if $gimme-&gt;language-&gt;name == &quot;English&quot; }}Previous comments
  {{ else }}Los comentarios anteriores
  {{ /if }}
  &lt;/h4&gt;
 &lt;/a&gt;
{{ /if }}
 &lt;div class=&quot;comment&quot; {{ if $gimme-&gt;current_list-&gt;at_end }}
  id=&quot;everlast&quot;{{ /if }}&gt;
   &lt;p&gt;&lt;strong&gt;{{ $gimme-&gt;comment-&gt;nickname }}&lt;/strong&gt;&lt;br&gt;
   {{ $gimme-&gt;comment-&gt;content }}&lt;/p&gt;
    &lt;p&gt;
     &lt;em&gt;
      {{ $gimme-&gt;comment-&gt;subject }} |
      &lt;span&gt;{{ $gimme-&gt;comment-&gt;submit_date|camp_date_format:&quot;%M
      %e, %Y&quot; }}&lt;/span&gt;
     &lt;/em&gt;
    &lt;/p&gt;
 &lt;/div&gt;
&lt;!-- /.comment --&gt;
{{ /list_article_comments }}</code></pre>
<p>Inside list_articles the following statements are forbidden:</p>
<ul>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>set_publication</li>
<li>set_default_publication</li>
<li>unset_publication</li>
<li>list_issues</li>
<li>set_issue</li>
<li>set_default_issue</li>
<li>set_current_issue</li>
<li>unset_issue</li>
<li>list_sections</li>
<li>set_section</li>
<li>set_default_section</li>
<li>unset_section</li>
<li>list_articles</li>
<li>set_article</li>
<li>set_default_article</li>
<li>unset_article</li>
<li>list_article_comments</li>
</ul>
<h2>List of Article Images</h2>
<h3>Purpose:</h3>
<p>Create a list of images attached to the article currently defined in the template environment. If the article was not defined, the list is empty. The code between the &quot;{{ list_article_images }}&quot; statement and &quot;{{ /list_article_images }} is repeated for every image in the list.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_article_images [length=&quot;&lt;integer_value&gt;&quot;]
                       [columns=&quot;&lt;integer_value&gt;&quot;]
                       [order=&quot;&lt;image_order&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /list_article_images }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list.</li>
<li>order=&quot;&lt;image_order&gt;&quot;=</li>
<li>default, number: order by the number assigned to the image when attached to an article</li>
<li>byDescription: order by the image description</li>
<li>byPhotographer: order by the photographer name</li>
<li>byDate: order by the image date</li>
<li>byLastUpdate: order by the image last update time</li>
</ul>
<h3>Example:</h3>
<p>Taken from Template Pack &quot;The Custodian&quot; (date 2011-03-15) file &quot;article-gallery.tpl&quot;</p>
<pre class="prettyprint linenums"><code>{{ list_article_images }}
 {{ if $gimme-&gt;current_list-&gt;count gt 1 }}
  {{ if $gimme-&gt;current_list-&gt;at_beginning }}
   &lt;div id=&quot;article-gallery&quot;&gt;
    &lt;h4&gt;{{ if $gimme-&gt;language-&gt;name == &quot;English&quot; }}Article gallery
        {{ else }}Mini galera{{ /if }}:
    &lt;/h4&gt;
  {{ /if }}
     &lt;div class=&quot;gallery-item&quot;&gt;
      &lt;a class=&quot;grouped_elements&quot;
       href=&quot;{{ $gimme-&gt;article-&gt;image-&gt;imageurl }}&quot; rel=&quot;group&quot;&gt;
       &lt;img alt=&quot;{{ $gimme-&gt;article-&gt;image-&gt;description }}&quot;
       src=&quot;{{ $gimme-&gt;article-&gt;image-&gt;thumbnailurl }}&quot; /&gt;
      &lt;/a&gt;
     &lt;/div&gt;&lt;!-- /.gallery-item --&gt;
   {{ if $gimme-&gt;current_list-&gt;at_end }}
   &lt;/div&gt;&lt;!-- /#article-gallery --&gt;
   {{ /if }}
 {{ /if }}
{{ /list_article_images }}</code></pre>
<p>Inside list_articles the following statements are forbidden:</p>
<ul>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>set_publication</li>
<li>set_default_publication</li>
<li>unset_publication</li>
<li>list_issues</li>
<li>set_issue</li>
<li>set_default_issue</li>
<li>set_current_issue</li>
<li>unset_issue</li>
<li>list_sections</li>
<li>set_section</li>
<li>set_default_section</li>
<li>unset_section</li>
<li>list_articles</li>
<li>set_article</li>
<li>set_default_article</li>
<li>unset_article</li>
<li>list_article_images</li>
</ul>
<p>Inside the list, the current image is set to the current element of the list. The environment context is restored after the list processing.</p>
<h2>List of Article Locations</h2>
<p>Note: this works only in Newscoop 3.5.0 and newer versions.</p>
<p>Maps require jQuery: In order to use display maps you must include jQuery in the header of your document, with a link like this:</p>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&quot;&gt;</code></pre>
<h3>Purpose:</h3>
<p>Create a list of map locations related to the article currently defined in the template environment. If the article was not defined, the list is empty. The code between the &quot;{{ list_article_locations }}&quot; statement and &quot;{{ /list_article_locations }} is repeated for every location in the list. Inside the list every location is represented by a map location object, (see &quot;Article Location&quot;).</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_article_locations [length=&quot;&lt;integer_value&gt;&quot;]
                          [columns=&quot;&lt;integer_value&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /list_article_images }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the intervals of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list.</li>
</ul>
<h3>Example:</h3>
<p>Ushahidi compatible KML format. You can use this as a feed to call as a layer in Ushahidi:</p>
<pre class="prettyprint linenums"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;kml xmlns=&quot;http://earth.google.com/kml/2.2&quot;&gt;
&lt;Document&gt;
  &lt;name&gt;{{ $gimme-&gt;publication-&gt;name }}&lt;/name&gt;
  &lt;description&gt;&lt;![CDATA[ .]]&gt;&lt;/description&gt;
{{ list_articles}}
  {{ list_article_locations }}
    {{ if $gimme-&gt;location-&gt;enabled }}
  &lt;Style id=&quot;style{{ $gimme-&gt;article-&gt;number }}-{{ $gimme-&gt;current_list-&gt;index }}&quot;&gt;
    &lt;IconStyle&gt;
      &lt;Icon&gt;
       &lt;href&gt;http://www.sourcefabric.org/javascript/geocoding/markers/marker-gold.png&lt;/href&gt;
      &lt;/Icon&gt;
    &lt;/IconStyle&gt;
  &lt;/Style&gt;
    {{ /if }}
  {{ /list_article_locations }}
{{ /list_articles }}

{{ list_articles}}
  {{ list_article_locations }}
    {{ if $gimme-&gt;location-&gt;enabled }}
  &lt;Placemark&gt;
    &lt;name&gt;{{ $gimme-&gt;location-&gt;name }} @ {{
$gimme-&gt;article-&gt;name }}&lt;/name&gt;
    &lt;description&gt;&lt;/description&gt;
    &lt;styleUrl&gt;#style{{ $gimme-&gt;article-&gt;number }}-{{
$gimme-&gt;current_list-&gt;index }}&lt;/styleUrl&gt;
    &lt;Point&gt;
      &lt;coordinates&gt;{{ $gimme-&gt;location-&gt;longitude
}},{{ $gimme-&gt;location-&gt;latitude }},0.000000&lt;/coordinates&gt;
    &lt;/Point&gt;
  &lt;/Placemark&gt;
    {{ /if }}
  {{ /list_article_locations }}
{{ /list_articles }}
&lt;/Document&gt;
&lt;/kml&gt;</code></pre>
<p>Taken from Template Pack &quot;The Journal&quot; (date 2011-03-15) file &quot;article-cont.tpl&quot;</p>
<pre class="prettyprint linenums"><code>&lt;p&gt;
Location(s):
{{ list_article_locations }}
 {{ if $gimme-&gt;location-&gt;enabled }}
  {{ $gimme-&gt;location-&gt;name }}
   {{ if $gimme-&gt;current_list-&gt;at_end }}{{ else }}, {{ /if }}
 {{ /if }}
{{ /list_article_locations }}
&lt;/p&gt;</code></pre>
<p>Inside list_article_locations the following statements are forbidden:</p>
<ul>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>set_publication</li>
<li>set_default_publication</li>
<li>unset_publication</li>
<li>list_issues</li>
<li>set_issue</li>
<li>set_default_issue</li>
<li>set_current_issue</li>
<li>unset_issue</li>
<li>list_sections</li>
<li>set_section</li>
<li>set_default_section</li>
<li>unset_section</li>
<li>list_articles</li>
<li>set_article</li>
<li>set_default_article</li>
<li>unset_article</li>
<li>list_article_images</li>
</ul>
<p>Inside the list, the current location is set to the current element of the list. The environment context is restored after the list processing.</p>
<p><span id="ch086_list-article-topics-and-subtopics.xhtml"></span></p>
<h1>List article topics and subtopics</h1>
<h2>List of Article Topics</h2>
<h3>Purpose:</h3>
<p>Create a list of topics attached to the article currently defined in the template environment. If the article was not set, the list is empty. The topic parameter may not be defined outside the list_article_topics statement; inside the statement however, this parameter is defined. The code between &quot;{{ list_article_topics }}&quot; statement and &quot;{{ /list_article_topics }}&quot; is repeated for every topic in the list.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_article_topics [length=&quot;&lt;integer_value&gt;&quot;]
                       [columns=&quot;&lt;integer_value&gt;&quot;] }}
  &lt;list_of_instructions&gt;
{{ /list_article_topics }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object.</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list.</li>
</ul>
<h3>Examples:</h3>
<p>Taken from Template Pack &quot;The Custodian&quot; (date 2011-03-16) file &quot;article.tpl&quot;</p>
<pre class="prettyprint linenums"><code>{{ list_article_topics }}
   {{ assign var=&quot;topic_cond&quot; value=&quot;`$topic_cond` topic is `$gimme-&gt;topic-&gt;identifier` &quot; }}
{{ /list_article_topics }}</code></pre>
<p>Taken from Template Pack &quot;The Custodian&quot; (date 2011-03-16) file &quot;topic-list.tpl&quot;</p>
<pre class="prettyprint linenums"><code>{{ list_article_topics }}
 {{ if $gimme-&gt;current_list-&gt;at_beginning }}
  {{ if $gimme-&gt;language-&gt;name == &quot;English&quot; }}Related topics
  {{ else }}Temas relacionados
  {{ /if }}
 {{ /if }}
 : {{$gimme-&gt;topic-&gt;name }}
 {{ if $gimme-&gt;current_list-&gt;at_end }}
 {{ /if }}
{{ /list_article_topics }}</code></pre>
<p>Inside list_articles the following statements are forbidden:</p>
<ul>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>set_publication</li>
<li>set_default_publication</li>
<li>unset_publication</li>
<li>list_issues</li>
<li>set_issue</li>
<li>set_default_issue</li>
<li>set_current_issue</li>
<li>unset_issue</li>
<li>list_sections</li>
<li>set_section</li>
<li>set_default_section</li>
<li>unset_section</li>
<li>list_articles</li>
<li>set_article</li>
<li>set_default_article</li>
<li>unset_article</li>
<li>list_article_topics</li>
</ul>
<p>Inside the list, the current topic is set to the current element of the list. The environment context is restored after the list processing.</p>
<h2>List of Subtopics</h2>
<h3>Purpose:</h3>
<p>Create a list of subtopics of the topic currently set in the template environment. If the topic was not set it will generate the list of root topics. The topic parameter may not be defined outside the list statement; inside the statement however, this parameter is defined. The code between &quot;{{ list_subtopics }}&quot; statement and &quot;{{ /list_subtopics }}&quot; is repeated for every topic in the list.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_subtopics [length=&quot;&lt;integer_value&gt;&quot;]
                  [columns=&quot;&lt;integer_value&gt;&quot;]
                  [order=&quot;&lt;order_condition&gt;&quot;] }}
    &lt;list_of_instructions&gt;
{{ /list_subtopics }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object.</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list.</li>
</ul>
<p>&lt;list_of_instructions&gt; may contain any statement except those listed at the end of the page.</p>
<ul>
<li>&lt;order_condition&gt;=</li>
<li><ul>
<li>byNumber desc|asc</li>
<li>byName desc|asc</li>
</ul></li>
</ul>
<p>Inside the list, the data context is defined by the constraints applied to the current topic for every processed line. The data context is restored after the list processing.</p>
<h3>Constraints:</h3>
<p>Inside list_subtopics the following statements are forbidden:</p>
<ul>
<li>list_subtopics</li>
<li>set_topic</li>
<li>set_default_topic</li>
<li>unset_topic</li>
</ul>
<p><span id="ch087_list-issues-and-sections.xhtml"></span></p>
<h1>List of issues and sections</h1>
<h2>List of Issues</h2>
<h3>Purpose:</h3>
<p>Select the list of issues according to the given constraints and current environmental variables. The publication, language and issue variables may not be defined outside the list_issues statement; inside the statement however, all these variables are defined. The code between &quot;{{ list_issues }}&quot; statement and &quot;{{ /list_issues }}&quot; is repeated for every issue in the list.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_issues [length=&quot;&lt;integer_value&gt;&quot;]
               [columns=&quot;&lt;integer_value&gt;&quot;]
               [constraints=&quot;&lt;list_of_issue_constraints&gt;&quot;]
               [order=&quot;&lt;order_condition&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /list_issues }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object.</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list.</li>
</ul>
<p>&lt;list_of_instructions&gt; may contain any statement except: &quot;set_language&quot;, &quot;set_publication&quot;, &quot;list_issues&quot;, &quot;set_issue&quot;.</p>
<ul>
<li>&lt;list_of_issue_constraints&gt;=</li>
<li><ul>
<li>&lt;issue_constraint&gt; &lt;list_of_issue_constraints&gt;</li>
<li>&lt;issue_constraint&gt;</li>
</ul></li>
<li>&lt;issue_constraint&gt;=</li>
<li><ul>
<li>number&lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>name &lt;string_operator&gt; &lt;string_value&gt;</li>
<li>publish_date &lt;date_operator&gt; &lt;date_value&gt;</li>
<li>publish_year &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>publish_month &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>publish_mday &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>&lt;date_constraint&gt;</li>
</ul></li>
<li>&lt;date_constraint&gt;=</li>
<li><ul>
<li>year &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>mon_nr &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>mday &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>yday &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>wday &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>hour &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>min &lt;integer_operator&gt; &lt;integer_value&gt;</li>
<li>sec &lt;integer_operator&gt; &lt;integer_value&gt;</li>
</ul></li>
</ul>
<p>where year stands for year, mon_nr for month number (1..12), mday for month day (1..31), yday for year day (1..365), wday for week day (1..7), hour for hour, min for minute and sec for second.</p>
<p>Any parameter used in &lt;list_of_issue_constraints&gt; can only be used once.</p>
<ul>
<li>&lt;order_condition&gt;=</li>
<li><ul>
<li>byNumber desc|asc</li>
<li>byName desc|asc</li>
<li>byDate desc|asc</li>
<li>byCreationDate desc|asc</li>
<li>byPublishDate desc|asc</li>
</ul></li>
</ul>
<p>Order conditions are self-explanatory; byDate and byCreationDate are aliases of byPublishDate.</p>
<p>Inside the List the following environment variables are modified:</p>
<ul>
<li>language: if not defined before list start</li>
<li>publication: if not defined before list start</li>
<li>issue</li>
</ul>
<p>The environment is restored after the list ends.</p>
<h3>Examples:</h3>
<p>Taken from Template Pack &quot;The Custodian&quot; (date 2011-03-16) file &quot;archive.tpl&quot;</p>
<pre class="prettyprint linenums"><code>{{ list_issues length=&quot;10&quot; order=&quot;byNumber desc&quot; }}
 &lt;h2&gt;
  &lt;a href=&quot;{{ url options=&quot;template classic/archive.tpl&quot; }}&quot;&gt;
  {{ $gimme-&gt;issue-&gt;name }}&lt;/a&gt;
 &lt;/h2&gt;
  {{ if $gimme-&gt;language-&gt;name == &quot;English&quot; }}Issue
  {{ else }}Edicin{{ /if }}
   #{{ $gimme-&gt;issue-&gt;number }} /
  ({{ if $gimme-&gt;language-&gt;name == &quot;English&quot; }}published
  {{ else }}publicado{{ /if }}
 {{ $gimme-&gt;issue-&gt;publish_date|camp_date_format:&#39;%M %D, %Y %h:%i:%s&#39; }})
 {{ include file=&quot;skins/greenpiece/includes/pagination.tpl&quot; }}
{{ /list_issues }}</code></pre>
<h3>Constraints:</h3>
<p>Inside list_issues the following statements are forbidden:</p>
<ul>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>set_publication</li>
<li>set_default_publication</li>
<li>unset_publication</li>
<li>list_issues</li>
<li>set_issue</li>
<li>set_default_issue</li>
<li>unset_issue</li>
</ul>
<p>list_issues statement can not be used inside any other list statements.</p>
<h2>List of Sections</h2>
<h3>Purpose:</h3>
<p>Select the list of sections according to the given constraints and current environmental variables. The publication, language, issue and section variables may not be defined outside the list_sections statement; inside the statement however, all these variables are defined. The code between &quot;{{ list_sections }}&quot; statement and &quot;{{ /list_sections }}&quot; is repeated for every section in the list.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_sections [length=&quot;&lt;integer_value&gt;&quot;]
                 [columns=&quot;&lt;integer_value&gt;&quot;]
                 [constraints=&quot;&lt;list_of_section_constraints&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /list_sections }}</code></pre>
<h3>Filters:</h3>
<p>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object.</p>
<p>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list.</p>
<p>&lt;list_of_instructions&gt; may contain any statement except: &quot;set_language&quot;, &quot;set_publication&quot;, &quot;list_issues&quot;, &quot;set_issue&quot;, &quot;list_section&quot;, &quot;set_section&quot;.</p>
<ul>
<li>&lt;list_of_section_constraints&gt;=</li>
<li><ul>
<li>&lt;section_constraint&gt; &lt;list_of_section_constraints&gt;</li>
<li>&lt;section_constraint&gt;</li>
</ul></li>
<li>&lt;section_constraint&gt;=</li>
<li><ul>
<li>name &lt;string_operator&gt; &lt;string_value&gt;</li>
<li>number &lt;integer_operator&gt; &lt;integer_value&gt;</li>
</ul></li>
</ul>
<p>Any parameter used in &lt;list_of_section_constraints&gt; can only be used once.</p>
<p>Inside list_sections, the data context is defined by the constraints applied to the current section for every processed line. The data context is restored after the list processing.</p>
<h3>Example:</h3>
<p>Taken from the Template Pack &quot;The Custodian&quot; (date 2011-03-16) file &quot;archive.tpl&quot;</p>
<pre class="prettyprint linenums"><code>{{ list_sections order=&quot;bynumber asc&quot; }}
 &lt;h3&gt;
  &lt;a href=&quot;{{ uri }}&quot; class=&quot;linksection-{{ $gimme-&gt;section-&gt;number }}&quot;&gt;
  {{ $gimme-&gt;section-&gt;name }}&lt;/a&gt;
  &lt;!--{{ $gimme-&gt;section-&gt;number }}--&gt;
 &lt;/h3&gt;
 &lt;ul&gt;
  {{ list_articles }}
  &lt;li id=&quot;list-article&quot;&gt;
   &lt;h4&gt;
    &lt;a href=&quot;{{ uri }}&quot; class=&quot;linksection-{{ $gimme-&gt;section-&gt;number }}&quot;&gt;
    {{ $gimme-&gt;article-&gt;name }}&lt;/a&gt;
   &lt;/h4&gt;
  &lt;div class=&quot;list-article-published&quot;&gt;
    {{ if $gimme-&gt;language-&gt;name == &quot;English&quot; }}posted
    {{ else }}publicado el
    {{ /if }}
   {{ $gimme-&gt;article-&gt;publish_date|camp_date_format:&#39;%M %D, %Y %h:%i:%s&#39; }}
  &lt;/div&gt;
  {{ include file=&quot;classic/tpl/topic-list.tpl&quot; }}
  &lt;/li&gt;
  {{ /list_articles }}
 &lt;/ul&gt;
{{ /list_sections }}</code></pre>
<h3>Constraints:</h3>
<p>Inside list_sections the following statements are forbidden:</p>
<ul>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>set_publication</li>
<li>set_default_publication</li>
<li>unset_publication</li>
<li>list_issues</li>
<li>set_issue</li>
<li>set_default_issue</li>
<li>unset_issue</li>
<li>list_section</li>
<li>set_section</li>
<li>set_default_section</li>
<li>unset_section</li>
</ul>
<p>The list_sections statement cannot be used inside list_articles, list_subtitles, or list_search_results statements.</p>
<p><span id="ch088_list-subtitles-pagination-of-long-articles.xhtml"></span></p>
<h1>List subtitles (pagination of long articles)</h1>
<h2>List of Subtitles</h2>
<h3>Purpose:</h3>
<p>Create a list of subtitles for the content of the article currently defined in the template environment. The article, if not specified somewhere else, is treated as group of paragraphs. The markup for a new paragraph is the subtitle. The code between the &quot;{{ list_subtitles }}&quot; statement and &quot;{{ /list_subtitles }}&quot; is repeated for every subtitle in the list.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_subtitles [length=&quot;&lt;integer_value&gt;&quot;]
                  [columns=&quot;&lt;integer_value&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /list_subtitles }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list</li>
</ul>
<p>&lt;list_of_instructions&gt; may contain any statement except: &quot;set_language&quot;, &quot;set_publication&quot;, &quot;list_issues&quot;, &quot;set_issue&quot;, &quot;list_sections&quot;, &quot;set_section&quot;, &quot;list_articles&quot;, or &quot;set_article&quot;.</p>
<p>Inside the list, the data context is defined by the constraints applied to the current article for every processed line. The data context is restored after the list processing.</p>
<h3>Constraints:</h3>
<p>Inside list_articles the following statements are forbidden:</p>
<ul>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>set_publication</li>
<li>set_default_publication</li>
<li>unset_publication</li>
<li>list_issues</li>
<li>set_issue</li>
<li>set_default_issue</li>
<li>set_current_issue</li>
<li>unset_issue</li>
<li>list_sections</li>
<li>set_section</li>
<li>set_default_section</li>
<li>unset_section</li>
<li>list_articles</li>
<li>set_article</li>
<li>set_default_article</li>
<li>unset_article</li>
</ul>
<p><span id="ch089_list-images.xhtml"></span></p>
<h1>List images</h1>
<h2>List of Images</h2>
<h3>Purpose:</h3>
<p>Create a list of images. The list is built from the Media Archive independently, whether the images are related to articles or not. The code between the &quot;{{ list_images }}&quot; statement and &quot;{{ /list_images }}&quot; is repeated for every image in the list. Inside the list every image is represented by an image object, (see &quot;Image&quot;).</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_images [length=&quot;&lt;integer_value&gt;&quot;]
               [columns=&quot;&lt;integer_value&gt;&quot;]
               [&lt;filter&gt;=&quot;&lt;filter_value&gt;&quot;]}}
    &lt;list_of_instructions&gt;
{{ /list_images }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object.</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list.</li>
<li>order=&quot;&lt;order_field&gt; &lt;direction&gt;&quot; where &lt;direction&gt; may be &quot;asc&quot; (ascending) or &quot;desc&quot; (descending) and the &lt;order_field&gt; can be one of:</li>
<li><ul>
<li>default: order by image identifier</li>
<li>byDescription: order by the description field</li>
<li>byPhotographer: order by the photographer field</li>
<li>byDate: order by image date field</li>
<li>byLastUpdate: order by the time the image was updated</li>
</ul></li>
<li>description=&quot;&lt;value&gt;&quot;: select images whose description matches exactly the given value</li>
<li>photographer=&quot;&lt;value&gt;&quot;: select images whose photographer matches exactly the given value</li>
<li>place=&quot;&lt;value&gt;&quot;: select images whose place matches exactly the given value</li>
<li>caption=&quot;&lt;value&gt;&quot;: select images whose caption matches exactly the given value</li>
<li>date=&quot;&lt;value&gt;&quot;: select images whose date matches exactly the given value</li>
<li>type=&quot;&lt;value&gt;&quot;: select images whose type matches exactly the given value; valid type values are: png, jpeg, gif etc.</li>
<li>description_like=&quot;&lt;value&gt;&quot;: select images whose description matches partially the given value</li>
<li>photographer_like=&quot;&lt;value&gt;&quot;: select images whose photographer matches partially the given value</li>
<li>place_like=&quot;&lt;value&gt;&quot;: select images whose place matches partially the given value</li>
<li>caption_like=&quot;&lt;value&gt;&quot;: select images whose caption matches partially the given value</li>
<li>start_date=&quot;&lt;value&gt;&quot;: select images whose date matches or is greater than the given value</li>
<li>end_date=&quot;&lt;value&gt;&quot;: select images whose date matches or is smaller than the given value</li>
<li>search=&quot;&lt;value&gt;&quot;: select images whose description, photographer, place and caption matches partially the given value</li>
<li>local=&quot;true&quot; | &quot;false&quot;: select only local images if true, remote images if false</li>
</ul>
<p>Inside list_images the following statements are forbidden:</p>
<ul>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>set_publication</li>
<li>set_default_publication</li>
<li>unset_publication</li>
<li>list_issues</li>
<li>set_issue</li>
<li>set_default_issue</li>
<li>set_current_issue</li>
<li>unset_issue</li>
<li>list_sections</li>
<li>set_section</li>
<li>set_default_section</li>
<li>unset_section</li>
<li>list_articles</li>
<li>set_article</li>
<li>set_default_article</li>
<li>unset_article</li>
<li>list_article_attachments</li>
</ul>
<p>Inside the list, the current image is set to the current element of the list. The environment context is restored after the list processing.</p>
<p>Example:</p>
<pre class="prettyprint linenums"><code>{{ list_images photographer=&quot;John\ Doe&quot; order=&quot;byLastUpdate&quot; }}
    &lt;img src=&quot;{{ $gimme-&gt;image-&gt;thumbnailurl }}&quot; /&gt;&lt;br /&gt;
    &lt;p&gt;{{ $gimme-&gt;image-&gt;description }}&lt;/p&gt;
{{ /list_images }}</code></pre>
<p><span id="ch090_list-languages.xhtml"></span></p>
<h1>List languages</h1>
<h2>List of Languages</h2>
<p>Note: this works only in Newscoop 3.2.1 and newer versions.</p>
<h3>Purpose:</h3>
<p>Select the list of languages according to the given constraints and current environmental variables. The language variable may not be defined outside the list_languages statement; inside the statement however, this variable is defined. The code between the {{list_languages}} statement and {{/list_languages}} is repeated for every language in the list.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_languages [length=&quot;&lt;integer_value&gt;&quot;]
                  [columns=&quot;&lt;integer_value&gt;&quot;]
                  [of_publication=&quot;true|false&quot;]
                  [of_issue=&quot;true|false&quot;]
                  [of_article=&quot;true|false&quot;]
                  [exclude_current=&quot;true|false&quot;]
                  [order=&quot;&lt;order_condition&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /list_languages }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies the list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object.</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;:&lt;integer_value&gt; specifies the list columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list.</li>
<li>of_publication: if true, will list languages in which publication issues were translated</li>
<li>of_issue: if true, will list languages in which the current issue was translated</li>
<li>of_article: if true, will list languages in which the current article was translated</li>
<li>exclude_current: if true, will not include the current language in the list</li>
</ul>
<p>When none of the three attributes (of_publication, of_issue, of_section) was specified it will list all available languages in Newscoop.</p>
<p>&lt;list_of_instructions&gt; may contain any statement except those listed at the end of the page.</p>
<ul>
<li>&lt;order_condition&gt;=</li>
<li><ul>
<li>byNumber desc|asc</li>
<li>byName desc|asc</li>
<li>byEnglish_Name desc|asc</li>
<li>byCode desc|asc</li>
</ul></li>
</ul>
<p>Order conditions are self-explanatory.</p>
<p>Inside the list, the following environment variable is modified:</p>
<ul>
<li>language: if not defined before list start</li>
</ul>
<p>The environment is restored after the list ends.</p>
<h3>Constraints:</h3>
<p>Inside list_issues the following statements are forbidden:</p>
<ul>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>list_languages</li>
</ul>
<p><span id="ch091_list-search-results.xhtml"></span></p>
<h1>List search results</h1>
<h2>List of Search Results</h2>
<h3>Purpose:</h3>
<p>Create a list of articles that match the search keywords entered by the reader. The publication, language, issue, section, and article variables may not be defined outside the list_search_results statement; inside the statement however, all these variables are defined. The code between the &quot;{{ list_search_result }}&quot; statement and &quot;{{ /list_search_result }}&quot; is repeated for every article in the list.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ list_search_results [length=&quot;&lt;integer_value&gt;&quot;]
                       [columns=&quot;&lt;integer_value&gt;&quot;]
                       [order=&quot;&lt;order_condition&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /list_search_result }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>length=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies list_length and forces the list to have at most list_length items. If the list contains more items than list_length items the interval of elements to be displayed can be switched using has_previous_elements and has_next_elements from the current_list object.</li>
<li>columns=&quot;&lt;integer_value&gt;&quot;: &lt;integer_value&gt; specifies columns_number and sets an environment variable. This is incremented as if the items were placed in a table cell. The counting starts from one and the variable is incremented for every new element. When it reaches the maximum value it is reset to one. This is very useful in building tables of data. For details see current_list.</li>
</ul>
<p>&lt;list_of_instructions&gt; may contain any statement except: &quot;set_language&quot;, or &quot;set_publication&quot;.</p>
<ul>
<li>&lt;order_condition&gt;=</li>
<li><ul>
<li>byDate desc|asc</li>
<li>byCreationDate</li>
<li>byPublishDate</li>
<li>byNumber desc|asc</li>
<li>byName desc|asc</li>
</ul></li>
</ul>
<p>Order conditions are self-explanatory; byDate is an alias of byCreationDate. The default order of articles in the list (if no order condition was set) is: first they are ordered by the publication identifier ascending, then by the issue number descending, then by the section number ascending, and by the article order in the section ascending.</p>
<p>Inside the list, the data context is defined by the constraints applied to the current article for every processed line. The data context is restored after the list processing.</p>
<h3>Constraints:</h3>
<p>Inside list_articles the following statements are forbidden:</p>
<ul>
<li>set_language</li>
<li>set_default_language</li>
<li>unset_language</li>
<li>set_publication</li>
<li>set_default_publication</li>
<li>unset_publication</li>
<li>list_issues</li>
<li>set_issue</li>
<li>set_default_issue</li>
<li>set_current_issue</li>
<li>unset_issue</li>
<li>list_sections</li>
<li>set_section</li>
<li>set_default_section</li>
<li>unset_section</li>
<li>list_articles</li>
<li>set_article</li>
<li>set_default_article</li>
<li>unset_article</li>
</ul>
<p><span id="ch093_search-form.xhtml"></span></p>
<h1>Search form</h1>
<h2>Form Search</h2>
<h3>Purpose:</h3>
<p>Generate the search form and data fields for searching keywords in published articles. By default the search action is performed in the current publication only.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ search_form [template=&quot;&lt;template_name&gt;&quot;] submit_button=&quot;&lt;button_name&gt;&quot;
               [html_code=&quot;&lt;html_code&gt;&quot;]
               [button_html_code=&quot;&lt;html_code&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /search_form }}</code></pre>
<ul>
<li>&lt;template_name&gt; is the name of the next template to be requested from the search form</li>
<li>&lt;button_name&gt; is the name of the button for submitting the form</li>
<li>html_code: you can insert whatever HTML code you want in the &lt;form&gt; statement; for example: {{ user_form .. html_code=&quot;id=\&quot;my_id\&quot;&quot; }}</li>
<li>button_html_code: you can insert whatever HTML code you want in the button input field statement; such as: {{ user_form .. button_html_code=&quot;id=\&quot;my_submit_id\&quot;&quot; }}</li>
</ul>
<p>The list of instructions may contain any instruction allowed in the current context.</p>
<p>Setting the search scope: whether to search in all publications, in the current publication, in the current issue or in the current section. Insert the following field in the search form:</p>
<pre><code>{{ camp_select object=&quot;search&quot; attribute=&quot;level&quot; }}</code></pre>
<h3>Constraints:</h3>
<p>Can not be used within itself (e.g. search in search).</p>
<h2>Edit Search</h2>
<h3>Purpose:</h3>
<p>Generates a text input field so that a reader can search for articles on your site. This statement should be used inside the search form.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ camp_edit object=&quot;search&quot; attribute=&quot;&lt;attribute&gt;&quot;
                             [html_code=&quot;&lt;HTML_code&gt;&quot;]
                             [size =&quot;&lt;field_length&gt;&quot;] }}</code></pre>
<h3>Filters:</h3>
<p>&lt;attribute&gt; being one of the following:</p>
<ul>
<li>keywords: allows search keywords input</li>
<li>start_date: select only articles published starting on the selected date</li>
<li>end_date: select only articles published up to the selected date</li>
</ul>
<h3>Constraints:</h3>
<p>The search edit field can be used only inside the search form.</p>
<h2>Select Search</h2>
<h3>Purpose:</h3>
<p>Generates a check box or a pop-up list for selecting the search mode or the search level respectively. This statement should be used inside the search form.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ camp_select object=&quot;search&quot; attribute=&quot;&lt;attribute&gt;&quot;
                               [html_code=&quot;&lt;HTML_code&gt;&quot;] }}</code></pre>
<h3>Filters:</h3>
<p>&lt;attribute&gt; being one of the following:</p>
<ul>
<li>mode: if checked, the search will return articles that contain all entered keywords; if not checked, it will return articles that contain at least one keyword</li>
<li>level: allows the reader to select the scope of the search: multiple publications, publication, issue, section</li>
<li>section: select only articles that are in the given section</li>
<li>issue: select only articles that are in the given issue</li>
</ul>
<h3>Constraints:</h3>
<p>The select search field can only be used inside the search form.</p>
<p><span id="ch094_login-and-registration-form.xhtml"></span></p>
<h1>Login and registration form</h1>
<h2>Form - Login</h2>
<h3>Purpose:</h3>
<p>Generate the form and data fields for logging in a user.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ login_form [template=&quot;&lt;template_name&gt;&quot;] submit_button=&quot;&lt;button_name&gt;&quot;
              [html_code=&quot;&lt;html_code&gt;&quot;]
              [button_html_code=&quot;&lt;html_code&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /login_form }}</code></pre>
<ul>
<li>&lt;template_name&gt; is the name of the next template to be requested from the login form</li>
<li>&lt;button_name&gt; is the name of the button for submitting the form</li>
<li>html_code: you can insert whatever HTML code you want in the &lt;form&gt; statement; for example: {{ user_form .. html_code=&quot;id=\&quot;my_id\&quot;&quot; }}</li>
<li>button_html_code: you can insert whatever HTML code you want in the button input field statement; such as: {{ user_form .. button_html_code=&quot;id=\&quot;my_submit_id\&quot;&quot; }}</li>
</ul>
<h3>Constraints:</h3>
<p>Cannot be used inside subscription and user forms. Cannot be used within itself (e.g. login in login).</p>
<p>A simple implementation of a login form for the public website of your publication:</p>
<pre class="prettyprint linenums"><code>{{ if ! $gimme-&gt;user-&gt;logged_in }}
 &lt;p&gt;Login&lt;/p&gt;
  {{ if $gimme-&gt;login_action-&gt;is_error }}
   &lt;p&gt;There was an error logging in:
   {{ $gimme-&gt;login_action-&gt;error_message }}&lt;/p&gt;
  {{ /if }}
 {{ login_form submit_button=&quot;Login&quot; button_html_code=&quot;class=\&quot;submitbutton\&quot;&quot; }}
  &lt;p&gt;User ID: {{ camp_edit object=&quot;login&quot; attribute=&quot;uname&quot; }}&lt;/p&gt;
  &lt;p&gt;Password: {{camp_edit object=&quot;login&quot; attribute=&quot;password&quot; }}&lt;/p&gt;
 {{ /login_form }}
{{ else }}
 &lt;p&gt;Welcome {{ $gimme-&gt;user-&gt;name }}&lt;/p&gt;
 &lt;p&gt;&lt;a href=&quot;?logout=true&quot;&gt;Logout&lt;/a&gt;&lt;/p&gt;
{{ /if }}</code></pre>
<p>The logout requires this code in the head of every page:</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;url-&gt;get_parameter(&#39;logout&#39;) == &#39;true&#39; }}
 &lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; CONTENT=&quot;LoginUserId=; path=/&quot;&gt;
 &lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; CONTENT=&quot;LoginUserKey=; path=/&quot;&gt;
 {{ $gimme-&gt;url-&gt;reset_parameter(&#39;logout&#39;) }}
 &lt;META HTTP-EQUIV=&quot;Refresh&quot; content=&quot;0;url={{ uri }}&quot;&gt;
{{ /if }}</code></pre>
<h2>Edit Login</h2>
<h3>Purpose:</h3>
<p>Generates a text input field for entering a subscriber's login user name or password. Use this to allow a subscriber to login to your site. These statements should be used inside the login form.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ camp_edit object=&quot;login&quot; attribute=&quot;&lt;attribute&gt;&quot;
                            [html_code=&quot;&lt;HTML_code&gt;&quot;]
                            [size =&quot;&lt;field_length&gt;&quot;] }}</code></pre>
<h3>Filters:</h3>
<p>&lt;attribute&gt; being one of the following:</p>
<ul>
<li>uname: allows login name input</li>
<li>password: allows password input</li>
</ul>
<h3>Constraints:</h3>
<p>The login edit fields can only be used inside the login form.</p>
<h2>Select Login</h2>
<h3>Purpose:</h3>
<p>Generates a check box; if checked the user session will be remembered for a period of two weeks so the user will not have to login again. This statement should be used inside the login form.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ camp_select object=&quot;login&quot; attribute=&quot;rememberuser&quot;
                              [html_code=&quot;&lt;HTML_code&gt;&quot;] }}</code></pre>
<h3>Constraints:</h3>
<p>The select login field can only be used inside the login form.</p>
<h2>Logout</h2>
<p>There is no template keyword to logout a subscriber. Instead, just put these two lines in your logout.tpl file:</p>
<pre><code>&lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; CONTENT=&quot;LoginUserId=; path=/&quot;&gt;
&lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; CONTENT=&quot;LoginUserKey=; path=/&quot;&gt; </code></pre>
<h2>Form - User</h2>
<h3>Purpose:</h3>
<p>Generate the form and data fields for adding a new user, or editing an existing user's data.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ user_form [template=&quot;&lt;template_name&gt;&quot;] submit_button=&quot;&lt;button_name&gt;&quot;
             [html_code=&quot;&lt;html_code&gt;&quot;]
             [button_html_code=&quot;&lt;html_code&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /user_form }}</code></pre>
<ul>
<li>&lt;template_name&gt; is the name of the next template to be requested from the user form</li>
<li>&lt;button_name&gt; is the name of the button for submitting the form</li>
<li>html_code: you can insert whatever HTML code you want in the &lt;form&gt; statement; for example: {{ user_form .. html_code=&quot;id=\&quot;my_id\&quot;&quot; }}</li>
<li>button_html_code: you can insert whatever HTML code you want in the button input field statement; such as: {{ user_form .. button_html_code=&quot;id=\&quot;my_submit_id\&quot;&quot; }}</li>
</ul>
<h3>Constraints:</h3>
<p>Cannot be used inside subscription and login forms. Cannot be used within itself (for example: user in user).</p>
<h2>Edit User</h2>
<h3>Purpose:</h3>
<p>Generates a text input field for editing the selected user attribute. This statement should be used inside the user form.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ camp_edit object=&quot;search&quot; attribute=&quot;&lt;attribute&gt;&quot;
                             [html_code=&quot;&lt;HTML_code&gt;&quot;]
                             [size =&quot;&lt;field_length&gt;&quot;]
                             [columns=&quot;&lt;max_columns&gt;&quot;]
                             [rows=&quot;&lt;max_rows&gt;&quot;] }}</code></pre>
<h3>Filters:</h3>
<p>&lt;attribute&gt; being one of the following:</p>
<ul>
<li>name</li>
<li>uname</li>
<li>email</li>
<li>city</li>
<li>str_address</li>
<li>state</li>
<li>phone</li>
<li>fax</li>
<li>contact</li>
<li>second_phone</li>
<li>postal_code</li>
<li>employer</li>
<li>position</li>
<li>how</li>
<li>languages</li>
<li>field1</li>
<li>field2</li>
<li>field3</li>
<li>field5</li>
<li>interests</li>
<li>improvements</li>
<li>text1</li>
<li>text2</li>
<li>text3</li>
<li>password</li>
<li>passwordagain</li>
</ul>
<p>The parameters (name, uname, email, city...) are fields describing the user's data; field1-field5, text1-text3 are extra fields for storing extra information of your choice.</p>
<p>Note: the columns and rows parameters were implemented starting with Newscoop version 3.2.2.</p>
<h3>Constraints:</h3>
<p>The user edit field can only be used inside the user form.</p>
<h2>Select User</h2>
<h3>Purpose:</h3>
<p>Generates a drop-down list or radio buttons for selecting values for the given fields. This statement should be used inside the user form.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ camp_select object=&quot;user&quot; attribute=&quot;&lt;attribute&gt;&quot;
                             [html_code=&quot;&lt;HTML_code&gt;&quot;] }}</code></pre>
<h3>Filters:</h3>
<p>&lt;attribute&gt; being one of the following:</p>
<ul>
<li>gender</li>
<li>title</li>
<li>country</li>
<li>age</li>
<li>employertype</li>
<li>pref1</li>
<li>pref2</li>
<li>pref3</li>
<li>pref4</li>
</ul>
<p>The parameters (country, title, gender...) are fields describing the user information; pref1-pref4 are extra fields for storing extra information (the publication administrator sets their meaning).</p>
<h3>Constraints:</h3>
<p>The select user field can only be used inside the user form.</p>
<p><span id="ch095_subscription-form.xhtml"></span></p>
<h1>Subscription form</h1>
<h2>Form - Subscription</h2>
<h3>Purpose:</h3>
<p>Generate the form and default data fields for subscription. Edit and Select statements can be used to generate fields for every section in an issue.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ subscription_form type=&quot;&lt;subscription_type&gt;&quot;
                          [template=&quot;&lt;template_name&gt;&quot;]
                          submit_button=&quot;&lt;button_name&gt;&quot;
                          [total=&quot;&lt;total_field_name&gt;&quot;]
                          [html_code=&quot;&lt;html_code&gt;&quot;]
                          [button_html_code=&quot;&lt;html_code&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /subscription_form }}</code></pre>
<ul>
<li>&lt;subscription_type&gt; has two values: by_publication and by_section</li>
<li>&lt;template_name&gt; is the name of the next template to be requested from the subscription form</li>
<li>&lt;button_name&gt; is the name of the button for submitting the form</li>
<li>&lt;total_field_name&gt; is the name of the field where the total payment is written</li>
<li>&lt;evaluate_button_name&gt; is the name of the evaluate button (when pressing this button, the total payment is updated in the total field</li>
<li>html_code: you can insert whatever HTML code you want in the &lt;form&gt; statement; for example: {{ user_form .. html_code=&quot;id=\&quot;my_id\&quot;&quot; }}</li>
<li>button_html_code: you can insert whatever HTML code you want in the button input field statement; such as: {{ user_form .. button_html_code=&quot;id=\&quot;my_submit_id\&quot;&quot; }}</li>
</ul>
<h3>Constraints:</h3>
<p>Cannot be used inside user and login forms. Cannot be used within itself (for example: subscription in subscription).</p>
<h2>Edit Subscription</h2>
<h3>Purpose:</h3>
<p>Generates an input field for editing the subscription time for a certain section. The section must be defined in the template environment. This statement should be used inside the subscription form.</p>
<h3>Syntax:</h3>
<pre><code>{{ camp_edit object=&quot;search&quot; attribute=&quot;time&quot;
                             [html_code=&quot;&lt;HTML_code&gt;&quot;]
                             [size =&quot;&lt;field_length&gt;&quot;] }}</code></pre>
<h3>Constraints:</h3>
<p>The subscription edit field can only be used inside the subscription form.</p>
<h2>Select Subscription</h2>
<h3>Purpose:</h3>
<p>Special-purpose input for subscription data.</p>
<h3>Syntax:</h3>
<pre><code>{{ camp_select object=&quot;subscription&quot; attribute=&quot;&lt;attribute&gt;&quot;
                                     [html_code=&quot;&lt;HTML_code&gt;&quot;] }}</code></pre>
<h3>Filters:</h3>
<p>&lt;attribute&gt; being one of the following:</p>
<ul>
<li>section: generates a checkbox for selecting the current section in the subscription form; use together with &quot;List of Sections&quot; (see also &quot;Creating reader subscriptions through the template language&quot;)</li>
<li>allLanguages: generates a checkbox allowing the user to choose a subscription to all available languages</li>
<li>languages: generates a multiple selection list allowing the user to select individual languages; this selection list is automatically deactivated if the user chose to subscribe to all available languages.</li>
</ul>
<h3>Constraints:</h3>
<p>The select subscription field can only be used inside the subscription form.</p>
<p><span id="ch096_comment-form.xhtml"></span></p>
<h1>Comment form</h1>
<h2>Form - Comment</h2>
<h3>Purpose:</h3>
<p>Generate the form and default data fields for article comment submission. Inside the form camp_edit statements can be used to generate article comment input fields.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ comment_form [template=&quot;&lt;template_name&gt;&quot;]
                submit_button=&quot;&lt;submit_button_name&gt;&quot;
                [preview_button=&quot;&lt;preview_button_name&gt;&quot;]
                [html_code=&quot;&lt;html_code&gt;&quot;]
                [button_html_code=&quot;&lt;html_code&gt;&quot;] }}
   &lt;list_of_instructions&gt;
{{ /comment_form }}</code></pre>
<ul>
<li>&lt;template_name&gt;: the name of the next template to be requested when submitting the comment</li>
<li>&lt;submit_button_name&gt;: the name of the button for submitting the comment</li>
<li>&lt;preview_button_name&gt;: the name of the button for previewing the comment</li>
<li>html_code: you can insert whatever HTML code you want in the &lt;form&gt; statement; for example: {{ user_form .. html_code=&quot;id=\&quot;my_id\&quot;&quot; }}</li>
<li>button_html_code: you can insert whatever HTML code you want in the button input field statement; such as: {{ user_form .. button_html_code=&quot;id=\&quot;my_submit_id\&quot;&quot; }}</li>
</ul>
<h2>Edit Comment</h2>
<h3>Purpose:</h3>
<p>Generates text fields so that a user can enter a comment. This statement should be used inside the comment form.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ camp_edit object=&quot;comment&quot; attribute=&quot;&lt;attribute&gt;&quot;
                              [html_code=&quot;&lt;HTML_code&gt;&quot;]
                              [size =&quot;&lt;field_length&gt;&quot;]
                              [columns=&quot;&lt;max_columns&gt;&quot;]
                              [rows=&quot;&lt;max_rows&gt;&quot;] }}</code></pre>
<h3>Filters:</h3>
<p>&lt;attribute&gt; being one of the following:</p>
<ul>
<li>nickname: a place for the user to type in a nickname</li>
<li>reader_email: a place for the user to type in their email address; this field is optional for logged in readers because the email can be read from the subscribers database</li>
<li>subject: a place for the user to type in a subject line for their comment</li>
<li>content: a place for the user to type in their comment.</li>
</ul>
<p>The attributes reader_email, subject and content are mandatory in each Edit Comment form.</p>
<p>Note: the columns and rows parameters were implemented starting with Newscoop version 3.2.2.</p>
<h3>Constraints:</h3>
<p>The comment edit field can only be used inside the comment form.</p>
<h2>Edit CAPTCHA</h2>
<h3>Purpose:</h3>
<p>Generates a text field allowing the user to input the CAPTCHA code for spam control. This statement should be used inside the comment form.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ camp_edit object=&quot;captcha&quot; attribute=&quot;code&quot;
                              [html_code=&quot;&lt;HTML_code&gt;&quot;]
                              [size =&quot;&lt;field_length&gt;&quot;] }}</code></pre>
<h2>CAPTCHA ImageLink</h2>
<h3>Purpose:</h3>
<p>&quot;captcha_image_link&quot; will insert the link for the CAPTCHA image. Use inside an &quot;img&quot; HTML tag as follows:</p>
<pre><code> &lt;img src=&quot;{{ captcha_image_link }}&quot;&gt;</code></pre>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ captcha_image_link }}</code></pre>
<p><span id="ch097_action-check-on-form-submission.xhtml"></span></p>
<h1>Action check on form submission</h1>
<h2>Edit Subscription Action</h2>
<p>The edit_subscription_action object is initialized when a subscription form was submitted. It has the following properties:</p>
<ul>
<li>defined: true if a subscription submit action took place</li>
<li>is_error: true if a subscription submit action took place and the result was an error</li>
<li>error_code: error code of the subscription submit action; null if no subscription submit action took place</li>
<li>error_message: error message of the subscription submit action; null if no subscription submit action took place</li>
<li>ok: true if a subscription submit action took place and the result was success</li>
<li>is_trial: true if the submitted subscription type was trial</li>
<li>is_paid: true if the submitted subscription type was paid subscription</li>
</ul>
<h2>Edit User Action</h2>
<p>The edit_user_action object is initialized when a user add/edit form was submitted. It has the following properties:</p>
<ul>
<li>defined: true if a user data submit action took place</li>
<li>is_error: true if a user data submit action took place and the result was an error</li>
<li>error_code: error code of the user data submit action; null if no user data submit action took place</li>
<li>error_message: error message of the user data submit action; null if no user data submit action took place</li>
<li>ok: true if a user data submit action took place and the result was success</li>
<li>type: can take one of the following two values: &quot;add&quot; for user add submit, &quot;edit&quot; for an existing user data edit submit</li>
<li>name: the user full name as filled in the form</li>
<li>uname: the user login name as filled in the form</li>
<li>password: the account password as filled in the form</li>
<li>passwordagain: the password confirmation</li>
<li>email: the user email as filled in the form</li>
<li>city</li>
<li>str_address</li>
<li>state</li>
<li>phone</li>
<li>fax</li>
<li>contact</li>
<li>second_phone</li>
<li>postal_code</li>
<li>employer</li>
<li>position</li>
<li>interests</li>
<li>how</li>
<li>languages</li>
<li>improvements</li>
<li>field1</li>
<li>field2</li>
<li>field3</li>
<li>field4</li>
<li>field5</li>
<li>text1</li>
<li>text2</li>
<li>text3</li>
<li>country</li>
<li>title</li>
<li>gender</li>
<li>age</li>
<li>employertype</li>
<li>pref1</li>
<li>pref2</li>
<li>pref3</li>
<li>pref4</li>
</ul>
<h2>Login Action</h2>
<p>The login_action object is defined when a login action takes place. It has the following properties:</p>
<ul>
<li>defined: true if a login action took place</li>
<li>is_error: true if a login action took place and the result was an error</li>
<li>error_code: error code of the login action; null if no login action took place</li>
<li>error_message: error message of the login action; null if no login action took place</li>
<li>ok: true if a login action took place and the result was successful</li>
<li>user_name: the login name of the user that attempted to log in</li>
<li>remember_user: true if the remember user flag was set in the login form</li>
</ul>
<h2>Preview Comment Action</h2>
<p>The preview_comment_action object is initialized when the preview button is clicked on a comment form. It has the following properties:</p>
<ul>
<li>defined: true if a comment preview action took place</li>
<li>is_error: true if a comment preview action took place and the result was an error</li>
<li>error_code: error code of the comment preview action; null if no comment preview action took place</li>
<li>error_message: error message of the comment preview action; null if no comment preview action took place</li>
<li>ok: true if a comment preview action took place and the result was successful</li>
<li>subject: the comment subject as filled in the form</li>
<li>content: the comment content as filled in the form</li>
<li>reader_email: the comment reader email as filled in the form</li>
</ul>
<h2>Search Articles Action</h2>
<p>The search_articles_action object is initialized when a search action takes place. It has the following properties:</p>
<ul>
<li>defined: true if a search action took place</li>
<li>is_error: true if a search action took place and the result was an error</li>
<li>error_code: error code of the search action; null if no search action took place</li>
<li>error_message: error message of the search action; null if no search action took place</li>
<li>ok: true if a search action took place and the result was successful</li>
<li>search_phrase: the phrase for which the search was performed</li>
<li>search_keywords: an array of keywords for which the search was performed</li>
<li>match_all: true if the match all flag was set</li>
<li>search_level: 0 for multiple publication search, 1 for current publication search, 2 for current issue search, 3 for current section search</li>
<li>submit_button: the submit button text</li>
<li>template: the template used on search form submission</li>
</ul>
<h2>Submit Comment Action</h2>
<p>The submit_comment_action object is initialized when a comment form is submitted. It has the following properties:</p>
<ul>
<li>defined: true if a comment submit action took place</li>
<li>is_error: true if a comment submit action took place and the result was an error</li>
<li>error_code: error code of the comment submit action; null if no comment submit action took place</li>
<li>error_message: error message of the comment submit action; null if no comment submit action took place</li>
<li>ok: true if a comment submit action took place and the result was successful</li>
<li>subject: the comment subject as filled in the form</li>
<li>content: the comment content as filled in the form</li>
<li>reader_email: the comment reader email as filled in the form</li>
</ul>
<p><span id="ch098_general-form-elements-and-functions.xhtml"></span></p>
<h1>General form elements and functions</h1>
<h2>Form Parameters</h2>
<p>&quot;formparameters&quot; prints the runtime environment parameters in HTML form format. It prints only data context parameters and can be used to create links.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ formparameters [options=&quot;&lt;options_list&gt;&quot;] }}</code></pre>
<ul>
<li>&lt;options_list&gt; =</li>
<li><ul>
<li>&lt;option&gt;</li>
<li>&lt;option&gt; &lt;options_list&gt;</li>
</ul></li>
</ul>
<ul>
<li>&lt;option&gt; =</li>
<li><ul>
<li>fromStart</li>
<li>articleComment</li>
</ul></li>
</ul>
<h3>Filters:</h3>
<ul>
<li>fromstart: prints the parameters received at the start of the template, not the current ones (useful when building site maps)</li>
<li>articleComment: inserts the article comment identifier in the parameters list; if no article comment was defined in the template environment, no parameter is inserted. This attribute is needed if you want to pass the current comment id to another page for display purposes.</li>
</ul>
<h2>Option Input Fields</h2>
<h3>Purpose:</h3>
<p>Generate an option input field; these fields are used in forms to allow the reader to enter data. These must be used in conjunction with the form statements.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ camp_select object=&quot;&lt;object_name&gt;&quot;
               attribute=&quot;&lt;attribute_name&gt;&quot;
               [html_code=&quot;&lt;HTML_code&gt;&quot;] }}</code></pre>
<p>If the html_code parameter was set, the HTML code will be inserted inside the input field.</p>
<h3>Example:</h3>
<pre class="prettyprint"><code>{{ camp_select object=&quot;user&quot;
               attribute=&quot;country&quot;
               html_code=&quot;id=\&quot;countryId\&quot;&quot; }}</code></pre>
<p>The following code will output a pop-up list of available countries:</p>
<pre class="prettyprint linenums"><code>&lt;select name=&quot;f_user_country&quot; id=&quot;countryId&quot;&gt;
...
&lt;/select&gt;</code></pre>
<h2>Text Input Fields</h2>
<h3>Purpose:</h3>
<p>Generate an input text field; these fields are used in forms to allow the reader to enter data. These must be used in conjunction with the form statements.</p>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ camp_edit object=&quot;&lt;object_name&gt;&quot;
             attribute=&quot;&lt;attribute_name&gt;&quot;
             [html_code=&quot;&lt;HTML_code&gt;&quot;]
             [size =&quot;&lt;field_length&gt;&quot;]
             [columns=&quot;&lt;max_columns&gt;&quot;]
             [rows=&quot;&lt;max_rows&gt;&quot;] }}</code></pre>
<p>For text input fields, if the size parameter was set, the input field size will be set to that value. For text box fields, if the columns/rows parameter was set, the box will have the given number of columns/rows.</p>
<p>Note: columns and rows parameters were implemented starting with Newscoop version 3.2.2.</p>
<p>If the html_code parameter was set, the HTML code will be inserted inside the input field. For example, the following code:</p>
<pre class="prettyprint"><code>{{ camp_edit object=&quot;user&quot;
             attribute=&quot;name&quot;
             html_code=&quot;id=\&quot;userNameInput\&quot;&quot; }}</code></pre>
<p>will output:</p>
<pre class="prettyprint"><code>&lt;input type=&quot;text&quot; name=&quot;f_user_name&quot; size=&quot;50&quot; maxlength=&quot;255&quot; id=&quot;userNameInput&quot;&gt;</code></pre>
<p><span id="ch100_map.xhtml"></span></p>
<h1>Map</h1>
<p>Note: this works only in Newscoop 3.5.0 and later versions.</p>
<p>Requires jQuery: In order to use display maps you must include jQuery in the header of your document, with a link like this:</p>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&quot;&gt;</code></pre>
<p>The map_ object is usually initialized by the current article in the environment (see &quot;Article&quot;). It is not initialized at the beginning of the template and can not be initialized by other Newscoop functions. The map_ object has the following properties:</p>
<ul>
<li>name: the name given to the map</li>
<li>provider: the map provider</li>
<li>locations: a list of map locations, see the &quot;Article Location&quot; object</li>
<li>is_enabled: TRUE if the map is enabled, FALSE otherwise</li>
</ul>
<p>Examples</p>
<pre class="prettyprint linenums"><code>{{ if $gimme-&gt;map-&gt;is_enabled }}
    &lt;p&gt;Map Name: {{ $gimme-&gt;map-&gt;name }}&lt;/p&gt;
    &lt;p&gt;Map Provider: {{ $gimme-&gt;map-&gt;provider }}&lt;/p&gt;
{{ /if }}</code></pre>
<p><span id="ch101_displaying-a-map.xhtml"></span></p>
<h1>Displaying a map</h1>
<p>Note: this works only in Newscoop 3.5.0 and later versions.</p>
<p>Maps require jQuery: In order to use display maps you must include jQuery in the header of your document, with a link like this:</p>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&quot;&gt;</code></pre>
<h3>Purpose:</h3>
<p>&quot;map&quot; prints a geolocation map and the list of locations. The article containing the map must have been previously initialized, otherwise this function will display nothing.</p>
<h3>Syntax:</h3>
<pre class="prettyprint"><code>{{ map [width=&quot;&lt;width_value&gt;&quot;]
       [height=&quot;&lt;height_value&gt;&quot; ]
       [show_locations_list=&quot;&lt;boolean_value&gt;&quot; ]
       [show_reset_link=&quot;&lt;string_value&gt;|&lt;boolean_value&gt;&quot; ] }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>width: &lt;width_value&gt; Width size for the Map frame to be displayed</li>
<li>height: &lt;height_value&gt; Height size for the Map frame to be displayed</li>
<li>show_locations_list: &lt;boolean_value&gt; Whether the list of map locations is displayed or not. Default value FALSE</li>
<li>show_reset_link: &lt;string value&gt; | &lt;boolean value&gt; Whether the link to reset the Map to the initial view is displayed or not. Default value TRUE. If a string is provided instead of TRUE or true, then the string will be used as the link text instead of the default text.</li>
</ul>
<h2>Styling the Map view</h2>
<p>Below you can see an example of the code generated by Newscoop to display a Map. You can style the way it looks like by defining CSS styles for the classes.<br />
</p>
<pre class="prettyprint linenums"><code> &lt;!-- Map Container START //--&gt;
&lt;div class=&quot;geomap_container&quot;&gt;
  &lt;!-- Map general info and
locations Container START //--&gt;
  &lt;div class=&quot;geomap_locations&quot;&gt;
    &lt;!-- Map General Info (Title)
START //--&gt;
    &lt;div class=&quot;geomap_info&quot;&gt;
      &lt;dl class=&quot;geomap_map_name&quot;&gt;
        &lt;dt
class=&quot;geomap_map_name_label&quot;&gt;Map:&lt;/dt&gt;
        &lt;dd
class=&quot;geomap_map_name_value&quot;&gt;My Map&lt;/dd&gt;
      &lt;/dl&gt;
    &lt;/div&gt;
    &lt;!-- Map General Info (Title)
END //--&gt;
    &lt;!-- Map Locations List START
//--&gt;
    &lt;div id=&quot;side_info&quot;
class=&quot;geo_side_info&quot;&gt;
      &lt;!-- Map Location Nr. 1 START
//--&gt;
      &lt;div id=&quot;poi_seq_0&quot;&gt;
        &lt;a class=&quot;geomap_poi_name&quot;
href=&quot;#&quot;
onClick=&quot;geo_hook_on_map_feature_select(geo_object_61_1, 0);
return false;&quot;&gt;POI no. 1&lt;/a&gt;
        &lt;div
class=&quot;geomap_poi_perex&quot;&gt;&lt;/div&gt;
        &lt;div
class=&quot;geomap_poi_center&quot;&gt;
          &lt;a href=&quot;#&quot;
onClick=&quot;geo_object_61_1.center_lonlat(14.753722843736,
48.948841006863); return false;&quot;&gt;Center&lt;/a&gt;
        &lt;/div&gt;
        &lt;div
class=&quot;geomap_poi_spacer&quot;&gt;&amp;nbsp;&lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- Map Location Nr. 1 END
//--&gt;
      &lt;!-- Map Location Nr. 2 START
//--&gt;
      &lt;div id=&quot;poi_seq_1&quot;&gt;
        &lt;a class=&quot;geomap_poi_name&quot;
href=&quot;#&quot;
onClick=&quot;geo_hook_on_map_feature_select(geo_object_61_1, 1);
return false;&quot;&gt;POI Name&lt;/a&gt;
        &lt;div
class=&quot;geomap_poi_perex&quot;&gt;Any text&lt;/div&gt;
        &lt;div
class=&quot;geomap_poi_center&quot;&gt;          &lt;a href=&quot;#&quot;
onClick=&quot;geo_object_61_1.center_lonlat(1.240539250526,
47.067502513872); return false;&quot;&gt;Center&lt;/a&gt;
        &lt;/div&gt;
        &lt;div
class=&quot;geomap_poi_spacer&quot;&gt;&amp;nbsp;&lt;/div&gt;
      &lt;/div&gt;
      &lt;!-- Map Location Nr. 2 END
//--&gt;
    &lt;/div&gt;
    &lt;!-- Map Locations List END
//--&gt;
  &lt;/div&gt;
  &lt;!-- Map general info and
locations Container START //--&gt;
  &lt;!-- Map Menu (Show Reset Link)
START //--&gt;
  &lt;div class=&quot;geomap_menu&quot;&gt;
    &lt;a href=&quot;#&quot;
onClick=&quot;geo_object_61_1.map_showview(); return false;&quot;&gt;Gimme
my map&lt;/a&gt;
  &lt;/div&gt;
  &lt;!-- Map Menu (Show Reset Link)
END //--&gt;
  &lt;!-- Map Render Area START //--&gt;
  &lt;div class=&quot;geomap_map&quot;&gt;
    &lt;div
id=&quot;geo_map_mapcanvas_61_1&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- Map Render Area END //--&gt;
&lt;/div&gt;
&lt;div style=&quot;clear:both&quot;
&gt;&lt;/div&gt;</code></pre>
<p>Sourcefabric provides some styling definitions as part of the sample templates.</p>
<p><span id="ch102_location-multimedia.xhtml"></span></p>
<h1>Location multimedia</h1>
<p>Note: this works only in Newscoop 3.5.0 and later versions.</p>
<p>Maps require jQuery : In order to use display maps you must include jQuery in the header of your document, with a link like this:</p>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js&quot;&gt;</code></pre>
<p>The location multimedia object is usually initialized inside an Article Location object. It is not initialized at the beginning of the template and cannot be initialized by other Newscoop functions. The location multimedia object has the following properties:</p>
<ul>
<li>src: the media URL (for images), identifier (for YouTube, Vimeo videos), or file name (for flash, flv videos)</li>
<li>type: can be &quot;image&quot; or &quot;video&quot;</li>
<li>spec: for video type it can return the following: &quot;youtube&quot;, &quot;vimeo&quot;, &quot;flash&quot;, &quot;flv&quot;; for image the empty string</li>
<li>width: integer specifying the media frame width in pixels; the media is resized to this width (if non-zero)</li>
<li>height: integer specifying the media frame height in pixels; the media is resized to this height (if non-zero)</li>
</ul>
<p><span id="ch103_geolocation-search.xhtml"></span></p>
<h1>Geolocation search</h1>
<p>The javascript/geocoding/map_search.js file has implemented a class for a map with the capability for the user to specify a search area. The area is selected via a half-transparent box. The output should be sent to the server where processed, as described below.</p>
<p>The search map can be used via the GetMapSearchHeader, GetMapSearchBody, and GetMapSearchCenter static methods of the Geo_Map class. They work in a similar way to the preview/tag functions. You can provide width and height values for the search map and optionally a list of four &lt;div&gt; ids for automatic storage of top-left and bottom-right longitude/latitude values. The values can be taken from the class by calling the get_top_left and get_bottom_right methods of an instantiated object.</p>
<p>An example of the visual search interface is in the admin-files/articles/locations/search.php file.</p>
<p>The Geo_Map::GetGeoSearchSQLQuery takes two coordinates - opposite corners of the search area - and it returns a SQL statement for the database search. The two corners should go from West to East, otherwise it would not be known whether the box goes over the 180/-180 meridian or not. It is as shown below:</p>
<pre class="prettyprint linenums"><code>// going east to west over the 180/-180, and south to north
$p_coordinates = array();
$p_coordinates[] = array(&quot;longitude&quot; =&gt; &quot;150&quot;, &quot;latitude&quot; =&gt; &quot;20&quot;);
$p_coordinates[] = array(&quot;longitude&quot; =&gt; &quot;40&quot;, &quot;latitude&quot; =&gt; &quot;60&quot;);

// going directly west to east, and north to south
$p_coordinates = array();
$p_coordinates[] = array(&quot;longitude&quot; =&gt; &quot;-10&quot;, &quot;latitude&quot; =&gt; &quot;60&quot;);
$p_coordinates[] = array(&quot;longitude&quot; =&gt; &quot;40&quot;, &quot;latitude&quot; =&gt; &quot;-20&quot;);

$query = Geo_Map::GetGeoSearchSQLQuery($p_coordinates);
echo $query;</code></pre>
<p><span id="ch105_date-and-e-mail-formatting.xhtml"></span></p>
<h1>Date and e-mail formatting</h1>
<h2>Date Formatting</h2>
<p>The &quot;camp_date_format&quot; modifier formats a date string as specified:</p>
<pre class="prettyprint"><code>{{ &lt;string&gt;|camp_date_format:&quot;&lt;date_attribute&gt;&quot; }}</code></pre>
<pre class="prettyprint"><code>{{ &lt;string&gt;|camp_date_format:&quot;&lt;date_format&gt;&quot; }}</code></pre>
<h3>Filters:</h3>
<p>&lt;date_attribute&gt; may be one of the following:</p>
<ul>
<li>year: year (four digits)</li>
<li>mon: month as a number (1..12)</li>
<li>mday: day of the month as a number (1..31)</li>
<li>yday: day of the year (1..366)</li>
<li>wday: day of the week as a number (0=Sunday..6=Saturday)</li>
<li>hour: hour (0..23)</li>
<li>min: minute (two digits)</li>
<li>sec: seconds (two digits)</li>
<li>mon_name: name of the month</li>
<li>wday_name: day of the week</li>
</ul>
<p>&lt;date_format&gt; may contain any printable character; escape &quot; (double quotes) in the date formatting with \ (backslash). For example: &quot;%M %e, %Y, \&quot;%W\&quot;&quot; will display the the date like this: July 5, 2008, &quot;Saturday&quot;.</p>
<p>The following groups of characters have special meaning:</p>
<ul>
<li>%M - month name</li>
<li>%W - weekday name</li>
<li>%Y - year (4 digits)</li>
<li>%y - year (2 digits)</li>
<li>%m - month (01..12)</li>
<li>%c - month (1..12)</li>
<li>%w - day of the week (0=Sunday..6=Saturday)</li>
<li>%d - day of the month (00..31)</li>
<li>%e - day of the month (0..31)</li>
<li>%j - day of the year (001..366)</li>
<li>%D - day of the month with English suffix (1st, 2nd, 3rd etc.)</li>
<li>%H - hour in format 00..23</li>
<li>%h - hour in format 01..12</li>
<li>%l - hour in format 1..12</li>
<li>%i - minutes in format 00..59</li>
<li>%S - seconds in format 00..59</li>
<li>%s - is an alias of %S</li>
<li>%p - AM or PM</li>
</ul>
<h3>Constraints:</h3>
<p>None</p>
<h2>Email Obfuscation</h2>
<p>The &quot;obfuscate_email&quot; modifier obfuscates a string; the email string is obfuscated to prevent spambot web crawlers from finding it.</p>
<pre class="prettyprint"><code>{{ &lt;email_string&gt;|obfuscate_email }}</code></pre>
<p><span id="ch106_file-size-formatting.xhtml"></span></p>
<h1>File size formatting</h1>
<p>The &quot;camp_filesize_format&quot; modifier formats an integer in Byte specific multiples:</p>
<pre class="prettyprint"><code>{{ &lt;integer&gt;|camp_filesize_format:&quot;&lt;filesize_format&gt;&quot; }}</code></pre>
<p>&lt;filesize_format&gt; may take one of the following values:</p>
<ul>
<li>TB: for displaying the size in terabytes</li>
<li>GB: for displaying the size in gigabytes</li>
<li>MB: for displaying the size in megabytes</li>
<li>KB: for displaying the size in kilobytes</li>
<li>B: for displaying the size in bytes</li>
</ul>
<p><span id="ch107_truncating-utf8-strings.xhtml"></span></p>
<h1>Truncating UTF8 strings</h1>
<p>The &quot;truncate_utf8&quot; modifier behaves exactly like the Smarty truncate modifier, except that it works properly on UTF8 strings. See more details on truncate here:</p>
<p><a href="http://www.smarty.net/manual/en/language.modifier.truncate.php" class="uri" title="Smarty truncate modifier">http://www.smarty.net/manual/en/language.modifier.truncate.php</a></p>
<p><span id="ch108_url-display-and-modifying.xhtml"></span></p>
<h1>URL display and modifying</h1>
<h2>Displaying the URL</h2>
<h3>Purpose:</h3>
<p>&quot;uripath&quot; prints only the path part of the URI, the part before the parameters list. If &quot;/en/1/2/3?param1=text&quot; was the full URI, the URI path is &quot;/en/1/2/3&quot;.</p>
<p>&quot;urlparameters&quot; prints the runtime environment parameters in URL format.</p>
<p>&quot;uri&quot; prints the complete link URI and it is equivalent to:</p>
<pre><code>{{ uripath }}?{{ urlparameters }}</code></pre>
<p>&quot;url&quot; prints the complete URL in the form:</p>
<pre><code>http://[site_alias][uri]</code></pre>
<p>It is equivalent to:</p>
<pre class="prettyprint"><code>http://{{ $gimme-&gt;publication-&gt;site }}{{ uri }}</code></pre>
<p>Note:</p>
<ul>
<li>All four statements work for both template path and short URL types. Depending on the URL type, the statement displays the proper link</li>
<li>For publications with short URL type the only way to create links is to use these three statements: either url, uri, uripath or urlparameters. It is not possible to build the URI manually</li>
</ul>
<h3>Syntax:</h3>
<pre class="prettyprint linenums"><code>{{ url [options=&quot;&lt;options_list&gt;&quot;] }}
{{ uri [options=&quot;&lt;options_list&gt;&quot;] }}
{{ uripath [options=&quot;&lt;options_list&gt;&quot;] }}
{{ urlparameters [options=&quot;&lt;options_list&gt;&quot;] }}</code></pre>
<h3>Filters:</h3>
<ul>
<li>&lt;options_list&gt;=</li>
<li><ul>
<li>&lt;option&gt; &lt;list_of_options&gt;</li>
<li>&lt;option&gt;</li>
</ul></li>
<li>&lt;option&gt;=</li>
<li><ul>
<li>fromstart</li>
<li>reset_issue_list</li>
<li>reset_section_list</li>
<li>reset_article_list</li>
<li>reset_searchresult_list</li>
<li>reset_subtitle_list</li>
<li>image &lt;image_number&gt; &lt;image_options&gt;</li>
<li>root_level</li>
<li>language</li>
<li>publication</li>
<li>issue</li>
<li>section</li>
<li>article</li>
<li>template &lt;template_name&gt;</li>
<li>articleAttachment</li>
<li>articleComment</li>
<li>audioAttachment</li>
<li>previous_subtitle &lt;field_name&gt;</li>
<li>next_subtitle &lt;field_name&gt;</li>
<li>all_subtitles &lt;field_name&gt;</li>
<li>previous_items</li>
<li>next_items</li>
</ul></li>
</ul>
<p>&lt;image_number&gt; is an &lt;integer_value&gt; representing a valid number of article images</p>
<p>&lt;template_name&gt; is a &lt;string value&gt; representing the full path of a valid template</p>
<ul>
<li>fromstart: prints the url corresponding to the received request, before any changes were made to the template runtime environment (useful when building site maps)</li>
<li>reset_issue_list: reset list counters for the issues list</li>
<li>reset_section_list: reset list counters for the sections list</li>
<li>reset_article_list: reset list counters for the articles list</li>
<li>reset_searchresult_list: reset list counters for the search results list</li>
<li>reset_subtitle_list: reset list counters for the subtitles list</li>
<li>image: print image parameters in order to show an image in a template; if you use this statement inside the &quot;List of Article Images&quot; statement the image number value is not mandatory. The image options are different depending on the Newscoop version</li>
</ul>
<p>For Newscoop versions 3.0-3.3:</p>
<p>&lt;image_options&gt;=&lt;image_ratio&gt;.</p>
<p>The &quot;image_ratio&quot; parameter is an integer between 1 and 100. The image will be scaled from 1% of it's size to 100% based on the image ratio parameter.</p>
<p>For Newscoop versions 3.4 and newer:</p>
<p>&lt;image_options&gt;=&lt;image_ratio&gt;|width &lt;width&gt;|height &lt;height&gt;.</p>
<p>The &quot;image_ratio&quot; parameter is the same as above. You can specify an image to be resized to the given width or height.</p>
<p>E.g.: {{ uri options=&quot;image 1 width 100 height 100 }}</p>
<ul>
<li>root_level: this link will have all parameters reset: language, publication, issue, section, article, subtitle, lists, indexes etc.</li>
<li>language: this link will have all parameters above language reset: publication, issue, section, article, subtitle, lists, indexes etc.; the language parameter remains unchanged</li>
<li>publication: this link will have all parameters above publication reset: issue, section, article, subtitle, lists, indexes etc.; the language and publication parameters remain unchanged</li>
<li>issue: this link will have all parameters above issue reset: section, article, subtitle, lists, indexes etc.; language, publication and issue parameters remain unchanged</li>
<li>section: this link will have all parameters above section reset: article, subtitle, lists, indexes etc.; language, publication, issue and section parameters remain unchanged</li>
<li>article: this link will have all parameters above article reset: article, subtitle, lists, indexes etc.; language, publication, issue, section and article parameters remain unchanged</li>
<li>template &lt;template_name&gt;: this link will set the template in the link to &lt;template_name&gt;</li>
<li>articleAttachment: displays the link for the current article attached document</li>
<li>articleComment: inserts the article comment identifier in the parameters list; if no article comment was defined in the template environment, no parameter is inserted. This attribute is needed if you want to pass on the current comment id to another page for display purposes</li>
<li>audioAttachment: displays the link for the current audio file attached to the article</li>
<li>previous_subtitle &lt;field_name&gt;: add a parameter to the URI to select the previous subtitle of the given &lt;field_name&gt; for display</li>
<li>next_subtitle &lt;field_name&gt;: add a parameter to the URI to select the next subtitle of the given &lt;field_name&gt; for display</li>
<li>all_subtitles &lt;field_name&gt;: add a parameter to the URI to select all subtitles of the given &lt;field_name&gt; for display</li>
<li>previous_items: add a parameter to the URI to select the previous interval of the current list items for display</li>
<li>next_items: add a parameter to the URI to select the next interval of the current list items for display</li>
</ul>
<h3>Constraints:</h3>
<p>None.</p>
<h3>Examples:</h3>
<p>For the canonical tag often used for SEO (search engine optimization) you should use...</p>
<ul>
<li>on article level</li>
</ul>
<pre class="prettyprint"><code>&lt;link rel=&quot;canonical&quot; href=&quot;{{ url options=&quot;article&quot; }}&quot; /&gt;</code></pre>
<ul>
<li>on section level</li>
</ul>
<pre><code>&lt;link rel=&quot;canonical&quot; href=&quot;{{ url options=&quot;section&quot; }}&quot; /&gt;</code></pre>
<ul>
<li>on front page / index level</li>
</ul>
<pre class="prettyprint"><code>&lt;link rel=&quot;canonical&quot; href=&quot;http://{{ $gimme-&gt;publication-&gt;site }}&quot; /&gt;</code></pre>
<p><span id="ch110_credits-and-license.xhtml"></span></p>
<h1>Credits and license</h1>
<p>Newscoop is being developed by an international community of developers and designers led by Sourcefabric.</p>
<p><a href="http://newscoop.sourcefabric.org/" title="Newscoop homepage">http://newscoop.sourcefabric.org</a><br />
<br />
Copyright 2011 Sourcefabric o.p.s.<br />
Copyright 1999-2010 Media Development Loan Fund.</p>
<h2>License</h2>
<p>All chapters in this manual are licensed with the GNU General Public License version 3.</p>
<p>This documentation is free documentation; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.</p>
<p>This documentation is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License along with this documentation; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
<hr />
<h3>GNU GENERAL PUBLIC LICENSE</h3>
<p>Version 3, 29 June 2007</p>
<p>Copyright 2007 Free Software Foundation, Inc. &lt;<a href="http://fsf.org/" class="uri">http://fsf.org/</a>&gt;</p>
<p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>
<h3>Preamble</h3>
<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p>
<p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.</p>
<p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p>
<p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p>
<p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p>
<p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p>
<p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p>
<p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p>
<p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p>
<p>The precise terms and conditions for copying, distribution and modification follow.</p>
<h3>TERMS AND CONDITIONS</h3>
<h4>0. Definitions.</h4>
<p>&quot;This License&quot; refers to version 3 of the GNU General Public License.</p>
<p>&quot;Copyright&quot; also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p>
<p>&quot;The Program&quot; refers to any copyrightable work licensed under this License. Each licensee is addressed as &quot;you&quot;. &quot;Licensees&quot; and &quot;recipients&quot; may be individuals or organizations.</p>
<p>To &quot;modify&quot; a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a &quot;modified version&quot; of the earlier work or a work &quot;based on&quot; the earlier work.</p>
<p>A &quot;covered work&quot; means either the unmodified Program or a work based on the Program.</p>
<p>To &quot;propagate&quot; a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p>
<p>To &quot;convey&quot; a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p>
<p>An interactive user interface displays &quot;Appropriate Legal Notices&quot; to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>
<h4>1. Source Code.</h4>
<p>The &quot;source code&quot; for a work means the preferred form of the work for making modifications to it. &quot;Object code&quot; means any non-source form of a work.</p>
<p>A &quot;Standard Interface&quot; means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p>
<p>The &quot;System Libraries&quot; of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A &quot;Major Component&quot;, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p>
<p>The &quot;Corresponding Source&quot; for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p>
<p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p>
<p>The Corresponding Source for a work in source code form is that same work.</p>
<h4>2. Basic Permissions.</h4>
<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p>
<p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p>
<p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>
<h4>3. Protecting Users' Legal Rights From Anti-Circumvention Law.</h4>
<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p>
<p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>
<h4>4. Conveying Verbatim Copies.</h4>
<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p>
<p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>
<h4>5. Conveying Modified Source Versions.</h4>
<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p>
<ul>
<li>a) The work must carry prominent notices stating that you modified it, and giving a relevant date.</li>
<li>b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to &quot;keep intact all notices&quot;.</li>
<li>c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.</li>
<li>d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.</li>
</ul>
<p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an &quot;aggregate&quot; if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>
<h4>6. Conveying Non-Source Forms.</h4>
<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p>
<ul>
<li>a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.</li>
<li>b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.</li>
<li>c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.</li>
<li>d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.</li>
<li>e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.</li>
</ul>
<p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p>
<p>A &quot;User Product&quot; is either (1) a &quot;consumer product&quot;, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, &quot;normally used&quot; refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p>
<p>&quot;Installation Information&quot; for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p>
<p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p>
<p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p>
<p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>
<h4>7. Additional Terms.</h4>
<p>&quot;Additional permissions&quot; are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p>
<p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p>
<p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p>
<ul>
<li>a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or</li>
<li>b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or</li>
<li>c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or</li>
<li>d) Limiting the use for publicity purposes of names of licensors or authors of the material; or</li>
<li>e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or</li>
<li>f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.</li>
</ul>
<p>All other non-permissive additional terms are considered &quot;further restrictions&quot; within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p>
<p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p>
<p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>
<h4>8. Termination.</h4>
<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p>
<p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p>
<p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p>
<p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>
<h4>9. Acceptance Not Required for Having Copies.</h4>
<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>
<h4>10. Automatic Licensing of Downstream Recipients.</h4>
<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p>
<p>An &quot;entity transaction&quot; is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p>
<p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>
<h4>11. Patents.</h4>
<p>A &quot;contributor&quot; is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's &quot;contributor version&quot;.</p>
<p>A contributor's &quot;essential patent claims&quot; are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, &quot;control&quot; includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p>
<p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p>
<p>In the following three paragraphs, a &quot;patent license&quot; is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To &quot;grant&quot; such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p>
<p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. &quot;Knowingly relying&quot; means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p>
<p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p>
<p>A patent license is &quot;discriminatory&quot; if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p>
<p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>
<h4>12. No Surrender of Others' Freedom.</h4>
<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>
<h4>13. Use with the GNU Affero General Public License.</h4>
<p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p>
<h4>14. Revised Versions of this License.</h4>
<p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p>
<p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License &quot;or any later version&quot; applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p>
<p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p>
<p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>
<h4>15. Disclaimer of Warranty.</h4>
<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM &quot;AS IS&quot; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>
<h4>16. Limitation of Liability.</h4>
<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>
<h4>17. Interpretation of Sections 15 and 16.</h4>
<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p>
<p>END OF TERMS AND CONDITIONS</p>
</body>
</html>
