<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <meta name="author" content="The Contributors" />
  <title>OpenMRS</title>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<header>
<h1 class="title">OpenMRS</h1>
<p class="author">The Contributors</p>
<p class="date">2011.10.18-00.00</p>
</header>
<p><span id="ch001_openmrs-around-the-world.xhtml"></span></p>
<h1>OpenMRS Around the World</h1>
<p><img src="static/map-of-sites.png" /></p>
<address>
<p>OpenMRS clinical and research locations as of 2011.</p>
</address>
<p>OpenMRS is an electronic medical record system (EMR), designed for use in the developing world and first established in 2004. Today, the system has evolved into a medical informatics platform used on every continent, supporting health care delivery and research in an extremely wide variety of contexts.</p>
<p>Our world continues to be ravaged by pandemics of epic proportions, as untold millions of people are infected with diseases such as HIV/AIDS, multi-drug resistant tuberculosis, malaria, and many others. Many of these infections occur in developing countries, where lack of education and resources contribute to scores of preventable deaths. Prevention and treatment interventions on this scale require efficient information management, which is particularly critical as clinical care must increasingly be entrusted to less skilled providers. Whether for lack of time, lack of money, or no access to software developers, most health care programs in developing countries manage their information with simple spreadsheets or small, poorly designed databases--if they have any electronic infrastructure at all. Most health care records in the developing world are still maintained on paper.</p>
<p>As a response to these challenges in developing countries, OpenMRS was created as a medical record platform--a rising tide which we hope will lift all ships. It is designed to offer a better tool for information management, but also to reduce unnecessary, duplicate efforts. In the years since its inception, the OpenMRS community has grown from a handful of organizations to a massive collaborative effort by both groups and individuals, all focused on creating medical record systems and a corresponding implementation network that allows self-reliance in system development, even in resource-constrained environments.</p>
<p>Since its beginning, OpenMRS has been based on the principles of openness and of sharing ideas, software and strategies for deployment and use. The system is designed to be usable in very resource-poor environments and can be modified with the addition of new data items, forms and reports without the need to write complicated application code. It is intended as a platform that organizations can adopt and modify, avoiding the need to develop a system from scratch.</p>
<p>And indeed, organizations around the world are doing just that. OpenMRS is now in use in clinics in Argentina, Botswana, Cambodia, Congo, Ethiopia, Gabon, Ghana, Haiti, Honduras, India, Indonesia, Kenya, Lesotho, Malawi, Malaysia, Mali, Mozambique, Nepal, Nicaragua, Nigeria, Pakistan, Peru, Philippines, Rwanda, Senegal, South Africa, Sri Lanka, Tanzania, The Gambia, Uganda, United States, Zanzibar, Zimbabwe, and many other places. This work is supported by many individuals and organizations, including international and government aid groups, NGOs, and for-profit and non-profit corporations.</p>
<p>OpenMRS is not only in use in many different places, but it is also being used to meet many different needs. In Kenya, it is used to support health care delivery for hundreds of thousands of patients at a network of over 50 clinics--some connected by typical networks, but many where the connection requires offline synchronization to external storage that can be physically transported between sites! Another NGO uses a central OpenMRS server connected to clinics in multiple countries via satellite Internet connections. In Malawi, creative individuals with a talent for technology have created a mobile cart running OpenMRS that physicians roll around their clinic, interacting with the system using a touchscreen. In Rwanda, the national ministry of health has worked to roll out a connected national health care system using OpenMRS. In the United States, OpenMRS is used to track patients at large sporting events, for mobile providers of health care to homeless people, and as a personal health record that allows cancer patients to share treatment and home health care information with caregivers and family members.</p>
<p><img src="static/openmrs-2011.png" /></p>
<address>
<p>OpenMRS in use at TRAC Plus Clinic in Kigali, Rwanda. </p>
</address>
<p>In the last several years, use of mobile technology has increased dramatically, particularly in the developing world. In some developing countries, there are more mobile phones than people! Facilitated by other open source projects, OpenMRS can be integrated with SMS messaging, allowing community health workers to add information about adherence to medication regimens to a patient's record, as they make rounds through villages in rural Africa. Elsewhere, mobile phone applications are used to guide these community volunteers in home-based HIV testing and counseling, enrolling prospective patients from the comfort of their own homes.</p>
<p>Besides clinical care, the platform can also be used in research settings. In the United States, OpenMRS has been used both in training medical informatics students, as well as in conducting various research projects in the fields of public health. In Peru OpenMRS is used as the research database for a large study of drug resistant tuberculosis funded by the US National Institutes of Health. Because the system has been designed as an extensible platform, it is very easy for researchers to adapt OpenMRS to do what they need.</p>
<p><span id="ch002_a-brief-history.xhtml"></span></p>
<h1>A Brief History</h1>
<p><img src="static/AMPATH-2004.png" /></p>
<address>
<p>One of OpenMRS's birthplaces--Moi University Teaching and Referral Hospital, Eldoret, Kenya (2004)</p>
</address>
<p>Throughout the 1990s, an academic partnership flourished between Indiana University School of Medicine in the United States and Moi University in Eldoret, Kenya, providing Kenyan medical students with access to health care training. This program continued to grow for several years until a severe outbreak of HIV/AIDS in Western Kenya caused the program to rethink its goals, at which point the Academic Model for Prevention and Treatment of HIV/AIDS (AMPATH) was created. The number of patients in Kenya continued to grow, and basic IT systems including Microsoft Access were used to monitor patient care.</p>
<p>In February 2004, the amount of data had become too large for AMPATH's existing systems, so their medical director invited Burke Mamlin, from the Regenstrief Institute in Indianapolis, United States, to visit the site and evaluate how improvements in medical informatics technology could improve AMPATH's data management. Regenstrief had long been recognized as a leader in medical informatics research, and Burke brought his colleague Paul Biondich along with him on the visit to Kenya. It quickly became apparent that a new system was needed. Paul and Burke began to design the data model for a new medical record system for AMPATH, which would go on to become OpenMRS.</p>
<p>At the same time, a Boston-based non-profit named Partners In Health (PIH) was pioneering the use of web-based EMRs in developing countries. They had built the PIH-EMR, which they were using to support the treatment of multi-drug resistent tuberculosis in Peru, and HIV in Haiti. But Hamish Fraser, PIH's director of the EMR project, was worried: PIH was about to expand into Rwanda, Lesotho, and Malawi, and he feared it would be difficult to maintain their home-built system in 5 countries.</p>
<p>In September 2004, Paul and Burke met Hamish at the World Congress on Medical and Health Informatics (MedInfo) conference in San Francisco. It became apparent that the three shared similar goals and needs, so they agreed to work collaboratively to develop a system that would be suitable for the various needs of humanitarian work in African nations and beyond.</p>
<p>Paul and Burke hired developer Ben Wolfe to begin work on programming an early prototype of OpenMRS, based on their previous work at AMPATH and Regenstrief. Several months later, PIH's lead developer Darius Jazayeri joined the project, merging PIH-EMR's functionality into the new system. The previous systems at AMPATH focused on data entry, while at PIH, the focus was more on clinical workflow. The new system combined features of both the AMPATH and PIH systems.</p>
<p>Because of the strong cooperation between PIH and Regenstrief and the long distances involved, it became clear that an open source software model of development was the best way to sustain and grow the platform, and the OpenMRS project was born.</p>
<p>While the collaboration between Regenstrief and PIH continued and the new system was being designed, the groups were looking for additional support in Africa. They turned to their colleague Chris Seebregts, from the South African Medical Research Council (MRC). Chris was already heavily involved in the field of medical informatics throughout sub-Saharan Africa, and brought with him a wealth of knowledge about the needs of informatics implementations. Seebregts had been adapting OpenMRS for use in South Africa and started to build up a community of implementers of the software around the world. His work led to massive growth of the OpenMRS community (now nearly 2,000 strong as of late 2011). In February 2006, AMPATH launched OpenMRS in Kenya, and PIH brought it to Rwinkwavu, Rwanda, in August of the same year. The South African MRC first switched on the system at Richmond Hospital in KwaZulu-Natal at the end of 2006.</p>
<p>As both the OpenMRS application and open source community grew, they gathered the attention of many other large projects and agencies. Some of these have extended both financial and consulting support over the past several years, including:</p>
<ul>
<li>The United States Center for Disease Control (CDC)</li>
<li>Canada's International Development Research Centre (IDRC)</li>
<li>National Institutes of Health Fogarty International Centre</li>
<li>The Millennium Villages Project of the Earth Institute, Columbia University</li>
<li>The Rockefeller Foundation</li>
<li>World Health Organization</li>
</ul>
<p>In an effort to broaden participation in the project around the world, OpenMRS began participating in the Google Summer of Code (GSoC) program in 2007. GSoC provides university students who wish to participate in open source development projects with a stipend and a close mentoring relationship with an experienced project team member. Participation in the program has continued since then--OpenMRS is now one of the larger open source projects in the program, boasting a large class of alumni, a number of whom continue to contribute to the project. Many of these alumni come from the developing world, and some have gone on to successful software development careers.</p>
<p><img src="static/implmenters-early.png" /></p>
<address>
<p>Any early gathering of OpenMRS implementers and developers in Cape Town, South Africa.</p>
</address>
<p>One of the aims of the OpenMRS community is to help build local capacity in the places where it is used. To that end, participants in the community are encouraged to develop programs and processes that encourage entrepreneurship and the creation of partnerships to grow the field of medical informatics, particularly in the developing world. For example, in Kigali, Rwanda, Partners In Health jump-started a local training program known as E-Health Software Development and Implementation (EHSDI). This 9-month course conducted in partnership with the Rwanda Development Board and the Kigali Institute of Science and Technology (KIST) was designed to teach students to develop medical information systems. It includes extensive training in using the OpenMRS platform.</p>
<p>The number of individual and organizational volunteers who participate in the OpenMRS community has continued to grow, tripling in size between 2010 and 2011. These individuals participate in various ways, from documentation and bug reports, from training and providing support to other community members. The release of OpenMRS 1.8 was made possible by the assistance of over 50 contributors.</p>
<p>Further, collaborations with other open source software organizations such as Open Data Kit and Pentaho have produced volunteer contributions to OpenMRS, and commercial consulting organizations such as ThoughtWorks Inc. have contributed many hours to developing and improving OpenMRS.</p>
<p>At the close of 2011, the OpenMRS community is preparing to launch an independent not-for-profit organization to help support the project's needs as it grows. The goal of this organization will be to provide technical infrastructure and community management, to assist collaboration and cooperation of project volunteers throughout the world, and to provide training and support to those who seek to implement OpenMRS as a key part of a medical informatics strategy in clinics, hospitals, and government health organizations.</p>
<p>From its humble beginnings as a solution to a problem in a small African town, OpenMRS has become the largest open source health care project on the planet. Between 2006 and 2011, OpenMRS at AMPATH in Kenya has recorded over 111,000,000 points of data for over 180,000 patients, helping to save many thousands of lives. Every day, similar stories are retold somewhere else around the world with the assistance of thousands of volunteers. The OpenMRS community continues to grow, and we are excited that you're interesting in joining us. Regardless of your background or interests, there is a way for you to both contribute and gain from the work of others in the OpenMRS community.</p>
<p><span id="ch003_example-amani-clinic.xhtml"></span></p>
<h1>Example: Amani Clinic</h1>
<p><img src="static/case-study.png" width="150" height="150" />We assume if you're reading this book that you're interested in deploying OpenMRS to support clinical care in the real world. To bridge the divide between theory and practice, and to illustrate the sometimes challenging process of deploying a large health-care information system, we have used the example of the fictional Amani Clinic as a case study throughout this book.</p>
<p>Every time you see this image in the book, you will learn how Amani Clinic used the information discussed to plan and implement OpenMRS.</p>
<p>While a single example could never possibly capture all the complexity of the many different contexts in which OpenMRS might be used, we hope it will serve as inspiration to think about how your environment may be similar or different. We also hope that as you read, you will start to consider the questions you need to ask to begin to design and implement your own installation of OpenMRS.</p>
<h2>About the Amani Clinic</h2>
<p><img src="static/clinic.png" /></p>
<address>
<p>Our fictional case study, Amani Clinic in Kisiizi, Uganda.</p>
</address>
<p>Kisiizi is a small town in Southwest Uganda, over 40 kilometers from the nearest large city. Much of the fame of Kisiizi is based on its hydroelectric power generating station and its relatively large hospital, which handles most of the health care for the region.</p>
<p>Just over 2 years ago, a European-based NGO provided funding to help launch a new health care facility we'll call &quot;Amani Clinic&quot; in the town. This clinic was opened specifically to address the need for maternal and child health (MCH) care in Kisiizi and the surrounding areas.</p>
<p>Since its opening, the clinic has been very successful in establishing itself, and has attracted a full staff of doctors, nurses, and assistants. New patients, both pregnant women and new mothers, are continually being registered in the clinic, but there is very little information available about the efficacy of the work in the clinic, or the outcomes for its patients. Therefore, the funding agency has requested that the clinic work to implement an information system, to help better monitor and evaluate the health care outcomes of the patients over time, and to help the clinic scale up to see more patients more efficiently. The agency recommended that the clinic consider using OpenMRS, which had been successfully used by other projects funded by that agency in other countries.</p>
<p>The funding model provided for some information and communication technology (ICT) infrastructure to get the project started, as well as for some staffing support. However, deciding how to allocate this money was left up to the clinic's local management. After receiving the grant funding, the director of the site hired Claudine, a graduate of a medical informatics training program in neighboring Rwanda to help lead the effort. This newly-hired informatics manager, in turn, hired Daniel, recent university graduate from Kampala with expertise in ICT infrastructure and system administration.</p>
<p>Since the clinic was opened, doctors and nurses have used paper forms to collect data about their patients. These forms are stored in folders and kept in a locked file room until a patient's appointment. When the patients arrive, they are given their folder to carry with them as they talk with the various health care providers they will see during their visit. Each of these providers completes the relevant paper forms to add information about the visit. The forms are added to the patient's folder, which is returned at the end of their visit.</p>
<p>Clinical staff were concerned when they heard about the upcoming deployment of OpenMRC, because of the possibility of changes to the way they are used to working. However, the informatics manager has assured them that they can continue to use the familiar paper forms. When a patient arrives at the clinic, they will be registered by a patient registration clerk. After the patient's visit is complete, a data entry clerk will enter the information from that visit into OpenMRS.</p>
<p>Many people in Kisiizi have basic ICT skills, and there is a local Internet cafe, supported by an NGO that provides basic ICT training to local residents. Two recent students have been hired as the first patient registration and data entry clerks for the clinic.</p>
<p>Meanwhile, the system administrator has finished his preparation work and has deployed a basic local area network (LAN) to connect a server that will host the OpenMRS application to PCs in the file room, in the clinic manager's office, and in the ICT room. The LAN is connected to the Internet, although the connection isn't very fast and often goes offline. The server is powered by an uninterruptible power supply (UPS), that will ensure it stays running despite any fluctuations in the local power grid!</p>
<p>Through the rest of this book, you will follow the progress of the people at the Amani Clinic as they install OpenMRS, customize it to fit the needs of their clinic, and use OpenMRS from day to day, first to enter data and then to extract it for patient visits and for reporting to their funding agency on an ongoing basis.</p>
<p><span id="ch005_is-openmrs-for-you.xhtml"></span></p>
<h1>Is OpenMRS for You?</h1>
<p><img src="static/foryou.png" /></p>
<address>
<p>A clinician compares her paper records with OpenMRS in Rwanda.</p>
</address>
<p>This chapter will help you to decide whether OpenMRS is the right clinical application for your organisation.</p>
<p>Why have an electronic medical record (EMR) system? First, you need to clearly identify your reasons for adopting a computerized medical record system. Without a clear need or anticipated benefit, sustained use will be difficult. Many adopters use OpenMRS to gather information about direct patient care for analysis and outcome improvement. It can also reduce the effort of reporting to 3rd parties. Supporting clinicians during the process of direct patient care is also possible--but this requires further customization.</p>
<h2>Where OpenMRS fits best</h2>
<p>OpenMRS is a patient-centric application, meaning data is captured about interactions between a health care provider and a patient. Your main information needs should also focus on direct patient care provided. If you primarily intend to capture data about something other than the patient (for example, about lab specimens), you should consider other alternatives.</p>
<p>OpenMRS is designed to manage patient data <em>longitudinally</em>, linking multiple interactions over time into a single patient chart. Having this complete patient history available empowers clinicians to make more informed decisions about care, while also enabling a deeper analysis of patient health in order to draw more meaningful conclusions on improving outcomes. If you only care about individual patient visits, and not about linking those together into a longitudinal chart, then OpenMRS may not be the right tool for you.</p>
<h2>Technical capacity required to manage OpenMRS</h2>
<p>OpenMRS requires a fairly sophisticated team of implementers to install and run. (See the chapter &quot;Transitioning to OpenMRS&quot;.) At minimum, you will need ongoing resources with knowledge and skills in three areas:</p>
<ol>
<li><strong>Medical information management</strong>, to ensure data is captured properly and in a way that will support meaningful use in the future.</li>
<li><strong>System administration</strong>, for installation and maintenance of the OpenMRS server, local area network, backups, and local ICT infrastructure.</li>
<li>In addition, for further customization to meet specific clinic needs, some <strong>software development</strong> skills may occasionally be required.</li>
</ol>
<p>Of these three areas of capacity, it is most important that the system administrator be at the clinic or a contractor in close proximity to the clinic. The other areas can more easily be made up of external team members that support the clinic during strategic cycles of system improvement.</p>
<h2>Other ways to find out if OpenMRS is for you</h2>
<p>OpenMRS is powerful software and has the potential to help your organisation reach its goals, but it may not be the right choice for every organisation. Here are some ways that you can find out whether OpenMRS is right for your organisation:</p>
<ul>
<li>Read this book!</li>
<li>Play with a demonstration site.</li>
<li>Download and explore the OpenMRS Standalone.</li>
<li>Talk to others who use OpenMRS.</li>
<li>Talk to an OpenMRS consultant.</li>
</ul>
<h3>Demonstration sites</h3>
<p>OpenMRS hosts a demo site at <a href="http://openmrs.org/demo/" class="uri" title="http://openmrs.org/demo/">http://openmrs.org/demo/</a> which runs a very basic version of the latest released version. However, it has not been configured in a way to support a typical deployment. Specifically, it lacks medical information management content--it lacks good forms for data entry and does not have any reports configured for interpreting and extracting information.</p>
<h3>OpenMRS Standalone</h3>
<p>If you have technical skills or are feeling adventurous, you can download and set up a local version of OpenMRS, that is a version that is stored on your local computer rather than on a server on the internet. You'll still access it through a browser, but it will only be visible on your computer. The advantage of a test installation is that you can configure OpenMRS in the way that you want to use it, and experiment with your data. See the chapter &quot;Installation and Initial Setup&quot;.</p>
<h3>Talking to others who use OpenMRS</h3>
<p>If you know of another organisation that uses OpenMRS, talk to them about their experience. The more similar they are to your organisation, the more useful their experiences will be. In any case, you will gain valuable insight from their knowledge.</p>
<p>If you don't know anyone that is using OpenMRS, consider joining the weekly OpenMRS Implementers Forum. The session regularly includes presentations and demonstrations from a range of international users. For more information about the meeting, see the OpenMRS Wiki: <a href="http://go.openmrs.org/book-impforum" class="uri">http://go.openmrs.org/book-impforum</a></p>
<h3>Talking to OpenMRS consultants</h3>
<p>There is no official list of OpenMRS-endorsed companies that provide professional services for the platform. However, a quick email to the OpenMRS Implementers or Developers mailing lists requesting professional support should result in a prompt reply and recommendation. See: <a href="http://go.openmrs.org/book-mailinglists" class="uri">http://go.openmrs.org/book-mailinglists</a></p>
<h2>Amani Clinic evaluates OpenMRS</h2>
<p><img src="static/case-study.png" />At the Amani Clinic, the newly-hired medical informatics manager was already familiar with OpenMRS. However, because he was new to the clinic and to the field of maternal health, he started research other organizations that were using OpenMRS for maternal and child health care clinics. After joining one of the weekly Implementers Forum meetings, he learned of a group in Nigeria doing exactly that, and had several follow-up conversations with them. They agreed to collaborate on projects as much as possible once Amani had OpenMRS up and running.</p>
<p><span id="ch006_identifying-your-needs.xhtml"></span></p>
<h1>Identifying Your Needs</h1>
<p><img src="static/needs.png" /></p>
<address>
<p>Discussing requirements and needs at TRAC Plus clinic in Kigali.</p>
</address>
<p>This chapter covers some basic strategies for identifying your organizational needs, and how OpenMRS might help. It does not go into detail about what OpenMRS does or how it stores data -- you will find that in other chapters. Instead, we encourage you to first take a step back and think about your organization.</p>
<h2>Your organizational goals and practices</h2>
<p>For now, forget about technology and instead think about your organizational goals and processes. Here's a list of questions to start:</p>
<ul>
<li>What are the high level goals of your organization?</li>
<li>What are the teams and staff in the clinic? What roles exists? What functions does each role perform?</li>
<li>What tasks are staff involved with on a day to day basis?</li>
<li>What services does the clinic provide to your patients? What activities are involved?</li>
<li>What other 3rd-party or government organizations do you report to? What information is included in each of these reports?</li>
</ul>
<p>Answering these questions will probably help you think of more related questions. Make sure you consider them thoroughly.</p>
<h2>Take advantage of institutional knowledge</h2>
<p>As you think about your patients and how they interact with your organization, talk to your clinical and administrative staff--both those who have been around a long time, and those who have just joined. Talk to as many people as you possibly can to get a complete picture of every service provided to patients.</p>
<p>People generally want to be positive in describing their work places, so you may need to ask some people multiple times. Get physical or electronic copies, or pictures of all paper forms if possible. Figure out where (e.g., specific rooms and desks) data is recorded onto paper and by whom. Write an overview of current practices and define specific shortcomings that could be addressed by using an electronic medical records system.</p>
<p>Note that practices may vary seasonally, for example if the hospital is much busier due to increased malaria during rainy season or malnutrition before harvest.</p>
<h2>Map your needs to OpenMRS</h2>
<p>OpenMRS has been designed to be flexible and adaptable, based on input from many different partners, but it may not be an exact fit for the ways that your organization currently works. Doing things the &quot;OpenMRS way&quot; could mean adapting your workflow and adopting best practices in medical informatics. Be pragmatic and flexible, and think about whether your current working practices might need to change.</p>
<p>Remember that OpenMRS offers many opportunities to capture and analyze information in new ways not previously possible. Taking advantage of these new possibilities might possibly lead to positive changes and improvements for your organization.</p>
<h2>Do not &quot;reinvent the wheel&quot;</h2>
<p>The open source ethos of OpenMRS extends beyond just the application, to a much larger open community where ideas and experiences are shared. There are many existing resources available in the form of pre-built OpenMRS features (modules) and content that a new implementer should take advantage of. You should explore the following resources before building anything new.</p>
<h3>Reuse an existing concept dictionary</h3>
<p>A well-constructed, mature concept dictionary (see the &quot;OpenMRS Information Model&quot; chapter) is a strong foundation for any OpenMRS Implementation.</p>
<p>The Millenium Villages Project (MVP) maintains a well-curated concept dictionary. If this dictionary is applicable to your domain of care, you should strongly consider using it. The best way to learn about this dictionary is through a partner project, the Maternal Concept Lab.</p>
<p><a href="http://go.openmrs.org/book-mcl" class="uri">http://go.openmrs.org/book-mcl</a></p>
<p>Other OpenMRS implementers can also help advise you about other concept references for your domain. Read the &quot;Getting Help from the OpenMRS Community&quot; chapter for more information.</p>
<h3>Adapt existing forms</h3>
<p>Implementers should evaluate data collection forms built by other OpenMRS users before creating new custom forms for their specific needs.</p>
<p>Implementers across the OpenMRS community have invested a lot of resources in ensuring that their forms reflect clinical best practices, international standards, and current research. These forms have already been optimized for electronic data entry. Many OpenMRS partners develop forms using medical informatics experts that may not be available to all projects. Finally, creating forms is time consuming--those resources could be redirected to other efforts.</p>
<p>The OpenMRS Form Bank is a new community-driven project which is beginning to collect existing forms from other users. Visit <a href="http://go.openmrs.org/book-formbank" class="uri">http://go.openmrs.org/book-formbank</a> for details, or contact other implementers for help. Read the &quot;Getting Help from the OpenMRS Community&quot; chapter for more information.</p>
<h3>Explore the module repository</h3>
<p>Implementers should consult the OpenMRS Module Repository at <a href="http://modules.openmrs.org">http://modules.openmrs.org/</a> before considering customization through software development.</p>
<p>There is a good chance that someone has created a module to address needs you may have. Read the &quot;Customizing OpenMRS with Plug-in Modules&quot; chapter for a list of recommended modules.</p>
<h2>Amani discovers their specific needs</h2>
<p><img src="static/case-study.png" />Once the clinic determined they would indeed use OpenMRS, they began thinking specifically about how they would integrate their existing processes into the workflow supported by the software. As the newly-hired medical informatics manager, Claudine knew she should speak with everyone working in the clinic and watch them during a typical day to understand how they work. When she spoke to them, she assured them that OpenMRS would help to make their work easier, and they would still be using the same overall processes they were familiar with.</p>
<p>Claudine found many resources within the OpenMRS community, including pre-existing concept dictionaries and forms that had been used in other clinics. She was able to take these artifacts and adapt them to Amani's paper forms that were already in use. Starting out with the work of others saved quite a bit of time.</p>
<p><span id="ch007_transitioning-to-openmrs.xhtml"></span></p>
<h1>Transitioning to OpenMRS</h1>
<p><img src="static/transitioning.png" /></p>
<address>
<p>A paper-based patient register book at an African OpenMRS clinic.</p>
</address>
<p>This chapter outlines steps that typically make up a OpenMRS project, and should be read by people about to embark on a OpenMRS project. Some of this information may be obvious to experienced project managers. A comprehensive guide to project management is beyond the scope of this book, but we have included some high-level process considerations to get you started thinking about what needs to happen.</p>
<p>We recommend you try to build a structured implementation process. It's important to plan carefully--the decisions you make during this process require substantial investments of resources, and you will be living with your choice for the foreseeable future.</p>
<p>When you start out on a new OpenMRS project, you should spend time thinking about (at minimum):</p>
<ul>
<li>Which people will be involved in the project</li>
<li>Business goals of using OpenMRS</li>
<li>How you will approach the initial configuration</li>
<li>What ongoing support you will need</li>
<li>Costs associated with ICT infrastructure</li>
<li>Training and documentation</li>
<li>Change management</li>
</ul>
<h2>People and the project team</h2>
<p>Your project implementation team should include clinic staff:</p>
<ol>
<li><strong>Management</strong> are aware of funding obligations and 3rd party reporting requirements.</li>
<li><strong>Health care providers</strong> are focused on improving patient care.</li>
<li><strong>Administrative staff</strong> are specialists of workflow issues and clinic processes.</li>
</ol>
<p>The team could also include the following people that may or may not be from the clinic:</p>
<ol>
<li>A <strong>system administrator</strong> is in charge of installing and maintaining OpenMRS inside of the clinic's ICT infrastructure.</li>
<li><strong>Medical informatics expert(s)</strong> create clinical documentation and ensure that data is managed properly in the system. Develop reports.</li>
<li>(Optional) A <strong>project manager or coordinator</strong>. For larger implementations, this person works to hold people accountable to finishing their work in a timely manner, and ensures the project is on track.</li>
<li>(Optional) <strong>Software developers</strong> may be needed for locations that decide to customize the system.</li>
</ol>
<p>It's very important to include clinical staff (for example nurses, data entry clerks, and others) in your implementation team from the earliest phases of the project so that the resulting deployment is ultimately useful for them and easy for them to use.</p>
<p>Managing an OpenMRS project will require a major time investment from people within your organization, even if you employ an external consultant. Organizations often under-estimate the amount of time that will be required from their staff in implementing an enterprise ICT project. This time investment includes items such as training, modifying existing processes, and providing new or updated information to relevant people. Deploying OpenMRS is no different. It's not something that can be added to the end of an already busy schedule--we urge you to keep this in mind and take it into consideration when planning.</p>
<h2>Goals</h2>
<p>By this point in the project, you should have a good idea of what indicates a successful OpenMRS implementation for your clinic. This could be something like reduction of time to prepare month-end reports by 50%, or increase antiretroviral treatment (ART) in HIV-infected pregnant women by 25%. Your goals should be specific, measurable, attainable, relevant, timely--or SMART.</p>
<p>These goals will help you in directing and managing your project. For example, if the project group wants some customization that requires budget and effort, your overall goals will help you decide whether or not to consider that customization. Your goals will help you to focus on why you are implementing OpenMRS and what you want to achieve in the long run.</p>
<h2>Incremental adoption</h2>
<p>It often makes sense to divide the implementation process into smaller, more manageable sections, which can be implemented in discrete stages or iterations. Implementing in stages allows people to get used to changes gradually without feeling overwhelmed, and allows your implementation team to be responsive to feedback from users during the process.</p>
<p>Another reason people choose to develop iteratively is that it is very hard for users to correctly or fully explain their requirements at the beginning of the project. Giving people hands-on experience of an early version of the system helps them understand how it works and what might be possible. They can then provide you with valuable feedback, and they might articulate requirements that they not previously identified.</p>
<p><img src="static/case-study.png" />The Amani Clinic chose to introduce change iteratively. First they started using the system for patient registration. This affected only the administrative staff without impacting the clinical staff. Later they started doing retrospective data entry, which included paper forms for clinicians that had minor changes, as well as training a new data entry clerk.</p>
<h3>Pilot projects</h3>
<p>Larger multi-site implementations may wish to develop a pilot approach to help reduce risk. In this scenario, you would only deploy OpenMRS at one site and learn about the process in a more controlled way. You can then incorporate what you've learned into a coordinated implementation process for other sites.</p>
<h2>Ongoing support and development</h2>
<p>It is a mistake to think about an OpenMRS project as a one-off installation that will meet the needs of your organization for the foreseeable future. Organizations are always changing and evolving. Your medical record system should evolve with you, otherwise it will eventually become out-of-sync with the organization.</p>
<p>Once you have been using OpenMRS for a while and staff are comfortable with it, you will likely want to take advantage of additional functionality. Each improvement or new piece of functionality that you decide to implement in OpenMRS will take resources, so you'll want to plan ahead for these.</p>
<p>Even if your organizational needs don't change, you need to plan for ongoing support of OpenMRS, including:</p>
<ul>
<li>Keeping your system up-to-date with security patches</li>
<li>Upgrading to the latest version of OpenMRS (not always necessary, but OpenMRS is improving all the time and your users will thank you for the improved usability and functionality each time you upgrade)</li>
<li>Upgrading the modules you use to fix bugs and improve features</li>
<li>Maintenance of your server and network infrastructure</li>
</ul>
<p>For more information, see the &quot;Maintenance&quot; chapter.</p>
<h2>Training</h2>
<p>Training is also an important part of any OpenMRS implementation project. Your training could take many forms depending on the needs of your users, but it often makes sense to spend resources (e.g., time and money) on formal and reusable training resources such as user guides, lesson plans, and other materials.</p>
<p>Trying to cover everything in one training session probably won't be effective. People will want and need time to digest the new ideas they learn and use them in their daily work, and you must anticipate staff turnover. Instead, consider holding smaller training sessions that introduce concepts and specific functionality, followed by periods of testing, piloting and feedback. Customize your training for your audience--not everyone needs to sit through a two-hour training session on data entry if only a single person is responsible for this role. When possible, train people to become trainers. This increases peoples' sense of ownership in your OpenMRS implementation, and helps people to better remember what they learn.</p>
<p>Training is an ongoing process. New employees will need to be trained when they start, and people familiar with the system can benefit from learning about more advanced topics. Sometimes, people will need further training when there are significant upgrades or new functionality is added to OpenMRS or a module you use.</p>
<h2>Change management</h2>
<p>Introducing an electronic medical record system will cause changes in workflow and processes at your organization. These changes may be &quot;political&quot; and cause challenges in your organization, or they may be more practical and technical changes. Either way, too much change at the same time is often difficult and stressful.</p>
<p>To help, give people time to accept and support each change so that they share in ownership of the new system, rather than feeling as if something has been forced on them. Focus on simple tasks at the beginning of deployment and introduce more difficult tasks as people start to better understanding OpenMRS. Show staff how the new system will make their work easier and where their feedback has been incorporated.</p>
<p>Good planning can minimize the risks around change, but it is important to be flexible within your plan. Unforeseen things often occur, and a plan that is too rigid could prevent you from reaching the best solution.</p>
<p><span id="ch009_installation-and-initial-setup.xhtml"></span></p>
<h1>Installation and Initial Setup</h1>
<p><img src="static/installing.png" /></p>
<address>
<p>An OpenMRS server in Uganda.</p>
</address>
<p>You can download OpenMRS from the OpenMRS web site.</p>
<p><a href="http://openmrs.org/download/" class="uri">http://openmrs.org/download/</a></p>
<p>There are two ways to install OpenMRS: Standalone, and Enterprise. You must have Java 6 or higher installed on your system to run OpenMRS.</p>
<p>OpenMRS Standalone provides a simplified installation option with an embedded database and web server. It is a great way to evaluate and explore OpenMRS, letting you get a local version up and running within minutes, and includes download options with sample data. OpenMRS Standalone should run fine for smaller installations (fewer than 10,000 patient records), but if you are setting up a larger installation, we recommend using the Enterprise installation. If you are not sure which makes sense, you can start with a standalone installation and migrate your data to the enterprise version later.</p>
<p>OpenMRS Enterprise is appropriate for larger installations. If you already have a Java servlet container and a database installed, and you want to set up OpenMRS to use these resources, you should also use OpenMRS Enterprise.</p>
<h2>OpenMRS Standalone</h2>
<p>To install the standalone version, download the ZIP file and decompress it, then double-click the openmrs-standalone.jar file to run it. The first time you run this file, it will install OpenMRS and open your browser to the new OpenMRS instance.</p>
<p><strong>Do not delete or rename any files or folders</strong> after decompressing the ZIP file. These files and folders are required by the standalone installer.</p>
<p>Alternatively, from the command line, you can navigate to the decompressed folder and run the following command:</p>
<pre><code>java -jar standalone-1.1.jar</code></pre>
<p>On Linux, you can also double-click on the file named <strong>run-on-linux.sh</strong>. If you are prompted for how to run it, just select <strong>run</strong>. Alternatively, you can use a command line shell to navigate to the decompressed folder and run the following command:</p>
<pre><code>./run-on-linux.sh</code></pre>
<h3>Upgrading Standalone</h3>
<p>To upgrade a copy of OpenMRS Standalone, do the following:</p>
<ol>
<li>Stop the previous version of OpenMRS Standalone and exit the application.</li>
<li>Download and extract the most recent version of OpenMRS Standalone.</li>
<li>Copy your <strong>database</strong> directory from the previous version to this new OpenMRS directory.</li>
<li>Copy your <strong>openmrs-standalone-runtime.properties</strong> from the previous version to this new OpenMRS directory.</li>
<li>Install OpenMRS Standalone as described above. The new version of OpenMRS will run with your old data.</li>
</ol>
<h3>Logging in</h3>
<p>By default, the initial username and password are as follows:</p>
<ul>
<li>Username: admin</li>
<li>Password: Admin123</li>
</ul>
<p>You must immediately change the admin password after installation for security purposes. To change your password, click <strong>My Profile</strong> in the upper right of OpenMRS, and choose the <strong>Change Login Info</strong> tab. Update your password, then click <strong>Save Options</strong>. You can also change your username, and provide your real name, on this screen.</p>
<h3>Stopping and Restarting</h3>
<p>As long as OpenMRS is running, you can return to the application by opening the following URL in your browser.</p>
<pre><code>http://localhost:8081/openmrs-standalone/</code></pre>
<p>Before you change certain preferences, such as the port on which MySQL or Tomcat runs, you must stop the application.</p>
<p>To stop the application, use the <strong>Stop</strong> button in the user interface, or choose <strong>File &gt; Quit</strong>. Alternatively, run the JAR file on the command line with a <strong>-stop</strong> parameter.</p>
<p>You can restart the GUI by clicking <strong>Start</strong>, or double-clicking on the JAR file again. Alternatively, you can run the JAR file with a <strong>-start</strong> parameter.</p>
<p>By default, OpenMRS runs the MySQL database on port 3316, and the Tomcat server on port 8081. To use a different port, stop the application, then change the port number in the <strong>openmrs-standalone-runtime.properties</strong> file or in the GUI, and restart. To override the port from the command line, run the JAR file with a <strong>-tomcatport</strong> or <strong>-mysqlport</strong> parameter.</p>
<p>Changing the port number will change the URL used to access the application. To access the application, you can choose <strong>File &gt;</strong> <strong>Launch Browser</strong>, or run the JAR file with a <strong>-browser</strong> parameter.</p>
<h2>OpenMRS Enterprise</h2>
<p>You must have Apache Tomcat and MySQL installed on your system before installing the enterprise version of OpenMRS.</p>
<p>Download the Enterprise WAR package from</p>
<p><a href="http://openmrs.org/download/" class="uri">http://openmrs.org/download/</a></p>
<p>Navigate to the Tomcat Web Application Manager and enter your Tomcat administrator credentials.</p>
<pre><code>http://localhost:8080/manager/html</code></pre>
<p>Browse to the location of the <strong>openmrs.war</strong> package, and deploy it.</p>
<p>The initial setup which follows may take some time. At the end of the process, the Web Application Manager will refresh, and <strong>/openmrs</strong> should be displayed in the list of applications. Tomcat should also start the application (Running = True).</p>
<p>Open the OpenMRS web application to complete the initial setup process.</p>
<pre><code>http://localhost:8080/openmrs</code></pre>
<h3>Getting Started with OpenMRS Enterprise</h3>
<p>The first time you run OpenMRS, the setup wizard will help you configure your installation. Follow the instructions in this wizard to set up your database, and populate it with test data if necessary.</p>
<p>To change your configuration later, stop the application, edit the file <strong>openmrs-runtime.properties</strong>, and restart the application. On Windows, you can probably find this file in this location:</p>
<p><strong>C:\Documents and Settings\YOURUSERNAME\Application Data\OpenMRS</strong><br />
or<br />
<strong>C:\Windows\system32\config\systemprofile\Application Data\OpenMRS</strong></p>
<p>On Mac OS X or Linux systems, it is probably located in this location:<br />
<strong>~/.OpenMRS</strong><br />
or<br />
<strong>/usr/share/tomcatX/.OpenMRS</strong></p>
<p>After you have finished configuring OpenMRS, reload the application in the Web Application Manager. Open the login page, typically at this URL.</p>
<pre><code>http://localhost:8080/openmrs</code></pre>
<p>If Tomcat is installed on another server or another port, replace <strong>localhost</strong> or <strong>8080</strong> as applicable.</p>
<p>Use the administrator username and password you specified in the configuration wizard to log in. If you did not specify a username and password, try using the default username <strong>admin</strong> and password <strong>Admin123</strong>.</p>
<h3>Upgrading OpenMRS Enterprise</h3>
<p>To upgrade a copy of OpenMRS Enterprise, do the following: </p>
<ol>
<li>Use the Tomcat Web Application Manager to stop the previous version of OpenMRS.</li>
<li>Download the most recent version of OpenMRS Enterprise.</li>
<li>Install OpenMRS as described above. The new version of OpenMRS will run with your old data.</li>
</ol>
<h2>Amani chooses the Enterprise version</h2>
<p><img src="static/case-study.png" />Although Amani Clinic is small, they decided to install the Enterprise version. Claudine is very familiar with Apache Tomcat and MySQL, and decided he would like more control over the system. She installed Ubuntu Linux on the physical server, then installed Java 6, MySQL, and Tomcat. After doing so, she downloaded the <strong>openmrs.war</strong> file and installed it in the Tomcat application server. Excluding download time for the software, she was able to complete the process in less than one hour.</p>
<p><span id="ch010_openmrs-information-model.xhtml"></span></p>
<h1>OpenMRS Information Model</h1>
<p><img src="static/infomodel.png" /></p>
<address>
<p>Reference books line a shelf in a rural African clinic.</p>
</address>
<p>This chapter explains terms and concepts which are useful to understand as you install and use OpenMRS.</p>
<h2>Data</h2>
<p>The actual information you want to record in OpenMRS is called <strong>Data</strong>. Examples of Data in OpenMRS are Patients, Encounters, and Observations. To support this data, and describe its meaning, you need additional <strong>Metadata</strong>.</p>
<p>When a user deletes a piece of data in OpenMRS, the information actually remains in the database. It is marked as <strong>voided</strong>, so that it will not show up in the interface, but it is not immediately deleted from the database. If a user deletes a piece of data by accident, an administrator can <strong>unvoid</strong> it to return it to the system. To permanently delete data from the database, an administrator must <strong>purge </strong>that data. Typically, this should never be done in a production system.</p>
<h2>Metadata</h2>
<p>The fundamental expectation of OpenMRS's design is that you will customize it for your clinical program's use case. The system has no built-in idea of the patient's weight or seeing the patient in an outpatient visit. Instead, you can configure these things yourself, to match your project's workflow. Generally speaking, the things that you need to configure in order to describe the real patient information you will be capturing are referred to as <strong>Metadata</strong>. An example of a piece of metadata is a Location that represents a hospital.</p>
<p>An administrator may also <strong>retire</strong> metadata in OpenMRS. This does not mean that the metadata is deleted, but rather that it is not intended to be used going forwards. Old information that refers to the retired metadata remains valid. An administrator may <strong>unretire</strong> metadata if it becomes relevant to active use again. If no actual data refers to a piece of metadata, an administrator may <strong>purge</strong> the metadata to permanently remove it from the database.</p>
<p>For example, the hospital you refer patients to closes. Therefore, you can no longer refer patients there. This Location can now be retired in OpenMRS. This would not invalidate the fact that many patients were referred there in the past.</p>
<h2>Concepts and Concept Dictionary</h2>
<p>The most important part of the system's metadata is the <strong>Concept Dictionary</strong>, which is a list of all the medical and program-related terms that you will use as questions and answers in Observations. This dictionary does not need to be complete when you begin using OpenMRS. You should expect new terms to be added and old terms to be retired as your use of the system evolves. It is better to start with a pre-populated Concept Dictionary, rather than starting from scratch yourself. See the chapter &quot;Sharing Concepts and Metadata&quot; for more details.</p>
<p>Every question you ask about a patient needs to be defined by a <strong>Concept</strong>. (For example, to record a patient's weight you need a Concept like <strong>Weight in kilograms</strong>.)</p>
<p>If you want to ask a question that has a fixed set of coded answers, those answers are also Concepts. (For example, the question concept <strong>Blood Type</strong> may have 4 different answer concepts: <strong>A</strong>, <strong>B</strong>, <strong>AB</strong>, and <strong>O</strong>)</p>
<h2>Persons</h2>
<p>Every individual who is referred to in any patient's record in OpenMRS must be stored in the system as a <strong>Person</strong>. Most persons will also be Patients or Users.</p>
<h3>Names</h3>
<p>A person can have one or more names, one of which must be marked as the <strong>preferred</strong> name. The preferred name will be displayed in search results and patient screens.</p>
<h3>Addresses</h3>
<p>A person may have zero or more contact addresses. You may configure the format of these addresses for your particular locale.</p>
<h3>Person Attributes</h3>
<p>To support your local needs, you can define additional pieces of information about the people in your system, on top of those that are natively supported by OpenMRS. You can define the datatype of a Person Attribute, as well as any constraints on the possible values, using metadata. This metadata is called a Person Attribute Type.</p>
<p>Person Attributes are suitable for storing other information. But historical values of person attributes are not retained. For example, you should use a person attribute to record a patient's contact telephone number. This information may change, but if it does so, the system need only store the most recent value, and need not retain previous values. It is not appropriate to use a person attribute to store something like the patient's height, which is recorded at a given point in time, but can be expected to change and should be tracked as it does so.</p>
<h2>Patients</h2>
<p>Anyone who receives care in OpenMRS must be a <strong>Patient </strong>(for example, anyone who has an Encounter or who is enrolled in a Program). Every Patient must have at least one Identifier, which is explained below.</p>
<p>A Patient is also a Person, meaning they must have at least one name and they may have addresses.</p>
<h3>Patient Identifier</h3>
<p>The Patient Identifier is a medical record number assigned by your facility, used to identify and re-identify the patient on subsequent visits.</p>
<p>A <strong>Patient Identifier Type</strong> defines the format of a particular kind of patient identifier. For example, you might define that <strong>Amani ID</strong> is an identifier type that is required for every patient; the format is 2 letters followed by 6 digits and uses a particular check digit<span id="ch010_openmrs-information-model.xhtml#InsertNoteID_6_marker7" class="InsertNoteMarker"><sup><a href="openmrs-information-model/openmrs-information-model#InsertNoteID_6">1</a></sup></span> algorithm.</p>
<h2>Relationships</h2>
<p><img src="static/case-study.png" />A <strong>Relationship</strong> is a bidirectional link between two Persons in OpenMRS.</p>
<p>The metadata describing a particular kind of relationship is a <strong>Relationship Type</strong> which defines the names of each direction of the relationship.</p>
<p>At the Amani Clinic, it is necessary to use relationships to link a mother's patient record to the patient record of her children. One might also use relationships to record the link between a patient and their primary care provider.</p>
<h2>Encounters</h2>
<p>A moment in time where a patient is seen by a provider at a location, and data is captured. Generally speaking, every time you enter a form in OpenMRS this creates an <strong>Encounter</strong>.</p>
<p>If a patient visits a clinic, checks in at registration, is seen by a doctor, and has meds dispensed in the pharmacy, this would be recorded as 3 Encounters.</p>
<p>The metadata that describes a kind of encounter is an <strong>Encounter Type</strong>. These are displayed in the user interface, and you may also search against them.</p>
<h2>Locations</h2>
<p>A <strong>Location</strong> is a physical place where a patient may be seen.</p>
<p>Locations may have a hierarchy, for example <strong>Children's Ward</strong> might be a location within the location <strong>Amani Clinic</strong>.</p>
<p>You might also store physical areas (for example <strong>Eastern Province</strong>, or <strong>California</strong>) as Locations. You should not use Locations to represent logical ideas like <strong>All District Hospitals</strong>.</p>
<h2>Observations</h2>
<p>An <strong>Observation</strong> is one single piece of information that is recorded about a person at a moment in time.</p>
<p>Every observation has a Concept as its question, and depending on the datatype of the concept, it has a value that is a number, date, text, Concept, etc.</p>
<p>Most of the information you store in OpenMRS is in the form of Observations, and most Observations happen in an Encounter. When you enter a form in OpenMRS, typically one Encounter is created with anywhere between tens or hundreds of Observations.</p>
<p>Note that an individual Observation is valid only at one moment in time, and it does not carry forward. You may query the system for the last observation for <strong>pregnancy status</strong> but this does not tell you whether or not the patient is pregnant at any point after the moment of that observation.</p>
<p>Examples of observations include <strong>Serum Creatinine of 0.9mg/dL</strong> or <strong>Review of cardiopulmonary system is normal</strong>.</p>
<h3>Observation Groups</h3>
<p>Sometimes a single Observation is not sufficient to capture an entire piece of patient information, and you need to use multiple Observations that are grouped together.</p>
<p>For example recording that a patient had a rash as an allergic reaction to penicillin would need to be stored as two observations plus a third one that groups the previous two together:</p>
<ol>
<li>Concept = &quot;Allergen&quot;, coded value = &quot;Penicillin&quot;, group = (3)</li>
<li>Concept = &quot;Reaction&quot;, coded value = &quot;Rash&quot;, group = (3)</li>
<li>Concept = &quot;Allergic Reaction Construct&quot;, group members = (1), (2)</li>
</ol>
<h2>Orders</h2>
<p>An <strong>Order</strong> is an action that a provider requests be taken regarding a patient.</p>
<p>For example a provider could order a Complete Blood Count laboratory panel for a patient.</p>
<p>An Order only records an intention, not whether or not the action is carried out. The results of an Order are typically recorded later as Observations.</p>
<p>Prescribing a medication is a <strong>Drug Order</strong>. A drug order can be placed for a generic drug, represented by a Concept (for example, <strong>500mg of Ciprofloxacin, twice a day</strong>). If you are using OpenMRS to manage a formulary of specific medications (i.e., <strong>Drugs</strong> in OpenMRS), you may also record <strong>Drug Orders</strong> against those. For example, a drug order might be <strong>one 500mg tablet of Ciprofloxacin, twice a day</strong>.</p>
<h2>Allergy Lists</h2>
<p>OpenMRS lets you manually maintain an <strong>Allergy List</strong> for a patient, including the allergen, reaction, severity, etc.</p>
<p>This list is managed separately from Observations: observing an allergic reaction to a drug does not automatically add an Allergy to the list.</p>
<p>Unlike an Observation (which happens at one moment in time), an Allergy is longitudinal data, with start and end dates.</p>
<h2>Problem Lists</h2>
<p>OpenMRS lets you manually maintain a Problem List for a patient. This list is managed separated from Observations: observing that the patient has &quot;Diagnosis Present = Diabetes&quot; does not automatically add a Problem to the list. Unlike an Observation (which happens at one moment in time), a Problem is longitudinal data, with start and end dates.</p>
<h2>Program Enrollments, Workflows, and States</h2>
<p>A <strong>Program</strong> represents an administrative program or study that a patient may be enrolled in (for example, <strong>Child Nutrition Study</strong> or <strong>DOTS Tuberculosis Treatment Program</strong>).</p>
<p>A <strong>Program Enrollment</strong> represents the fact that a patient is enrolled in one of these Programs over a time period at a Location. This is longitudinal data with a start date and end date.</p>
<p>A Program can also define administrative <strong>Workflows</strong>, and possible <strong>States</strong> the Patient may have within those workflows. An <strong>initial state</strong> is one that a Patient is allowed to start in when they are first enrolled in a Program. A <strong>terminal state</strong> is one that closes the Program enrollment if the Patient is placed in it.</p>
<p>For example a research study on infant nutrition might have a workflow called <strong>Study Enrollment Status</strong> with the states:</p>
<ul>
<li>Patient Identified (initial)</li>
<li>Mother Consented to Study</li>
<li>Study Complete (terminal)</li>
<li>Lost to Followup (terminal)</li>
</ul>
<p>These states are meant to represent administrative statuses, not clinical ones. For example putting a patient in a <strong>Loss to Followup</strong> state represents an official declaration and will not happen automatically even if no encounters are entered for the patient for several months.</p>
<h2>Forms</h2>
<p>A <strong>Form</strong> represents an electronic form that may be used for entering or viewing data. The basic OpenMRS system does not define a specific technology for entering forms. You will need to use one of the community-developed form entry modules. See the chapter &quot;Data Entry&quot; for more details.</p>
<p>The Form Entry (Infopath) and XForms modules rely on a <strong>Form Schema</strong>, where you define which Concepts are used on the Form. The HTML Form Entry module does not require you to manage the schema.</p>
<h2>Users, Roles, and Privileges</h2>
<p>A <strong>User</strong> in OpenMRS is an account that a person may use to log into the system.</p>
<p>The real-life person must be represented by a Person record in OpenMRS, and a person may have more than one user account. If you want a patient to be able to view her own record in OpenMRS, then you need to attach User account to the Patient record.</p>
<p>A <strong>Role</strong> represents a group of privileges in the system. Roles may inherit privileges from other roles, and Users may have one or more Roles.</p>
<p>A <strong>Privilege</strong> is an authorization to perform a particular action in the system. The list of available privileges are defined by the core system and by add-on modules (for example, <strong>Delete Patients</strong> and <strong>Manage Encounter Types</strong>), but you need to configure which Roles have which Privileges while you are configuring your system.</p>
<h2>The Information Model in use at Amani Clinic</h2>
<p><img src="static/case-study.png" />A patient named Asaba arrives at Amani Clinic, where the registration clerk James creates her electronic record and stores her contact phone number as 312-555-7890. On paper the Nurse, Kissa, records Asaba's weight as 61.5kg and orders a pregnancy test. James enters these onto an electronic screen.</p>
<p>From the perspective of the OpenMRS model, we have the following metadata:</p>
<ul>
<li>The nurse, Kissa (a Person)</li>
<li>The registration clerk, James (a User)</li>
<li>Contact Phone Number (a Person Attribute Type)</li>
<li>Weight, in kilograms (a Concept, with class <strong>Finding</strong> and datatype <strong>Numeric</strong>)</li>
<li>Urine Pregnancy Test (a Concept, with class <strong>Test</strong>)</li>
<li>Amani Clinic (a Location)</li>
<li>Outpatient Visit (an Encounter Type)</li>
<li>Outpatient Triage Form (a Form)</li>
</ul>
<p>When Asaba is first seen at the registration desk, James creates the following data:</p>
<ul>
<li>A Patient (Asaba)</li>
<li>A Person Attribute (type = Contact Phone Number, value = 312-456-7890).</li>
</ul>
<p>After Asaba sees the nurse, who gives a paper form to James, he creates more data:</p>
<ul>
<li>
<p>An Encounter with:</p>
</li>
<ul>
<li>patient = Asaba</li>
<li>type = Outpatient Visit</li>
<li>form = Outpatient Triage Form</li>
<li>location = Amani Clinic</li>
<li>provider = Nurse Kissa</li>
<li>creator = Registration Clerk James</li>
</ul>
<li>
<p>An Observation (in that encounter), of <strong>Weight in kilograms</strong> = 61.5.</p>
</li>
<li>
<p>An Order (in that encounter), for <strong>Urine Pregnancy Test</strong></p>
</li>
</ul>
<h2>Check digits</h2>
<p>A <strong>check digit</strong> is an extra digit that is added to the end of an identifier, and depends on the rest of identifier. It allows OpenMRS to determine whether an identifier has been mistyped. For example using a Luhn check digit, &quot;1234-1&quot; is valid, but &quot;1234-5&quot; is incorrect. It is a strongly-recommended best practice to use check digits in all patient identifiers that you assign.</p>
<p><a href="http://en.wikipedia.org/wiki/Check_digit" class="uri">http://en.wikipedia.org/wiki/Check_digit</a></p>
<p><span id="ch011_getting-around-the-user-interface.xhtml"></span></p>
<h1>Getting Around the User Interface</h1>
<p><img src="static/gettingaround.png" /></p>
<address>
<p>An OpenMRS implementer-programmer gives a demonstration of the system as his clinic.</p>
</address>
<p>This chapter gives a brief overview of key parts of the OpenMRS user interface, which will be helpful as you read the chapters to follow.</p>
<h2>Logging in to the system</h2>
<p>OpenMRS runs as a web application, meaning you use it via a web browser. Before you can access any pages in the system, you need to log in. To do this the first time, you will need to know the administrator password that you chose during first-time setup. Refer to the chapter &quot;Installation and Initial Setup&quot; for those details.</p>
<p><img src="static/around%20login.png" /></p>
<address>
<p>The OpenMRS login screen.</p>
</address>
<p>Users that forget their password may reset it if they have configured a secrete question, and know the answer. The <strong>Sign up</strong> link is provided by the <em>Request Account</em> module, if you have it installed.</p>
<h2>Home</h2>
<p>In the default installation of OpenMRS, all users see the same home page after logging in. To customize different home pages for different types of users, you can use the <strong>Role Based Homepage</strong> module.</p>
<p><img src="static/around%20home.png" /></p>
<address>
<p>The default OpenMRS home page.</p>
</address>
<p>As shown in the OpenMRS home page above, all pages allow you to:</p>
<ol>
<li><strong>Log out</strong> and edit your profile, or</li>
<li>Change your language for the current session.</li>
</ol>
<p>You can configure the allowed languages via a global property in the Administration page.</p>
<h2>Administration</h2>
<p>As a system administrator or manager for an OpenMRS installation, you will frequently need to access the configuration and administration functions accessible through the <strong>Administration</strong> page.</p>
<p><img src="static/around%20admin_1.png" /></p>
<address>
<p>The OpenMRS Administration page.</p>
</address>
<ol>
<li>You can access the <strong>Administration</strong> page from anywhere in the application by clicking its link in the top-right of the screen.</li>
<li>Configuration pages for the OpenMRS core functionality are listed in the left and center columns.</li>
<li>Configuration pages for functionality in add-on modules are listed in the right column.</li>
<li>You add/remove/start/stop add-on modules from the <strong>Manage Modules</strong> page.</li>
</ol>
<h2>Viewing and creating patients</h2>
<p>One of the most common actions for non-administrative users of the system is to find and open existing patient records. If the desired patient record is not found, users may be able to create new ones if they have sufficient privileges.</p>
<p>You can search for a patient by ID number. Clicking on the search result will open that patient's dashboard. If a user does not find a patient by ID number or name, you may create a new patient.</p>
<p><img src="static/around%20find_2.png" /></p>
<address>
<p>Finding and creating patients in OpenMRS.</p>
</address>
<h2>Patient dashboard</h2>
<p>Data entry staff will spend a lot of time on the patient dashboard page. This gives access to different parts of a patient's record and allows you to enter forms into the record.</p>
<p><img src="static/around%20patient.png" /></p>
<address>
<p>A typical OpenMRS patient dashboard.</p>
</address>
<p>The workflow of the patient dashboard page is not efficient for a clinician who wants to access a patient's record at the point of care. To support those workflows you should consider downloading and installing the optional the <strong>Clinical Summary</strong> module or the <strong>HTML Form Flowsheet</strong> module.</p>
<p><span id="ch013_customizing-openmrs-with-plug-in-modules.xhtml"></span></p>
<h1>Customizing OpenMRS with Plug-in Modules</h1>
<p><img src="static/customized-openmrs.png" /></p>
<p>OpenMRS has a modular architecture which allows special functionality to be easily added or removed from the system. Modules have full access to the system and can modify or enhance the behavior of the system. For example, the <strong>Sync</strong> module adds the ability for an OpenMRS server to synchronize its data with other OpenMRS servers; the <strong>HTML Form Entry</strong> module provides a way to create web-based forms for collecting data; and the <strong>Flowsheet</strong> module adds a new way for viewing information. Modules also provide a mechanism for adapting OpenMRS to local needs. For more information about published modules visit the OpenMRS Wiki:</p>
<p><a href="http://go.openmrs.org/book-modules" class="uri">http://go.openmrs.org/book-modules</a></p>
<h2>Module Repository</h2>
<p>You can view available modules in the OpenMRS Module Repository:</p>
<p><a href="http://modules.openmrs.org/" class="uri">http://modules.openmrs.org/</a></p>
<p>It is a place where you can find published modules. Each module has a page with a description, a link for downloading, and a link to the module's documentation.</p>
<p>Some modules may be under development, but not yet published in the module repository. Many of these can be seen by browsing the &quot;modules&quot; section of the OpenMRS Subversion code repository</p>
<p><a href="http://svn.openmrs.org/openmrs-modules/" class="uri">http://svn.openmrs.org/openmrs-modules/</a></p>
<h2>Managing Modules</h2>
<p>You can see available modules under <strong>Administration</strong> page, <strong>Manage Modules</strong>. The listing contains all the installed modules. You can see here their status (if they are started, stopped or failed to start) as well as uninstall them.</p>
<p><img src="static/manage_modules_3.png" /></p>
<ol>
<li>Stop the module</li>
<li>Start the module</li>
<li>Uninstall the module</li>
</ol>
<p>A module is distributed as a single file with the <strong>.omod</strong> extension. You can install it from the dedicated <strong>Manage Modules</strong> section on the <strong>Administration</strong> page.</p>
<p>You can either point to a local path to the <strong>.omod</strong> file or find and install a module directly from the <strong>Install from Module Repository</strong> section which connects to the module repository.</p>
<p><img src="static/add_module_3.png" /></p>
<ol>
<li>Choose a file and click <strong>Upload</strong></li>
<li>Search for a module by name</li>
<li>Install the chosen module</li>
</ol>
<p>If uploads are not allowed from the web, you can copy the <strong>.omod</strong> file into the folder:</p>
<p><strong>~/.OpenMRS/modules</strong></p>
<p>(Where <strong>~/.OpenMRS</strong> is assumed to be the <strong>Application Data</strong> directory which the running OpenMRS is currently using. You can find the precise location under <strong>Administration &gt; Module Properties</strong>.) After moving the file to that location, restart OpenMRS. The module will be loaded and started.</p>
<h2>Bundled modules</h2>
<p>OpenMRS is delivered with some bundled modules which are included in a standard installation. The list may differ from version to version. OpenMRS 1.8 contains:</p>
<h3>HTML Form Entry</h3>
<p>Allows anyone with basic HTML programming skills and knowledge of the OpenMRS system to create forms which can be entered without any proprietary tools directly from a web browser. It is a preferred form entry module.  HTML Forms allow a lot of control over the form's layout. <a href="http://go.openmrs.org/book-htmlform" class="uri">http://go.openmrs.org/book-htmlform</a></p>
<h3>XForms</h3>
<p>Allows data entry to be done directly from any JavaScript enabled browser. The module converts an OpenMRS form to an XForm.  XForms are well-suited to forms that will be filled out on mobile devices.   <a href="http://go.openmrs.org/book-xforms" class="uri">http://go.openmrs.org/book-xforms</a></p>
<h3>FormEntry</h3>
<p>Allows a form's content to be designed in InfoPath, and then allows  end users to fill out the form and submit it to OpenMRS.  OpenMRS is moving away from the InfoPath format because InfoPath is proprietary and difficult to troubleshoot.  <a href="http://go.openmrs.org/book-formentry" class="uri">http://go.openmrs.org/book-formentry</a></p>
<h3>HTML Widgets</h3>
<p>Provides a set of reusable HTML form field widgets in order encapsulate the common input requirements for OpenMRS. It is meant to be something that developers can utilize in their code. <a href="http://go.openmrs.org/book-widgets" class="uri">http://go.openmrs.org/book-widgets</a></p>
<h3>Reporting</h3>
<p>The Reporting module provides a feature-rich and user-friendly web interface for managing reports within OpenMRS. <a href="http://go.openmrs.org/book-reporting" class="uri">http://go.openmrs.org/book-reporting</a></p>
<h3>Reporting Compatibility</h3>
<p>Was written for the 1.5 and later releases of OpenMRS. It contains pages and features that were previously included into OpenMRS core code itself and are needed to run the Reporting module. <a href="http://go.openmrs.org/book-compat" class="uri">http://go.openmrs.org/book-compat</a></p>
<h3>Serialization XStream</h3>
<p>Provides an implementation of serialization/deserialization strategy using the XStream library. <a href="http://go.openmrs.org/book-serial" class="uri">http://go.openmrs.org/book-serial</a></p>
<h2>Other popular modules</h2>
<h3>Clinical Summary</h3>
<p>Allows you to create clinical summaries. <a href="http://go.openmrs.org/book-clinsum" class="uri">http://go.openmrs.org/book-clinsum</a></p>
<h3>Groovy</h3>
<p>Was created as a proof of concept (for embedding Groovy into OpenMRS) and to serve as a base module for other modules that want to use Groovy scripting as well. <a href="http://go.openmrs.org/book-groovy" class="uri">http://go.openmrs.org/book-groovy</a></p>
<h3>HTML Form Flowsheet</h3>
<p>Allows you to generically model a paper flowsheet. Provides basic functionality for embedding small HTML Forms inside of larger HTML Forms, where each small HTML Form represents one row in a patient chart. Additionally, the module allows you to specify any number of tabs in a tab-based layout, each containing a distinct HTML Form. <a href="http://go.openmrs.org/book-hff" class="uri">http://go.openmrs.org/book-hff</a></p>
<h3>HTML Form Entry Designer</h3>
<p>WYSIWYG Form Designer for the HTML Form Entry Module. <a href="http://go.openmrs.org/book-hfed" class="uri">http://go.openmrs.org/book-hfed</a></p>
<h3>ID Generation</h3>
<p>Provides a facility for managing identifier generation and allocation within an OpenMRS implementation. Introduces different identifier generation strategies including automatic and pooled. <a href="http://go.openmrs.org/book-idg" class="uri">http://go.openmrs.org/book-idg</a></p>
<h3>Metadata Sharing</h3>
<p>Allows all kinds of metadata (concepts, HTML forms, locations, roles, programs, etc.) to be exchanged between different OpenMRS installations. <a href="http://go.openmrs.org/book-mds" class="uri">http://go.openmrs.org/book-mds</a></p>
<h3>Request Account</h3>
<p>Allows users to request their own accounts, specifying their own preferred username and preferred password. An administrator can then approve or deny pending account requests. <a href="http://go.openmrs.org/book-reqacct" class="uri">http://go.openmrs.org/book-reqacct</a></p>
<h3>REST Webservices</h3>
<p>The module exposes the OpenMRS API as REST web service. <a href="http://go.openmrs.org/book-rest" class="uri">http://go.openmrs.org/book-rest</a></p>
<h3>Role Based Homepage</h3>
<p>Allows for administrators to define a custom &quot;Home Page&quot; for each defined Role within the system. These Home Pages may be simply pages that already exist, and which particular users would be best served to have as their default. For example, System Administrators may want the Administration page as their default home. Alternatively, administrators can &quot;author&quot; new pages within the running application for their users. <a href="http://go.openmrs.org/book-rbh" class="uri">http://go.openmrs.org/book-rbh</a></p>
<h3>Synchronization</h3>
<p>Fits in scenarios when you have multiple sites using OpenMRS with separate databases and you want them to copy data to each other that is keep them synchronized. <a href="http://go.openmrs.org/book-sync" class="uri">http://go.openmrs.org/book-sync</a></p>
<h2>Writing Your Own Module</h2>
<p>This section covers basics of writing your own module. We encourage to contribute modules you write to the Module Repository. You can also use our code repository for your module. For more information how to gain access to both please visit this page</p>
<p><a href="http://go.openmrs.org/book-svnrepo" class="uri">http://go.openmrs.org/book-svnrepo</a></p>
<p>In order to develop and test a module you will need to have OpenMRS installed in a version on which you want to run your module.</p>
<p>To create a new module it is best to use a dedicated Maven archetype. Before you start you will need to have maven installed. See the Maven web site at <a href="http://maven.apache.org/" class="uri">http://maven.apache.org/</a> for more instructions.</p>
<p>The next step is to update the <strong>settings.xml</strong> file to point Maven to the <strong>Maven Module Archetype</strong>. You can find the file in one of the following locations:</p>
<ul>
<li>Linux: <strong>~/.m2</strong></li>
<li>Windows XP: <strong>C:\Documents and Settings\user_name\.m2</strong></li>
<li>Windows Vista/7: <strong>C:\Users\user_name\.m2</strong></li>
</ul>
<p>If it does not exist you need to create one. Add the following content:</p>
<pre class="prettyprint linenums"><code>&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;

  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0
                      http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt;

  &lt;pluginGroups&gt;
    &lt;pluginGroup&gt;org.openmrs.maven.plugins&lt;/pluginGroup&gt;
  &lt;/pluginGroups&gt;
  &lt;profiles&gt;
    &lt;profile&gt;
      &lt;id&gt;OpenMRS&lt;/id&gt;
      &lt;activation&gt;
        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
      &lt;/activation&gt;
      &lt;properties&gt;
        &lt;archetypeCatalog&gt;http://mavenrepo.openmrs.org/nexus/service/local/repositories/releases/content/archetype-catalog.xml&lt;/archetypeCatalog&gt;
      &lt;/properties&gt;
      &lt;repositories&gt;
        &lt;repository&gt;
          &lt;id&gt;openmrs-repo&lt;/id&gt;
          &lt;name&gt;OpenMRS Nexus Repository&lt;/name&gt;
          &lt;url&gt;http://mavenrepo.openmrs.org/nexus/content/repositories/public&lt;/url&gt;
        &lt;/repository&gt;
      &lt;/repositories&gt;
      &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
          &lt;id&gt;openmrs-repo&lt;/id&gt;
          &lt;name&gt;OpenMRS Nexus Repository&lt;/name&gt;
          &lt;url&gt;http://mavenrepo.openmrs.org/nexus/content/repositories/public&lt;/url&gt;
          &lt;snapshots&gt;
            &lt;enabled&gt;false&lt;/enabled&gt;
          &lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
      &lt;/pluginRepositories&gt;
    &lt;/profile&gt;
  &lt;/profiles&gt;

&lt;/settings&gt;</code></pre>
<p>Maven is a command line tool so open a console and enter the folder where you want to have a project for your new module created. The command you need to run is:</p>
<pre><code>mvn module-wizard:generate</code></pre>
<p>Follow the steps of the wizard by answering the questions. In the end you should have a new Maven project generated. To build it you just need to enter the project folder and run:</p>
<pre><code>mvn install</code></pre>
<p>You will find the produced <strong>.omod</strong> file for your module in the directory <strong>omod/target</strong>.</p>
<p>Developing a module requires from you to be familiar with the Spring framework. Read the Spring web site at <a href="http://www.springsource.com/" class="uri">http://www.springsource.com/</a> for more details. There are also a few things specific to the OpenMRS platform which you will need to remember:</p>
<ul>
<li>The Spring web context file can be found at <strong>omod\src\main\resources\webModuleApplicationContext.xml</strong>.</li>
<li>Modules are able to add and modify tables in the OpenMRS database. The files <strong>omod\src\main\resources\sqldiff.xml</strong> and <strong>omod\src\main\resources\liquibase.xml</strong> hold the SQL commands which can be executed as module is installed.</li>
<li>Modules can extend OpenMRS core JSP pages via extension points. A module registers an extension in <strong>omod\src\main\resources\config.xml</strong> for each extension point in the system to which it wants to add content.</li>
</ul>
<p>You should find extension points in the JSP pages you want to extend. Look for:</p>
<pre><code>&lt;openmrs:extensionPoint pointId=&quot;...&quot;</code></pre>
<p>It is best to learn by example, so you should look at some other modules in the OpenMRS code repository for code snippets to reuse in your own work. Consider examining the <strong>Webservices.rest</strong> module.</p>
<p><span id="ch014_managing-concepts-and-metadata.xhtml"></span></p>
<h1>Managing Concepts and Metadata</h1>
<p>Having well defined Concepts is crucial for every OpenMRS installation. OpenMRS is delivered with just a few basic concepts and it is up to you to gather the rest.</p>
<p>Creating Concepts is a complex task which requires expertise and experience so we do not recommend doing it on your own. It is best to contact our community and use some of existing Concept dictionaries like MVP or MCL. For more information on how to get in touch with the right people, see the &quot;Getting Help from the OpenMRS Community&quot; chapter.</p>
<p>You can either enter Concepts on your own manually or use a tool like the Metadata Sharing Module to import them. In this chapter, we will present how to enter Concepts manually via the web interface.</p>
<h2>Concept Class</h2>
<p>To start with you will need to setup Concept Classes. The standard installation includes around 15 predefined concept classes. To view them enter the <strong>Administration</strong> page &gt; <strong>Manage Concept Classes</strong>.</p>
<p><img src="static/concept_classes.png" /></p>
<ol>
<li>Add a new Concept Class</li>
<li>Click to edit an existing Concept Class</li>
</ol>
<p>You will see a list with names and descriptions. You can edit them by clicking on a name and also delete by selecting check-boxes next to their names. Note that you cannot delete Concept Classes that are used in Concepts already. There is also a link <strong>Add Concept Class</strong> to enter new ones.</p>
<h2>Concept Datatype</h2>
<p>Concept Datatypes are purposed to indicate different formats of data stored in Concepts. They are predefined and read-only. You can view them under <strong>Administration &gt; Manage Concept Datatypes</strong>.</p>
<p><img src="static/concept_datatype.png" /></p>
<h2>Concept</h2>
<p>To view Concepts available in your system click <strong>Dictionary</strong> in the top menu. You will be able to search for particular Concepts by name or id. There is also a check-box that allows to search for retired Concepts which are not supposed to be used anymore or are replaced with new ones. You can also enter a new Concept from here clicking <strong>Add new Concept</strong>.</p>
<p><img src="static/concept_dictionary.png" /></p>
<ol>
<li>Open Concept Dictionary</li>
<li>Adding a new Concept</li>
<li>Searching for Concepts</li>
<li>Search results</li>
</ol>
<p><img src="static/case-study.png" />Let's create a Concept to represent <strong>ANTENATAL VISIT REASON</strong>. We will use it later in the book in a data entry form. The form for creating a Concept allows you to enter <strong>Fully Specified Name</strong> as well as synonyms. You can add synonyms with <strong>Add Synonym</strong> button [2]. At least one of the names needs to be marked as <strong>Preferred</strong> with the radio button next to it.</p>
<p>While creating a new Concept you need to decide on Datatype. In this case it will be a coded Concept that is you will provide a list of answers. Answers need to be defined as Concepts. You need to create them beforehand or else add them later.</p>
<p><img src="static/add_concept_1.png" /></p>
<ol>
<li>Switch between languages</li>
<li>Add a synonym</li>
<li>Select Datatype</li>
<li>This section changes depending on the chosen Datatype, in this case we can edit a list of answers</li>
<li>Allows to add mappings</li>
</ol>
<h2>Concept Mappings</h2>
<p><strong>Concept Mappings</strong> are added to facilitate managing Concept Dictionaries and point to other Concepts which have the same meaning. For instance we could add here a mapping to a Concept in the MCL dictionary. You can save the Concept now and create some answers.</p>
<p>Repeat the steps and create Concepts <strong>PLANNING PREGNANCY</strong> and <strong>CURRENTLY PREGNANT</strong> of Class <strong>Finding</strong> and Datatype <strong>Boolean</strong>. The last possible answer will be <strong>OTHER</strong> of Class <strong>Misc</strong> and Datatype <strong>N/A</strong>. After creating three new Concepts, you can edit <strong>ANTENATAL VISIT REASON</strong> and add them as answers.</p>
<h2>Concept Drug</h2>
<p>To view <strong>Concept Drugs</strong>, go to <strong>Administration &gt; Manage Concept Drugs</strong>. You can either enter a Concept Drug by clicking its name to edit it, or you can create a new one through the <strong>Add Concept Drug</strong> link. You must enter a name and choose one of Concepts of datatype <strong>Drug</strong>.</p>
<h2>Metadata</h2>
<p>There are different types of Metadata which need to be managed. The list includes Locations, Encounter Types, Order Types, etc. You can view and edit them easily via the <strong>Administration</strong> page.</p>
<h3>Patient Identifier</h3>
<p>A patient identifier is any unique number that can identify a patient. Examples are a Medical Record Number, a National ID, a Social Security Number, a driver's license number, etc. A patient can have any number of identifiers. The Patient Identifier Type table defines what type of identifiers are collected in your system.</p>
<p>A patient can have multiple identifiers of each type defined in your system. For example, a patient could have five identifiers of type of &quot;Medical Record Number&quot; because they were seen at five different hospitals that collected five different types of ids.</p>
<p>The patient search screen searches across all identifier that are still active for a patient.</p>
<p>New identifier types are generally created if they have different characteristics. For example, one identifier can be only a string of numbers, another is a number with a hyphen plus a <strong>check digit</strong>, etc.</p>
<p>Identifiers uniquely identify patients within the system. Different types of identifiers are distributed by various health care systems. Some of these systems will be within your control, so you will be able to control how identifiers are created and distributed; however, there will likely be identifiers that are not within your control but are useful to record within your system to aid in patient identification.</p>
<p>In order to see predefined identifiers types, or to add a new one, go to <strong>Administration - Manage Identifier Types</strong>. Let's examine <strong>OpenMRS Identification Number</strong>.</p>
<p><img src="static/patient_identifier_type.png" /></p>
<p>The <strong>Regex Format</strong> and <strong>Description of format</strong> fields are empty, but you could add here a regular expression to validate each entered identifier. For example:</p>
<pre><code>\d{1,8}-\d</code></pre>
<p>would allow 1 to 8 digits followed by a dash and a single digit.</p>
<p>It is also possible to choose one of several pre-defined <strong>Identifier validators</strong>. Here <strong>Luhn CheckDigit Validator</strong> is used. The purpose of check digits is simple. Any time identifiers (typically number +/- letters) are being manually entered via keyboard, there will be errors. Inadvertent keystrokes or fatigue can cause digits to be rearranged, dropped, or inserted. Have you ever mis-dialed a phone number? It happens.</p>
<p>Check digits helps to reduce the likelihood of errors by introducing a final digit that is calculated from the prior digits. Using the proper algorithm, the final digit can always be calculated. Therefore, when a number is entered into the system (manually or otherwise), the computer can instantly verify that the final digit matches the digit predicted by the check digit algorithm. If the two do not match, the number is refused. The end result is fewer data entry errors.</p>
<h2>Internationalization</h2>
<p>Concepts can be easily internationalized that is you can enter different Concept names for every allowed locale. The list of allowed locales is stored in a global property <strong>locale.allowed.list</strong> as comma separated language codes (for instance <strong>en</strong>, <strong>fr</strong>, or <strong>de</strong>). You can edit the global property from <strong>Administration &gt; Manage Global Properties</strong>. See this link for the full list of ISO 639.2 language codes:</p>
<p><a href="http://go.openmrs.org/book-isolang" class="uri">http://go.openmrs.org/book-isolang</a></p>
<p>Currently, Metadata cannot be internationalized.</p>
<p><span id="ch015_sharing-concepts-and-metadata.xhtml"></span></p>
<h1>Sharing Concepts and Metadata</h1>
<p><img src="static/forms.png" /></p>
<address>
<p>Working with OpenMRS forms at Hôpital Albert Schweitzer, Deschapelles, Haiti.</p>
</address>
<p>Instead of creating concepts, forms and other metadata yourself, you are highly encouraged to use some which are publicly available. You can use complete concept dictionaries like MCL or MVP as well as metadata packages which include just a fraction of dictionaries, forms, locations, etc.</p>
<p>Sharing forms entails sharing associated concepts and other metadata. To facilitate this task, the <strong>Metadata Sharing</strong> module was created. It allows all kinds of metadata (concepts, forms, locations, roles, programs, etc.) to be exchanged between different OpenMRS installations.</p>
<p>Any dependent metadata will be packaged along with the exported item. For example, if you export a concept which has coded answers, the module will package the initial concept along with all the coded answer concepts, class and datatype. If you export a form, it will package the form along with the encounter type, all concepts used on that form, etc.</p>
<p>The import process is designed in a way to help identify items in your system that are semantically the same as the ones included in a package so that you can skip importing them and use yours.</p>
<p>You can find some published forms at:</p>
<p><a href="http://go.openmrs.org/book-formbank" class="uri">http://go.openmrs.org/book-formbank</a></p>
<p><img src="static/case-study.png" />Let's see an example of importing a form with the Metadata Sharing module. The <strong>Amani Antenatal History</strong> form will be presented in detail in the &quot;Data Entry&quot; chapter.</p>
<p>After installing the Metadata Sharing module, go to <strong>Administration &gt; Import Metadata</strong>.</p>
<p><img src="static/mds_import_1.png" /></p>
<ol>
<li>Import a new package</li>
<li>List of previously imported packages you are subscribing</li>
</ol>
<p>To start, click the <strong>Import package</strong> button and on the next screen, point to a file you want to import.</p>
<p><img src="static/mds_import_file.png" /></p>
<ol>
<li>Choose a local file you want to import</li>
<li>Enter a subscription URL</li>
</ol>
<p><img src="static/mds_import_level.png" /></p>
<p>The next step is to choose a trust level. As stated before, while importing a package you will have a chance to use concepts, locations, etc. which exist in your system rather than creating new ones from the package. If you choose to do so, you can either overwrite your existing items or keep the ones you already have. If you choose <strong>Require Confirmation</strong>, you will be asked to review most of the metadata before importing and decide what you want to do. The <strong>Trust Incoming</strong> option in most cases will default to overwrite your existing metadata and will not require confirmation. Click <strong>Next</strong> to proceed.</p>
<p><img src="static/mds_import_assess_1.png" /></p>
<ol>
<li>Items needing assessment</li>
<li>Items which will be created</li>
<li>Items to skip</li>
<li>Items in your system which will be used instead</li>
<li>Items which will be overwritten</li>
<li>Opens the assessment screen</li>
<li>All items in the package</li>
</ol>
<p>On the next screen, you will see some details about the package and clicking <strong>Next</strong> again will bring you to the <strong>Import Summary</strong> page where you can assess items. As in our example, you will have to review twenty-nine concepts.</p>
<p><img src="static/mds_import_assess_item.png" /></p>
<p>The assessment screen depending on the case allows you to choose <strong>Create New</strong>, <strong>Skip if Possible</strong>, <strong>Choose Existing - Keep Mine</strong>, and <strong>Choose Existing - Overwrite</strong>. If you select <strong>Choose Existing</strong> you will be able to search for an existing item on your system by clicking <strong>Choose replacement</strong>. In this example, you cannot select <strong>Create New</strong> as it would violate a restriction that there cannot be two Concepts in the system with the same name.</p>
<p>Once reviewing all the items which need to be assessed, you can import the package.</p>
<p>A good source of concepts is the Maternal Concept Lab:</p>
<p><a href="http://go.openmrs.org/book-mcl" class="uri">http://go.openmrs.org/book-mcl</a></p>
<p>It allows you to find concepts you need and download them as metadata packages which you can import directly to your OpenMRS installation as needed with the help of the Metadata Sharing module.</p>
<p>The Metadata Sharing module promotes decentralized management of metadata where everyone can both create and import metadata packages.</p>
<p><span id="ch017_registering-patients.xhtml"></span></p>
<h1>Registering Patients</h1>
<p>In order to be able to fill out forms for a patient, you must first create a Patient. Often, a registration clerk or data entry clerk will create patients in the system. You should decide which model works best for your clinic, to prevent duplication of records.</p>
<p>You can create patients by clicking <strong>Find/Create Patient</strong> in the top menu.</p>
<p><img src="static/find_create_patient.png" /></p>
<p>The first step in creating a Patient is to fill out the short <strong>Create Patient</strong> form. After entering the necessary information, click on <strong>Create Person</strong>. You can enter more details on the next screen.</p>
<p><img src="static/create_patient_2.png" /></p>
<p><strong>Family Name,</strong> <strong>ID Number</strong> and <strong>Identifier Type</strong> are required. Identifier type is discussed in detail in the &quot;Managing Concepts and Metadata&quot; chapter.</p>
<p>Click <strong>Save</strong> to go to the <strong>Patient Dashboard</strong> screen, where you can see all the details, enter forms, etc. for the newly created patient.</p>
<p><span id="ch018_data-entry.xhtml"></span></p>
<h1>Data Entry</h1>
<p><img src="static/data-entry.png" /></p>
<address>
<p>An OpenMRS data entry clerk in Masaka, Uganda.</p>
</address>
<p>An electronic medical records system has many advantages compared to a traditional paper-based system. Data is collected using electronic forms, and a standard template means that each user sees the same structure, simplifying the representation of the underlying information structure and complexity. Electronic forms also allow for basic data validation.</p>
<p>There are three technologies for entering form data in OpenMRS. They are compared below.</p>
<div>
<span class="Apple-style-span"> </span>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Form Type</strong></td>
<td><strong> Advantages</strong></td>
<td><strong> Disadvantages</strong></td>
</tr>
<tr class="even">
<td>HTML Forms</td>
<td><ul>
<li>Easy to use</li>
<li>Ongoing development of new features</li>
<li>Supports complex logic operations</li>
<li>Extendable</li>
<li>Allows review of forms after submission</li>
</ul></td>
<td><ul>
<li>Requires HTML Knowledge</li>
<li>Not supported on mobile devices </li>
</ul></td>
</tr>
<tr class="odd">
<td>XForms</td>
<td><ul>
<li>Open source</li>
<li>Easy to use</li>
<li>Works well on mobile devices</li>
</ul></td>
<td><ul>
<li>Does not support some complex logic operations</li>
</ul></td>
</tr>
<tr class="even">
<td>InfoPath</td>
<td><ul>
<li>Original approach to data entry via forms</li>
<li>Others may already be familiar with the technology</li>
</ul></td>
<td><ul>
<li>Not Open Source</li>
<li>Runs only on Windows</li>
<li>Requires payment of license fees</li>
<li>No new development by the OpenMRS team<span class="Apple-style-span"> </span></li>
</ul></td>
</tr>
</tbody>
</table>
</span>
</div>
<p>This chapter will discuss only the HTML Form entry method. This is the simplest and most straightforward approach to data entry. It is supported by the <strong>HTML Form Entry</strong> module which is included with the default distribution of OpenMRS. </p>
<h2>Basic HTML form structure</h2>
<p>Every HTML Form must have the following minimal elements:</p>
<pre class="prettyprint linenums"><code>&lt;htmlform&gt;
    &lt;p&gt;Date of encounter: &lt;encounterDate  /&gt; &lt;/p&gt;
    &lt;p&gt;Health center: &lt;encounterLocation /&gt; &lt;/p&gt;
    &lt;p&gt;Clinician&#39;s name: &lt;encounterProvider role=&quot;Provider&quot; /&gt; &lt;/p&gt;
...
    &lt;p&gt;Name of observation: &lt;obs conceptId=&quot;x&quot; /&gt; &lt;/p&gt;
    &lt;p&gt;&lt;submit /&gt;&lt;/p&gt;
&lt;/htmlform&gt;</code></pre>
<h3>Form header</h3>
<p>It is easiest to leave these essential elements in a form header section that you re-use at the top of each form.  The mandatory observation element is included below.</p>
<p><img src="static/form-header-s.jpg" /></p>
<h2>Case study: Amani Clinic</h2>
<p><img src="static/case-study.png" />The clinicians at the Amani Clinic needed a way to capture patient history as part of their maternal and child health (MCH) program. They had been in contact with the Millenium Villages Project (MVP) via the OpenMRS implementers mailing List. MVP staff shared their Antenatal Visit form. The implementation team decided to use the History section from the MVP form as a basis for their MCH History form.</p>
<p>The MVP Antenatal History section looked like this:</p>
<p><img src="static/mvp-antenatal-history.jpg" /></p>
<h3>Step 1: Identify and create concepts</h3>
<p>Before you create a form, you must ensure that all reference Concepts are present in the Concept Dictionary. Because the MVP team already had a Concept Dictionary, the Amani Clinic were able to import the Concepts they needed. If you don't have access to an appropriate Concept Dictionary, you can also create new Concepts directly, following the steps outlined in the chapter &quot;Managing Concepts and Metadata&quot;.</p>
<p>The MVP form included fourteen different Question Concepts, as well as Answer Concepts for [1], [3], [6], [9], [11], [13], and [14].</p>
<p><img src="static/form-concepts.jpg" /></p>
<h3>Step 2: Create the form</h3>
<p>To create a form, click on the <strong>Manage HTML Forms</strong> link on the <strong>Administration</strong> page.</p>
<p><img src="static/form-admin.jpg" /></p>
<p>Click <strong>New Form</strong>.</p>
<p><img src="static/form-new.jpg" /></p>
<p>Enter the basic form information and click <strong>Save</strong>.</p>
<p><img src="static/form-enter.jpg" /></p>
<h3>Step 3: Create visual form structure with HTML</h3>
<p>HTML forms allow you to create a structure that closely resembles your paper forms, although it may not be precisely the same.</p>
<p>The degree to which your form resembles the paper form depends on your HTML layout skills--all HTML tags are supported. Table layout is beyond the scope of this book, but there are many resources available online.</p>
<p>This is the basic structure of the example HTML form, with a placeholder label inserted for each observation:</p>
<p><img src="static/form-skeleton.jpg" /></p>
<h3>Step 4: Insert observation elements</h3>
<p>Next, insert a form tag for each observation in your forms. These <strong>obs</strong> tags are not HTML tags, but are required by OpenMRS. The following sections provide examples of each Concept Datatype used on the example form. The HTML Form Entry module provides a wide variety of other tags. Please consult the HTML Form Reference on the wiki for full documentation along with other examples.</p>
<p><a href="http://go.openmrs.org/book-htmlref" class="uri">http://go.openmrs.org/book-htmlref</a></p>
<p><strong>Note:</strong> The Concept Identifier numbers used in this example will not match the Concept Identifiers in your local OpenMRS instance.</p>
<h3>Example 1: Date observation</h3>
<p><img src="static/form-date-s.jpg" /></p>
<p>To insert a Date Observation, include the Question Concept ID of any date-based Concept. The formatting label behind the Date Box cannot be removed.</p>
<pre class="prettyprint linenums"><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;b&gt;Last Menstrual Period:&lt;/b&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;obs conceptId=&quot;1427&quot;/&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</code></pre>
<h3>Example 2: Boolean observation</h3>
<p><img src="static/form-boolean-s.jpg" /></p>
<p>To insert a Boolean Observation, include the Question Concept ID of any boolean Concept. There are several different styles available for Boolean types.</p>
<pre class="prettyprint linenums"><code>...
&lt;table&gt;    
    &lt;tr&gt;
        &lt;td&gt;
            &lt;b&gt;High-Risk Sex:&lt;/b&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;obs conceptId=&quot;1355&quot; style=&quot;yes_no&quot;/&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
....</code></pre>
<h3>Example 3: Coded observation with radio buttons</h3>
<p><img src="static/form-radio-s.jpg" /></p>
<p>This <strong>obs</strong> element is inserted with the radio button style. You must specify each Answer Concept ID even though they are already recorded in the system as Answers for the Question Concept. If you want to use a name other than the Concept Name for an Answer Concept, you must include the Answer Concept Label.</p>
<p>To render the radio buttons vertically, insert <strong>&amp;lt;br \/&amp;gt;</strong> at the end of each label for the previous button.</p>
<pre class="prettyprint linenums"><code>...
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;b&gt;Reason For Visit:&lt;/b&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;obs conceptId=&quot;1433&quot; style=&quot;radio&quot; answerConceptIds=&quot;1435,1434,5622&quot; answerLabels=&quot;Planning Pregnancy&amp;lt;br \/ &amp;gt;, Currently Pregnant&amp;lt;br \/ &amp;gt;, Other&quot;/&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt; 
...</code></pre>
<h3>Example 4: Coded observation with multi-select checkboxes</h3>
<p><img src="static/form-multi-s.jpg" /></p>
<p>This <strong>obs</strong> element is inserted with the checkbox button style. You must specify each Answer Concept ID even though they are already recorded in the system as Answers for the Question Concept. If you want to use a name other than the Concept Name for an Answer Concept, you must include the Answer Concept Label.</p>
<p>Each checkbox selected actually represents an individual Observation; the Question Concept is common but each Answer Concept is unique.</p>
<pre class="prettyprint linenums"><code>...
&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;b&gt;Recent Contraceptive Use:&lt;/b&gt;
            &lt;br/&gt;
            &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;1107&quot; answerLabel=&quot;None&quot; style=&quot;checkbox&quot;/&gt;
            &lt;br/&gt;
            &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;780&quot; answerLabel=&quot;Oral Contraception&quot; style=&quot;checkbox&quot;/&gt;
            &lt;br/&gt;
            &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;190&quot; answerLabel=&quot;Condoms&quot; style=&quot;checkbox&quot;/&gt;
            &lt;br/&gt;
            &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;5277&quot; answerLabel=&quot;Natural Planning / Rhythm&quot; style=&quot;checkbox&quot;/&gt;
            &lt;br/&gt;
            &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;5278&quot; answerLabel=&quot;Diaphragm&quot; style=&quot;checkbox&quot;/&gt;
            &lt;br/&gt;
            &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;1378&quot; answerLabel=&quot;Depo-Provera&quot; style=&quot;checkbox&quot;/&gt;
            &lt;br/&gt;
            &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;1359&quot; answerLabel=&quot;Norplant&quot; style=&quot;checkbox&quot;/&gt;
            &lt;br/&gt;
            &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;1388&quot; answerLabel=&quot;Surgery&quot; style=&quot;checkbox&quot;/&gt;
            &lt;br/&gt;
            &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;5622&quot; answerLabel=&quot;Other&quot; style=&quot;checkbox&quot;/&gt;
            &lt;br/&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
...</code></pre>
<h3>Complete form</h3>
<p><img src="static/form-full.jpg" /></p>
<p>See Appendix B for Full HTML source.</p>
<h2>Enter patient data using an HTML form</h2>
<p>Click on <strong>Find/Create Patient</strong> from anywhere within OpenMRS.</p>
<p><img src="static/form-find-patient.jpg" /></p>
<p>Begin typing the patient's ID number or name, then select the patient for whom you are entering data.</p>
<p><img src="static/form-select-patient.jpg" /></p>
<p>Click the <strong>Form Entry</strong> tab.</p>
<p><img src="static/form-click-tab.jpg" /></p>
<p>Select the appropriate form as shown below, then fill in the patient data and click the <strong>Enter Form</strong> button on the page that appears.</p>
<p><img src="static/form-select-form.jpg" /></p>
<p>You can now see the completed form under the <strong>Form Entry</strong> tab of the patient's chart.</p>
<p><img src="static/form-view-form.jpg" /></p>
<p><span id="ch020_cohort-builder.xhtml"></span></p>
<h1>Cohort Builder</h1>
<p>The Cohort Builder is a tool in the <strong>Reporting Compatibility</strong> module (included with most OpenMRS installations) that lets you perform ad-hoc queries for patients with defined characteristics, and combines multiple queries into more complex ones.</p>
<p>A cohort query returns a list of patients matching the specified criteria. It is not possible to create lists of data elements other than patients. For example, you can use the cohort builder to search for all patients with any weight observation &gt; 70, but it is not possible to create a list of all observations of weight &gt; 70.</p>
<p>To use this tool, click <strong>Cohort Builder</strong> at the top of any page.</p>
<h2>Cohort definitions, cohorts, and search history</h2>
<p>Each Patient Search is added to your search history. This history is preserved until you choose to clear it or the web application is restarted. You may also save your search history to preserve it for future re-use.</p>
<p>You may save any search (simple or combined) as a &quot;Cohort Definition&quot; to make it easier to re-run that same search in the future. When you save a combined search, it includes copies of all its component searches.</p>
<p>You may also save the list of patients resulting from a query as a &quot;Cohort&quot;. The list of members in a saved Cohort will never change. On the other hand, re-running a saved search may produce new results.</p>
<p>The initial screen of the cohort builder contains several sections:</p>
<ol>
<li>The top tabs allow you to run different kinds of queries.</li>
<li>Each query you perform goes into the search history.</li>
<li>The save, load, and clear buttons help keep your entire search organized.</li>
<li>After running a query, cohort members are displayed here.</li>
<li>Click this save button to save this cohort for future re-use.</li>
<li>Click these save buttons to save a previous query as a cohort definition for future re-use.</li>
<li>Use the link at the top of the cohort builder to load saved cohorts and cohort definitions.</li>
</ol>
<p><img src="static/cohort%20builder%20overview.png" /></p>
<h2>Searching by observation</h2>
<p>To search for patients who have observations matching certain criteria, choose the <strong>Concept/Observation</strong> tab. Start typing the name of a concept that you want to search for [1], and choose that concept from the search results [2].</p>
<p>If you choose a concept whose datatype is anything other than N/A, you can search for observations whose question is the concept you selected [3]. Depending on the datatype, you can limit this to a numeric or date range, or to specific coded answers. You can also choose which observations you are looking for (first, last, min, max, any, none) or combine (average), and you can specify date ranges.</p>
<p>This example will build a cohort of patients whose last systolic blood pressure measurement was above 130 mmHg:</p>
<p><img src="static/cohort%20builder%20obs%20question.png" /></p>
<p>You can also search for any observations that have your chosen concept as an <em>answer</em>. (You'd typically use this for doing a highly selective search, which you'll later filter down to something more specific.)</p>
<p>In this example we search for patients who have any observation whose answer is Hypertension, which might include both confirmed diagnoses of hypertension as well as consults to rule out Hypertension:</p>
<p><img src="static/cohort%20builder%20obs%20answer.png" /></p>
<h2>Searching by demographics</h2>
<p>Select the <strong>Patient Attributes</strong> tab to search based on simple demographic characteristics: gender, age, birthdate, and vital status.</p>
<p>In this example, we search for living male patients between 45 and 65 years old: </p>
<p><img src="static/cohort%20builder%20demographics.png" /></p>
<h2>Searching by encounters</h2>
<p>Select the <strong>Encounters</strong> tab to search for patients based on encounters they have had. You can search by encounter type (control-click to select multiple types), location, the form with which the encounter was recorded, date ranges, and the number of matching encounters to look for.</p>
<p>In this example we search for patients who have had at least 3 encounters whose types were either ADULTINITIAL or ADULTRETURN:</p>
<p><img src="static/cohort%20builder%20encounters.png" /></p>
<h2>Searching by program enrollments</h2>
<p>Select the <strong>Program Enrollment</strong> tab to search for patients enrolled in a particular program, or patients who have a particular status.</p>
<p>In this example, we search for patients who have ever been in the Hypertension Program:</p>
<p><img src="static/cohort%20builder%20program.png" /></p>
<h2>Combining searches</h2>
<p>After you have done several searches, the <strong>Composition</strong> tab allows you to combine them using Boolean algebra. You can use AND, OR, NOT, or parentheses to build complex combinations of the other searches in your history. Refer to your previous searches using the number next to them in the <strong>Search History</strong> section.</p>
<p>Here, we search for patients who match a combination of the previous example queries:</p>
<p><img src="static/cohort%20builder%20composition_1.png" /></p>
<p><span id="ch021_reporting.xhtml"></span></p>
<h1>Reporting</h1>
<p>This chapter describes how to use the <strong>Reporting</strong> module to produce a simple report on several indicators--the type you might use for monitoring and evaluating a program.</p>
<p>Although this chapter will cover the basics, as your OpenMRS implementation grows, you'll want to take advantage of the Reporting module's additional features like:</p>
<ul>
<li>Multiple types of indicator-based reports,</li>
<li>Quick ways to break down indicators based on gender, age groups, etc.,</li>
<li>Several kinds of patient reports,</li>
<li>The ability to schedule regular reporting,</li>
<li>Easy formatting options for printed output using Excel templates, and</li>
<li>An API that Java developers can extend to add custom reports, indicators, and displays.</li>
</ul>
<p>The module's full functionality is beyond the scope of this book. You can find further documentation on the OpenMRS Wiki:</p>
<p><a href="http://go.openmrs.org/book-reporting" class="uri">http://go.openmrs.org/book-reporting</a></p>
<p>This chapter follows after the ones on Data Entry, because you cannot actually build reports without some data to run them on. But while planning the project you should follow the best practice of determining what <em>outputs</em> you want, and working backwards from there to determine the minimal set of data that you need to collect to produce those outputs.</p>
<h2>Background and terminology</h2>
<p>The reporting module is built around the idea of <strong>Definitions</strong> that are evaluated to produce output.</p>
<h3>Reports and data sets </h3>
<p>In general a <strong>Report Definition</strong> can have multiple <strong>Data Set Definitions</strong>. When run, this will produce a report with multiple data sets, which is rendered to a format chosen by the user.</p>
<h3>Cohorts</h3>
<p>Almost all reports produced with OpenMRS refer to groups of patients. A report may be run on different patient groups, or require identifying or counting sub-groups of patients. The module lets you define cohort queries (as discussed in the chapter &quot;Cohort Builder&quot;). When the report is run, these queries will be evaluated to produce actual cohorts of patients.</p>
<h3>Indicators</h3>
<p>In this chapter, we look at a report that is based on <strong>Indicators</strong>, and specifically indicators that look at the count of patients in a cohort in a period of time.</p>
<h3>Parameters and mapping</h3>
<p>Unlike in the OpenMRS Cohort Builder, reports and their underlying queries are intended to be created once, and reused. To support this idea, reports and queries usually take parameters. For example, a report intended to be run monthly would have <strong>Start Date</strong> and <strong>End Date</strong> parameters, and the user would be asked for these when they generate the report.</p>
<p>The underlying queries in the report also typically take parameters. If the report is going to display the number of patients enrolled in the Child Nutrition Study at the end of a given month, it would need to have an underlying Cohort Query for &quot;patients enrolled in Child Nutrition Study on a date&quot;. That date would be an <strong>Effective Date</strong> parameter.</p>
<p>When the user runs the report, they are asked for a <strong>Start Date</strong> and an <strong>End Date</strong>, but they are not asked to specify an <strong>Effective Date</strong>. When designing the report, you will need to define how parameters in the underlying queries obtain their values, based on the values provided by the user when running the report. This process is called mapping.</p>
<p>The idea of mapping parameters is complicated. The following resources include more information about why it is necessary, and how to do it:</p>
<ul>
<li><a href="http://go.openmrs.org/book-mapping" class="uri">http://go.openmrs.org/book-mapping</a></li>
<li><a href="http://go.openmrs.org/book-mapvid" class="uri">http://go.openmrs.org/book-mapvid</a></li>
</ul>
<h2>Amani Clinic's weekly report</h2>
<p><img src="static/case-study.png" />Before adopting OpenMRS, Amani Clinic used to spend significant time at the end of every month tabulating paper registers and patient charts to produce a monthly report for the Ministry of Health. When planning their OpenMRS implementation, they decided that to improve their program, they needed more immediate feedback. The clinic and Ministry of Health met and decided on five indicators on which they wanted a report every week. They modified their paper data collection forms to make sure that they were capturing the right data to produce those indicators, as well as the periodic Ministry of Health reports.</p>
<p>We'll focus on two of the indicators they calculated:</p>
<ol>
<li>Number of female patients seen during the week, and</li>
<li>The percentage of those who were &gt;16 years old, not pregnant, and using appropriate family planning </li>
</ol>
<h2>Defining the underlying cohort queries</h2>
<p>Calculating the first of those indicators was very straightforward: they defined this to be any female patient having an encounter between the start and end of the week.</p>
<p>The second indicator was more complicated: they had to break down both the numerator and the denominator into multiple Cohort Queries. For the denominator they needed:</p>
<ul>
<li>Not pregnant (&quot;no obs for Estimated Date of Confinement with a value in the future&quot;)</li>
<li>Female</li>
<li>Age &gt; 16 at the end of the week</li>
<li>Had an encounter during the week (same as the query for the first indicator)</li>
</ul>
<p>The numerator required just one more Cohort Query, for patients who self-reported use of contraceptive methods other than &quot;Natural Planning / Rhythm&quot; during the week.</p>
<h2>Building the report in the user interface</h2>
<p>Having determined how to calculate their indicators, they proceeded to build them in the Reporting module's user interface. First, they build the low-level queries [1]. They then composed the two indicator definitions [2] from those cohort queries. Finally, they created a report definition [3] that included the two indicators.</p>
<p><img src="static/report%20admin.png" /></p>
<h2>Building cohort queries</h2>
<p>The <strong>Cohort Query</strong> management page shows you the different types of queries available. Clicking on any of the <strong>[+]</strong> links lets you create a new query of that type.</p>
<p><img src="static/report%20cohort%20queries.png" /></p>
<p>The simplest query built by Amani Clinic included only female patients:</p>
<p><img src="static/report%20females.png" /></p>
<p>The rest of the queries needed to include parameters. For example, the query to find patients with any encounter between two given dates, the &quot;on or after&quot; and &quot;on or before&quot; fields were set as a <strong>Parameter</strong> [1] and a user-friendly names &quot;Start Date&quot; and &quot;End Date&quot; were provided.</p>
<p><img src="static/report%20encounters.png" /></p>
<p>Some of the queries built in this example included parameters that weren't directly equivalent to the <strong>Start Date</strong> and <strong>End Date</strong> of the report. The &quot;not pregnant&quot; query was a <strong>Date Observation Query</strong> that included a single parameter, which they later mapped to the <strong>End Date</strong> of the report.</p>
<p><img src="static/report%20pregnant.png" /></p>
<h3>Combining cohort queries</h3>
<p>After Amani Clinic created the underlying queries that their report required, they built several Composition Cohort Queries to tie them together. The most complicated query calculated the denominator of the second indicator, &quot;non-pregnant women, age &gt; 16, seen during the week&quot;.</p>
<p>This is their composition query, which includes the two parameters <strong>Start Date</strong> and <strong>End Date</strong>. It includes four underlying queries, with values in those queries mapped to these two parameters. Finally, the queries are combined by AND-ing them all together. </p>
<p><img src="static/report%20composition.png" /></p>
<p>Here, we see the seven cohort queries they built:</p>
<p><img src="static/report%20all%20cohort%20queries.png" /></p>
<h3>Indicators</h3>
<p>Having built cohort queries to do the underlying calculations, they used these to build the two indicators. The <strong>Indicators</strong> page is accessed from the <strong>Manage Report Definitions</strong> section of the <strong>Administration</strong> page.</p>
<p>Since indicators are generally calculated over a time period, at a particular location, the indicators they created contain the default <strong>Start Date</strong>, <strong>End Date</strong>, and <strong>Location</strong> parameters. (Since the Amani Clinic was only managing a single site in OpenMRS, they ignored the <strong>Location</strong> parameter.)</p>
<h4>Count indicators</h4>
<p>The simplest type of indicator is a <strong>Count</strong> indicator, which counts the number of patients who match a Cohort Query.</p>
<p>They used a <strong>Count</strong> indicator to build their first indicator, shown below. The underlying cohort query is a composition query including &quot;Females&quot; and &quot;Any Encounter Between Dates&quot;. </p>
<p><img src="static/report%20seen%20indicator.png" /></p>
<h4>Fraction indicators</h4>
<p>The most useful type of indicator for monitoring program progress is the <strong>Fraction</strong> indicator, which takes two cohort definitions representing a numerator and a denominator, and displays this as a fraction. (It ensures that the numerator patients are a subset of the denominator.)</p>
<p>Amani Clinic built their second indicator as a fraction indicator. The underlying cohort query for the numerator was a simple Coded Observation Query, while the denominator was the Composition Query described above.</p>
<p><img src="static/report%20indicator%20contraception.png" /></p>
<h3>Period indicator report</h3>
<p>Having created their indicators, they built a report that combined them. They used a <strong>Period Indicator Report</strong>, which a simple way to show the indicators you have already defined.</p>
<p><img src="static/report%20indicator%20report.png" /></p>
<h2>Running the report</h2>
<p>To run this report, the Amani Clinic data manager clicks the <strong>Reporting</strong> link on the top of the screen and selects the <strong>Program Monitoring Report</strong>. They must enter the start and end date of the week for which to generate the report.</p>
<p><img src="static/report%20run.png" /></p>
<p>The output of the report includes clickable links to the lists of patients matching each indicator.</p>
<p><img src="static/report%20run%20results.png" /></p>
<p><span id="ch022_patient-alerts-and-flags.xhtml"></span></p>
<h1>Patient Alerts and Flags</h1>
<p>It's important to actively use your data to provide feedback to users of the system, both for clinical purposes and data quality purposes. One way to do this is with the <strong>Patient Flags</strong> module, which can display <strong>Flags</strong> on a patient dashboard when certain criteria are met, and to find all patients that match a set of criteria. We will briefly describe this module here, but you can find further documentation at the following location:;</p>
<p><a href="http://go.openmrs.org/book-ptflags" class="uri">http://go.openmrs.org/book-ptflags</a></p>
<p>Using this module requires significant technical knowledge. This chapter assumes that you are familiar with CSS, SQL, Groovy/Java, and the OpenMRS API.</p>
<p>First, you need to install <strong>Patient Flags</strong> module from the OpenMRS module repository, and then go to its section on the <strong>Administration</strong> page. First, define categories of alerts [1]. Then, you can define logic and messages for these alerts [2].</p>
<p><img src="static/flags%20admin.png" /></p>
<h2>Categorizing flags by priorities</h2>
<p>From the <strong>Manage Priorities</strong> link, you can define different categories of alerts, each of which can be decorated with custom CSS.</p>
<p>In this example we define two different categories of alerts, the more critical of which will be highlighted in orange, and the other in gray. Note that you need to include the <strong>style=&quot;...&quot;</strong> in your style property.</p>
<p><img src="static/flags%20priority_1.png" /></p>
<h2>Defining flags</h2>
<p>To set up a flag, you need to define a calculation that returns the Cohort of patients for whom the flag should be shown. There are multiple ways to do this, each requiring a different type of technical knowlege.</p>
<p>All flags, regardless of how they are calculated, let you specify text and a <strong>Priority</strong>. The text is displayed on a patient dashboard for patients to whom the flag applies, and the <strong>Priority</strong> controls the formatting of the flag if displayed.</p>
<p>Finally, you can decide whether flags are <strong>Real-Time</strong>, which means that the flags to be displayed are calculated whenever you view a patient dashboard. If you don't make a flag real-time, you can still execute the flag calculations on-demand as a batch.</p>
<h3>SQL flags</h3>
<p>The calculation behind this type of flag is a SQL statement that will be executed against the database, and must include a <strong>select (something).patient_id ...</strong> statement. The results of this query will be intersected with all non-voided patients to produce the Cohort for the flag.</p>
<p>Many system administrators know how to write SQL queries, and over time they become familiar with the OpenMRS data model, making this type of flag very accessible. At the same time, writing this type of flag can be error-prone. There is nothing to prevent you from omitting a clause, such as to ensure you are only looking at non-voided data.</p>
<p>In this example we are searching for all patients who have carried at least 4 pregnancies.</p>
<p>Since SQL flags must include <strong>.patient_id</strong> in their <strong>select</strong> clause, we have to join the <strong>obs</strong> table against the <strong>patient</strong> table, even though we aren't using that table.</p>
<p><img src="static/flags%20sql.png" /></p>
<h3>Groovy flags</h3>
<p>The most powerful type of flag allows you to write Groovy or Java code, which can call OpenMRS's Java API and perform complex calculations on patient data. The advantage of writing flags in Groovy is that the OpenMRS API takes care of details like ensuring you're only getting non-voided date. The limitation is that most managers of OpenMRS systems don't know how to write Groovy/Java code.</p>
<p>A Groovy flag returns a Cohort of all patients that match the calculation. In this example we find all patients who are expected to give birth in the next 3 months, but who have <em>not</em> had an encounter in the last 3 months.</p>
<p><img src="static/flags%20groovy.png" /></p>
<p><span id="ch024_user-management-and-access-control.xhtml"></span></p>
<h1>User Management and Access Control</h1>
<p><strong>Roles</strong> and <strong>Privileges</strong> are controlled through the <strong>Administration</strong> page, under the <strong>Manage Users</strong> section.</p>
<p>OpenMRS uses privileges and roles to control access to data within the system. Privileges define what can or cannot be done in the system (e.g., <strong>Edit Patients</strong> or <strong>Add Users</strong>) while roles are used to group privileges into more manageable groupings. To make the system easier to manage, roles can contain other roles as well as privileges. Roles inherit all the privileges of their parent roles.</p>
<p>We will use this example: you are working with several privileges related to patient data—e.g., <strong>View Patients</strong>, <strong>Edit Patients</strong>, and <strong>Add Patients</strong>. The <strong>View Patients</strong> privilege lets users look at patients in the system, the <strong>Edit Patients</strong> privilege lets users edit information about existing patients, and the <strong>Add Patients</strong> privilege allows users to create a completely new patient record within the system.</p>
<p>Now imagine that you need to assign the proper rules to three people: Mary the Medical Student, Bob the Data Assistant, and Erica the Data Manager. You want medical students to be able to view patients, but not edit or add them. Data assistants should be able to not only view, but also edit patient data. And you want your data managers to be able to create new patients within your system.</p>
<h2>Designing role and privilege schemes</h2>
<p>In order to give these privileges to the relevant users, you must define a role for each of these types of user.</p>
<table>
<tbody>
<tr class="odd">
<td><strong> Role</strong></td>
<td><strong> Privilege(s)</strong></td>
</tr>
<tr class="even">
<td>Medical Student</td>
<td>View Patients </td>
</tr>
<tr class="odd">
<td>Data Assistant</td>
<td>View Patients<br />
Edit Patients</td>
</tr>
<tr class="even">
<td>Data Manager</td>
<td>View Patients<br />
Edit Patients<br />
Add Patients<br />
</td>
</tr>
</tbody>
</table>
<p>Now, by defining the main roles for users of your system and assigning users to those roles, you have a much easier system to manage and users will automatically inherit all privileges given to their role(s). Of course, some users will have multiple roles. Now, let's take this process one step further. While it may not seem necessary in this simple example, as your system grows, you will likely end up with a large number of different roles. Very often, certain roles can be defined as a combination of other roles. In our example, a <strong>Data Manager</strong> oversees the <strong>Data Assistants</strong> and therefore should have all of their privileges plus some additional privileges. So, let's redesign our roles slightly to show how this might work.</p>
<table>
<tbody>
<tr class="odd">
<td> <strong>Role</strong></td>
<td> <strong>Inherit Privileges from Role(s)</strong></td>
<td><strong>Additional Privilege(s)</strong> </td>
</tr>
<tr class="even">
<td> Medical Student</td>
<td> </td>
<td>View Patient </td>
</tr>
<tr class="odd">
<td> Data Assistant</td>
<td> </td>
<td>View Patient<br />
Edit Patient </td>
</tr>
<tr class="even">
<td> Data Manager</td>
<td>Data Assistant </td>
<td>Add Patient </td>
</tr>
</tbody>
</table>
<p>You can see that the <strong>Data Manager</strong> role can be more clearly defined as a <strong>Data Assistant</strong> with the extra ability to add patients to the system. In addition, if you should change or enhance the privileges of the <strong>Data Assistant</strong> role at any time in the future, the <strong>Data Manager</strong> will automatically adapt to those changes — for example, if you decided a month later to allow any <strong>Data Assistant</strong> to <strong>Edit Encounters</strong> (by adding the <strong>Edit Encounters</strong> privilege to the <strong>Data Assistant</strong> role), the <strong>Data Manager</strong> role would automatically gain the ability to edit encounters as well.</p>
<p>In a common deployment scenario, you would define a role like Provider that is inherited by Physician, Nurse, Clinical Officer, etc. You can then control most of the privileges within the Provider role and those changes will effect all types of providers in the system. If you find that you have to go through multiple roles and edit them to make a change, then you could likely benefit from defining a new role that the others can all inherit from. For example, if you found that you were constantly editing roles like<strong> Provider</strong><em>, </em><strong>Data Assistant</strong>, and <strong>Caregiver</strong> whenever you adjusted how patient data are allowed to be viewed in your system (i.e., affecting all users/roles that are allowed to view patient data), you might benefit from creating a new <strong>Patient Data Viewer</strong> role, assigning it to each of those other roles, and then managing the privileges in one place (under that new role).</p>
<h3>Built-in roles</h3>
<p>There are some special roles that are predefined within OpenMRS and cannot be deleted: <strong>Anonymous, Authenticated,</strong> and <strong>System Developer</strong>. Any privileges granted to the <strong>Anonymous</strong> role will be available to people without logging into the system. Generally, <strong>Anonymous</strong> privileges should be kept very restricted, since patient information might otherwise be compromised. Privileges granted to the <strong>Authenticated</strong> role are granted to anyone that logs into your system, no matter what other role(s) they might be assigned. Granting privileges to the <strong>Authenticated</strong> role is an easy way to grant privileges to all users of the system. The <strong>System Developer</strong> role is automatically granted full access to the system and should only be granted to system administrators.</p>
<p><strong>Super users</strong> (system administrators) are automatically granted all privileges in the system; therefore, you must be very careful to protect your system administrator password.</p>
<p>Some privileges are built into the system and cannot be deleted. Other privileges may be added by modules. It is unlikely that you will be adding new privileges yourself, since privileges are only useful when they are understood and used by the system. On the other hand, you will definitely be creating new roles to fit your needs and will be managing privileges within those roles.</p>
<h2>Creating roles</h2>
<p>You create roles through <strong>Administration &gt; Manage Roles</strong>.</p>
<p><img src="static/manage_roles.png" /></p>
<ol>
<li>Allows to add a new role</li>
<li>Lists all roles present in the system</li>
<li>Click a role to edit it.</li>
</ol>
<p>If you then follow the <strong>Add Role</strong> link, you will see a form for adding a new role.</p>
<p><img src="static/add_role.png" /></p>
<ol>
<li>Enter Role Name</li>
<li>Choose Roles Privileges of which you want to inherit</li>
<li>Choose Privileges which you want this Role to have</li>
</ol>
<h2>Creating users</h2>
<p>To create these users, we'll go through <strong>Administration &gt; Manage Users</strong>. This page also lets you find and edit existing users.</p>
<p><img src="static/manage_users.png" /></p>
<ol>
<li>Create a new User</li>
<li>Search Users by Name or Roles</li>
<li>Search results</li>
<li>Edit a single User</li>
</ol>
<p>Users in OpenMRS need to be associated with Persons. You either need to create a new Person, or attach the user account to an existing one.</p>
<p><img src="static/add_user.png" /></p>
<p>In both cases you will be taken to the same <strong>Add/Edit User</strong> screen. (If you selected an existing person, the fields in the <strong>Demographic Info</strong> section will be filled out for you.)</p>
<p><img src="static/add_edit_user.png" /></p>
<p><span id="ch025_maintenance.xhtml"></span></p>
<h1>Maintenance</h1>
<p><img src="static/maintenance.png" /></p>
<address>
<p>OpenMRS server room in Webuye, Kenya.</p>
</address>
<p>Once you have installed and configured OpenMRS and it is being used to support day-to-day clinical operations, there is still work to be done. To ensure the system runs smoothly and error-free, use the following tips as a starting point to create a maintenance plan for your OpenMRS installation. We recommend documenting this plan and reviewing it regularly.</p>
<h2>Server management</h2>
<p>Although outside the scope of this book, it is important to keep both your OpenMRS server(s) and client systems updated with the latest security patches. In Windows, you should use the Windows Update tool to review and install critical system updates. If you use Linux, use either <strong>apt-get upgrade</strong> or <strong>yum update</strong>, depending on what distribution of Linux you use.</p>
<p>Before upgrading MySQL, Java, or Apache Tomcat (and of course, OpenMRS) you should check with the OpenMRS community to see how those upgrades might effect how OpenMRS runs on your server. See the &quot;Getting Help&quot; section for more information.</p>
<p>You should also periodically check to ensure your server has plenty of free disk space. Additionally, if you are running a Windows server, ensure your system has anti-virus software installed and it is up-to-date.</p>
<h2>Backups</h2>
<p>You should ensure your system has a backup strategy. Much has been written on this subject and general knowledge about backups is beyond the scope of this book. However, there are some specific items to consider when backing up your OpenMRS server.</p>
<p>Most importantly, you need to create a backup strategy for your MySQL database. Perhaps the simplest way to do this is by using the <strong>mysqldump</strong> utility that ships with the database. Ideally, you will want to shut down OpenMRS before backing up, and restart it once the backup has completed. If you are not able to do so, or wish to have the system remain in a &quot;read-only&quot; mode, you may want to use the options of <strong>mysqldump</strong> to lock tables. Consult the MySQL documentation for details.</p>
<p>You should also ensure you are backing up the <strong>.OpenMRS</strong> directory. This directory, which stores modules and configuration files, is stored in the home directory of the user which runs the Tomcat server on Windows or Linux.</p>
<h2>Performance tuning</h2>
<p>Over the past several years, implementers of OpenMRS around the world have compiled information about improving the performance of their systems. There are several components of the system that may need to be tuned to ensure optimal performance. Please use the information in the following sections as a guide and a starting point -- you will likely need to explore what settings work best for your system.</p>
<h3>OpenMRS settings</h3>
<p>You may need to adjust some global properties in OpenMRS. To do this, use the <strong>Manage Global Properties</strong> page under the OpenMRS <strong>Administration</strong> section, find the desired global property and clear or change its value as described in the following tips, then click the <strong>Save</strong> button at the bottom of the page.</p>
<p><img src="static/globalprop-regex.png" /></p>
<ul>
<li>Clear out the <strong>patient.identifierRegex</strong> global property to disable regular expression identifier searches.</li>
<li>Clear out the <strong>patient.identifierPrefix</strong> and <strong>patient.identifierSuffix</strong> global properties to disable &quot;like&quot; identifier searches.</li>
<li>Make sure that the <strong>dashboard.regimen.displayDrugSetIds</strong> global property has concept ID numbers and not names. In other words, use &quot;1085,1159&quot; instead of &quot;ANTIRETROVIRAL DRUGS,TUBERCULOSIS TREATMENT DRUGS&quot;.</li>
<li>Set the <strong>searchWidget.batchSize</strong>, <strong>searchWidget.runInSerialMode</strong> and <strong>searchWidget.searchDelayInterval</strong> global properties to tune your searches for better performance and suit your implementation's environment. You may wish to consider the speed of your network connection, typing skills and average number of simultaneous users on a typical work day. You might also consider reducing the value of the global properties <strong>person.searchMaxResults</strong> and <strong>searchWidget.batchSize</strong> to reduce the load on the search widgets and server for better performance.</li>
</ul>
<h3>Apache Tomcat</h3>
<p>Tomcat has several settings which may be adjusted to optimize its use of memory</p>
<ul>
<li>
<p>Experience has shown it is best to install Tomcat from the download section at <a href="http://tomcat.apache.org">http://tomcat.apache.org/</a> rather than any other source. If using Ubuntu Linux, we do not recommend using the <strong>apt-get</strong> installer.</p>
</li>
<li>
<p>Increase the amount of memory allocated for Tomcat. Depending on how you start or run Tomcat, use one of the following methods:</p>
</li>
<ul>
<li>If running Tomcat from the command line, add the following parameters:</li>
</ul>
</ul>
<pre><code>-Xmx512m -Xms512m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:NewSize=128m</code></pre>
<ul>
<ul>
<li>If running Tomcat as a Windows service, launch the Tomcat Monitor application. Go to <strong>Configure &gt; Java &gt; Java Options</strong> and add the following to the listed settings:</li>
</ul>
</ul>
<pre><code>-Xmx512m -Xms512m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:NewSize=128m</code></pre>
<ul>
<ul>
<li>If running Tomcat as a Linux service, edit the /etc/init.d/tomcat (or equivalent) script and modify the line for <strong>CATALINA_OPTS</strong> to read as follows:</li>
</ul>
</ul>
<pre><code>CATALINA_OPTS=&quot;-Djava.library.path=/opt/tomcat/lib/.libs  -Xmx512m -Xms512m -XX:PermSize=256m -XX:MaxPermSize=256m  -XX:NewSize=128m&quot;</code></pre>
<ul>
<li>Adjust Tomcat to prevent potential memory leaks. Tomcat has a default setting that often causes memory leaks. To turn it off, open the configuration file.<br />
&lt;TOMCAT_HOME&gt;/conf/web.xml<br />
In JSP servlet definition add the following element:</li>
</ul>
<pre><code>&lt;init-param&gt;
 &lt;param-name&gt;enablePooling&lt;/param-name&gt;
 &lt;param-value&gt;false&lt;/param-value&gt;
&lt;/init-param&gt;</code></pre>
<ul>
<li>Experiment with better garbage collection in Tomcat to prevent PermGen out of memory errors. To use a newer version of Tomcat garbage collection, you need to add the following to <strong>CATALINA_OPTS</strong>, as was shown above in the previous step.</li>
</ul>
<pre><code>-XX:+UnlockExperimentalVMOptions -XX:+UseG1GC </code></pre>
<h3>MySQL</h3>
<p>Optimizing MySQL database settings will help OpenMRS to run more efficiently, especially when as your installation grows in the size of data you are storing.</p>
<p>Increase the <strong>innodb_buffer_pool_size</strong>. It is the size in bytes of the memory buffer InnoDB uses to cache data and indexes of its tables. The larger you set this value, the less disk I/O is needed to access data in tables. On a dedicated database server, you may set this to up to 80% of the machine physical memory size. However, do not set it too large because competition for physical memory might cause paging in the operating system. Modify the following in MySQL's <strong>my.ini</strong> file, or add it if it is not present.</p>
<pre><code>max_allowed_packet=64M</code></pre>
<p>Increase the <strong>max_allowed_packet size</strong>. When MySQL attempts to work with a packet of data larger than specified, it causes a <strong>packet too large</strong> error and closes the connection, causing OpenMRS to stop working. Increasing this value allows MySQL to handle larger sets of data. Modify the following in MySQL's <strong>my.ini</strong> file, or add it if it is not present.</p>
<pre><code>innodb_buffer_pool_size=3G </code></pre>
<p>You may also consider running a MySQL performance tuning script and making adjustments to your MySQL configuration file based on its suggestions. One such script is available here:</p>
<p><a href="http://go.openmrs.org/book-tuningscript" class="uri">http://go.openmrs.org/book-tuningscript</a></p>
<h2>Replication options</h2>
<p>Replication of your OpenMRS installation across multiple servers or multiple sites is an advanced topic that is outside the scope of this book. However, you should be aware that several options exist if you require access to your OpenMRS data from alternate locations.</p>
<h3>MySQL replication</h3>
<p>The MySQL database offers methods for replicating your database across multiple servers, meaning it is possible to have multiple synchronized copies of your OpenMRS data. Please consult the MySQL documentation for details. If you point an identically-configured OpenMRS server at this replicated database, you will have a mirrored instance of OpenMRS. It is important to ensure that if you make changes to the primary system, those same changes take place on all servers.</p>
<h3>Sync module</h3>
<p>Another option is available for OpenMRS installations with multiple sites. The community-developed <strong>Sync</strong> module is available from the OpenMRS module repository, and allows data to be synchronized across a network (or external data storage) using tools within OpenMRS itself. Please search the OpenMRS Wiki for more information about the <strong>Sync</strong> module.</p>
<h2>Upgrading OpenMRS</h2>
<p>The OpenMRS implementer and developer communities provide application and customization support via mailing lists, IRC, and other means. See &quot;Getting Help from the OpenMRS Community&quot; for more information.</p>
<p>When the development team release a new upgrade for OpenMRS, they will provide either a new version of the OpenMRS Standalone installer or the OpenMRS Enterprise installer file to run on your server. If using the Standalone version, follow the upgrade instructions included with the application. If using the Enterprise version, you should be able to undeploy the OpenMRS webapp in Apache Tomcat, and deploy the new version.</p>
<p>Be sure to test any upgrades on a server other than the primary server you use for normal clinical support. Always be sure to back up your system before upgrading.</p>
<h2>Updating modules</h2>
<p>Supported community-developed OpenMRS modules are regularly updated, and those new versions are published in the OpenMRS module repository. You should check for upgraded modules regularly. Go to <a href="http://modules.openmrs.org">http://modules.openmrs.org/</a> or view the &quot;Manage Modules&quot; page from the OpenMRS <strong>Administration</strong> page. From there, you can upgrade a module with updates automatically by clicking <strong>Install Update</strong>, or you may manually upload the new version by following the instructions on the page.</p>
<h2>Amani's maintenance plan</h2>
<p><img src="static/case-study.png" />As part of his responsibilities as ICT infrastructure manager for the clinic, Daniel created a written maintenance plan. In this document, he has included daily, weekly, and monthly tasks. The only daily task is an automated one -- Daniel created a script on his Ubuntu server to stop OpenMRS, backup MySQL and other OpenMRS files, and restart the application. This script runs overnight while the clinic is closed. Weekly, Claudine manually checks the disk space and runs <strong>apt-get upgrade</strong> to update system components. Every month, Claudine checks the OpenMRS web site for OpenMRS upgrades and upgrades to the modules the clinic uses.</p>
<p><span id="ch026_troubleshooting.xhtml"></span></p>
<h1>Troubleshooting Your Installation</h1>
<p><img src="static/troubleshooting.png" /></p>
<p>Unfortunately, sometimes things do not go exactly the way you would like them to. This chapter can help you deal with the most common problems.</p>
<p>We recommend using Apache Tomcat 6.0.29 to run OpenMRS. Any J2EE-compliant Java servlet container should be able to run it, but most people who use OpenMRS are running it with Tomcat, which makes it may be easier to get support if you encounter problems.</p>
<p>If you are not yet using Tomcat 6.0.29, consider upgrading Tomcat before you continue. We recommend getting Tomcat from this link.</p>
<p><a href="http://tomcat.apache.org">http://tomcat.apache.org/</a> </p>
<p>When troubleshooting Tomcat, your first step should always be to review the Tomcat logs. In Windows, these are stored at the following location.</p>
<p>C:\Program Files\Apache Software Foundation\Tomcat 6.0\logs</p>
<p>Historically, MySQL has been recommended as the database of choice to use with OpenMRS. The newer database from the open source project MariaDB should also be compatible with OpenMRS. Work is underway in the OpenMRS community to provide support for other databases such as Oracle, Microsoft SQL Server, and others, but these databases are not yet supported.</p>
<p>You may not be able to resolve your problem with OpenMRS using the troubleshooting material in this chapter. That is OK -- the OpenMRS community is available to help! Check out the &quot;Getting Help from the OpenMRS Community&quot; chapter for more information about how to communicate with others, ask questions, and get answers.</p>
<h2>Some possible problems and solutions</h2>
<h3>OpenMRS fails to install with message &quot;Error creating bean with name 'messageSourceServiceTarget'&quot;</h3>
<p>MySQL must be running before starting and installing OpenMRS. If it is not, you may see the following error message in your web browser and log files when you attempt to install OpenMRS:</p>
<pre><code>org.springframework.beans.factory.BeanCreationException:Error creating bean with name &#39;messageSourceServiceTarget&#39; defined in class path resource applicationContext-service.xml</code></pre>
<p>Ensure MySQL is installed and running before attempting to start and install OpenMRS. </p>
<h3>MySQL Configure Instance hangs on starting the service, or reports Error 1045</h3>
<p>On Windows, the computer may stop responding while running the MySQL Configure Instance tool. Most commonly, this occurs before the tool marks <strong>Starting the service</strong> as complete, because there is already a MySQL service running. </p>
<p>To fix this, you should delete the pre-existing MySQL service in Windows, and try the installation again. You can find instructions on how to do delete a MySQL service at this link.</p>
<p>http://www.howtogeek.com/howto/windows-vista/how-to-delete-a-windows-service-in-vista-or-xp/</p>
<p>Alternatively, you may see a MySQL Error 1045, if your computer has previously had a MySQL instance installed. This means that the root password is incorrect, and is most commonly caused by residual data from the previous installation.</p>
<p>To fix this, you should delete the MySQL data directory. On Windows 7, you may need to reboot and delete the directory, or to use an unlocking program in order to delete this directory.</p>
<p>You can also change the password that OpenMRS uses to access your MySQL database, by editing the <strong>openmrs-runtime.properties</strong> file, as described later in this chapter.</p>
<h3>Starting Tomcat service on Windows fails</h3>
<p>If you cannot start the Tomcat service on Windows, try checking the Tomcat logs. You can find the logs in the following directory.</p>
<p>&lt;TOMCAT HOME&gt;\logs </p>
<h3>Errors like &quot;Failed creating java C:\Program Files\Java\jre1.6.0\bin\client\jvm.dll&quot;</h3>
<p>To fix this problem, search for <strong>msvcr71.dll</strong> on your hard drive, and copy that file to this location.</p>
<p>C:\Windows\System32 </p>
<h3>Installing OpenMRS or running database updates fails with message “Could not acquire change log lock”</h3>
<p>To prevent conflicting updates, liquibase begins each update by creating a row in the <strong>liquibasechangeloglock</strong> table. This row acts as a lock. If OpenMRS or Apache Tomcat crashes while an update is in progress, the update may fail to complete, and this row will not be removed from the table.</p>
<p>You may see the following error message in your web browser or in the Tomcat logs, the next time you start up or attempt to install or update OpenMRS:</p>
<pre><code>&quot;Error Could not acquire change log lock&quot;</code></pre>
<p>Deleting this row from the <strong>liquibasechangeloglock</strong> table will solve the problem, and allow installation or updates to proceed normally. To delete rows from the <strong>liquibasechangeloglock</strong> table using a command line SQL client, run either of the following SQL commands:</p>
<pre><code>truncate table liquibasechangeloglock;</code></pre>
<pre><code>delete from liquibasechangeloglock;</code></pre>
<p>If you prefer to use a GUI client for MySQL, you should navigate to the <strong>liquibasechangeloglock</strong> table and delete all rows from that table. When you have cleared the table, restart Tomcat if necessary, and restart OpenMRS.</p>
<h3>Problems connecting to Tomcat on port 8080</h3>
<p>Other programs you have already installed may already be using port 8080. This will prevent Tomcat using this port. Some software may also use port 8005, which should not interfere with running Tomcat, but may prevent it from starting up correctly.</p>
<p>If you know what program is using these ports, you may choose to stop or remove that program. Alternatively, you can configure Tomcat to run on a different port, by editing Tomcat’s <strong>server.xml</strong> file to change 8080 to a different value (eg 8090).</p>
<p>If you need further help, see the &quot;Getting Help from the OpenMRS Community&quot; chapter for more information.</p>
<h3>Permission problems when running Tomcat as a service on Ubuntu</h3>
<p>If you are trying to run Tomcat as a server on Ubuntu, you may run into permission issues. The following error is typical of these problems:</p>
<pre><code>java.security.AccessControlException: access denied (java.io.FilePermission /usr/share/tomcat6/webapps/openmrs/WEB-INF/dwr-modules.xml delete)</code></pre>
<p>The easiest way to solve this issue is to disable the Java security manager or similar startup script, which you can find at this location.</p>
<p> /etc/init.d/tomcat6 </p>
<p>Edit the file and set <strong>TOMCAT6_SECURITY</strong> to <strong>no</strong>.</p>
<pre><code># Use the Java security manager? (yes/no)
TOMCAT6_SECURITY=no</code></pre>
<h3>Tomcat stops responding after updating or reloading OpenMRS in the Web Application Manager</h3>
<p>Tomcat and the JVM allocate memory to a webapp each time you use the <strong>Update</strong> or <strong>Reload</strong> functions in the <strong>Web Application Manager</strong>. When the app is destroyed or recreated, some of this memory may not be released. If you update or reload the webapp too many times, Tomcat may run out of allocated memory, and will stop responding. You will also see the following error in the Tomcat logs:</p>
<pre><code>java.lang.OutOfMemoryError: PermGen space</code></pre>
<p>It is not possible to completely avoid this problem. However you can mitigate it by allowing Tomcat to use more memory, or by restarting Tomcat if you have to repeatedly update or reload a webapp.</p>
<h3>Deploying OpenMRS using the Tomcat Manager web application fails</h3>
<p>For various reasons, trying to deploy OpenMRS using the Tomcat Manager web application may fail. If this occurs, you should undeploy OpenMRS using the Tomcat Manager, then stop Tomcat.</p>
<p>You can do this on the command line under Linux or OS X. First, find the process ID (PID) by running the following command:</p>
<pre><code>ps ax | grep tomcat</code></pre>
<p>This may return several lines, each starting with a number. Look for a long line that contains something like /usr/local/tomcat or /opt/tomcat. The PID is the first number on that line. Stop Tomcat with the following command:</p>
<pre><code>kill -9 PID</code></pre>
<p>Finally, you can restart Tomcat as follows:</p>
<pre><code>service tomcat6 start</code></pre>
<p>Log back into the Tomcat Manager web application and deploy OpenMRS normally.</p>
<h3>OpenMRS (openmrs.war) deploys successfully but fails to start</h3>
<p>If there are issues with the OpenMRS settings for application_data_directory, openmrs.war may successfully deploy, but thereafter fail to start. The following messages are seen in Tomcat's logs:</p>
<pre><code>SEVERE: Error listenerStart
SEVERE: Context [/openmrs] startup failed due to previous errors</code></pre>
<p>Ensure that the runtime properties file exists, and that the application_data_directory is specified in this file. Further, ensure that the directory exists, and that Tomcat has read and write permissions to the directory.</p>
<p>If the directory exists as specified in the runtime properties file, and Tomcat has the appropriate permissions, you may have security violation problems in your Tomcat configuration. If you need further advice, consider seeking help from the community, as described in the chapter &quot;Getting Help from the OpenMRS Community&quot;.</p>
<p>Unable to log in to Tomcat Manager due to lost password</p>
<p>The Tomcat admin password is required to log in to the Tomcat Manager web application, to deploy and undeploy applications, including OpenMRS.</p>
<p>If you have forgotten, lost, or misplaced this password, you can retrieve it from the file tomcat-users.xml. On Windows, this is probably located at this location.</p>
<p>C:\Program Files\Apache Software Foundation\Tomcat 6.0\conf\</p>
<h3>The database password or other properties are set incorrectly</h3>
<p>If you have installed the OpenMRS Standalone application, you can modify settings by editing the <strong>openmrs-standalone-runtime.properties</strong> file in the directory where you extracted the ZIP package.</p>
<p>To modify settings for the OpenMRS Enterprise version, you should edit the file <strong>openmrs-runtime.properties</strong>. You should find this file in one of the following locations:</p>
<p>On Windows systems:</p>
<ul>
<li>C:\Documents and Settings\YOURUSERNAME\Application Data\OpenMRS</li>
<li>C:\Windows\system32\config\systemprofile\Application Data\OpenMRS</li>
</ul>
<p>On Mac OS X or Linux systems:</p>
<ul>
<li>~/YOURUSERNAME/.OpenMRS</li>
<li>/usr/share/tomcatX/.OpenMRS</li>
</ul>
<h3>The OpenMRS administrator account password has been forgotten</h3>
<p>In general, when a user is locked out, the password should be reset by the administrator using the &quot;Edit User&quot; page from the OpenMRS <strong>Administration</strong> page. However, in rare situations that administrator's account may have been forgotten. The only way to reset the password for this account is to directly modify the OpenMRS database. This should only be attempted by advanced users, and you should always back up your database before making changes.</p>
<p>You will need to modify the <strong>users</strong> table in the OpenMRS database schema. Find the row for the user in question and change the <strong>password</strong> and <strong>salt</strong> values to the following:</p>
<ul>
<li><strong>password</strong>: 4a1750c8607d0fa237de36c6305715c223415189</li>
<li><strong>salt</strong>: c788c6ad82a157b712392ca695dfcf2eed193d7f   </li>
</ul>
<h3>Some module pages throw java.lang.ClassNotFoundException</h3>
<p>There are currently some issues with compatibility between OpenMRS and versions of Apache Tomcat later than 6.0.29. OpenMRS modules that rely on certain custom expression language functions will throw a <strong>java.lang.ClassNotFoundException</strong> exception.</p>
<p>If you encounter this issue using a version of Tomcat greater than v6.0.29, you may need to disable any modules that rely on custom expression language functions, or install Tomcat 6.0.29 for use with OpenMRS.</p>
<h3>Starting OpenMRS fails with message “Module file does not have the correct .omod file extension”</h3>
<p>OpenMRS will not start if there are non-modules in the modules directory. You may find a message in the logs similar to these:</p>
<pre><code>org.openmrs.module.ModuleException: Module file does not have the correct .omod file extension Module: derby.log</code></pre>
<pre><code>org.openmrs.module.ModuleException: Module file does not have the correct .omod file extension Module: velocity.log</code></pre>
<p>To solve this problem, delete or move any files in the modules directory that are not modules with an <strong>.omod</strong> extension. </p>
<p>In particular, the <strong>BIRT Runtime</strong> creates various log files in the modules directory when the <strong>BIRT</strong> module is stopped. If you are using the <strong>BIRT Report</strong> module, there may be non-module files in the OpenMRS modules directory--typically, <strong>derby.log</strong> or <strong>velocity.log</strong>. These files can safely be moved to another location, or may be deleted.</p>
<p>To prevent the <strong>derby.log</strong> from being created in future, delete the directory <strong>org.apache.derby.core_10.1.2.1</strong> which is located under the following directory. </p>
<p>birt-runtime-2_2_0/ReportEngine/plugins/</p>
<h3>MySQL packet length errors, or MySQL Error 2006</h3>
<p>These errors occur when the client or server tries to handle data larger than the maximum packet length. The default maximum packet length is 1MB. Some items (such as form data) can easily exceed this maximum, causing errors when importing data into or exporting data from the OpenMRS database.</p>
<p>To increase the maximum packet length allowed by your MySQL server, you should stop the server, edit the configuration file, then restart the server. The configuration file is typically located at one of these locations.</p>
<ul>
<li>Windows: C:\Program Files\MySQL\MySQL Server x.x\my.ini</li>
<li>Linux or Mac OS X: /etc/my.cnf</li>
</ul>
<p>Some MySQL packages come with alternative configurations (INI configurations)--make sure you edit the one that you will be using!</p>
<p>This file should already contain a section with the header <strong>[archive:mysqld]</strong>. You can add the following line below that header:</p>
<pre><code>max_allowed_packet=64M</code></pre>
<p>You can also increase the maximum packet length using the MySQL Administrator application, by opening the Health section and changing the <strong>max_allowed_packet</strong> setting on the System Variables tab. This setting can be increased up to a maximum of <strong>1024M</strong> as necessary.</p>
<p>Depending on your MySQL client, you may also need to adjust the maximum packet length of the client. If you are using the MySQL command line client, you can start it with an increased <strong>max_allowed_packet</strong> by adding the following after the mysql command:</p>
<pre><code>--max_allowed_packet=64M </code></pre>
<h3>Problems connecting to MySQL on a system with multiple MySQL installations</h3>
<p>If MySQL is already installed and running on your system, OpenMRS Standalone's initial setup may be unable to create the OpenMRS user and database. You may also encounter this problem after installation, if you have installed a &quot;traditional&quot; MySQL server and try to run OpenMRS Standalone.</p>
<p>This problem happens because MySQL clients on UNIX-based systems always use UNIX sockets to connect to MySQL when <strong>localhost</strong> is specified in the connection URL. This is a known issue/limitation/bug in MySQL and is documented in more detail by the MySQL project.</p>
<p><a href="http://bugs.mysql.com/bug.php?id=31577" class="uri">http://bugs.mysql.com/bug.php?id=31577</a> </p>
<p>It is possible to run OpenMRS in a separate database instance than the one already existing on your system (for example, to run OpenMRS Standalone on a system where MySQL is already installed). To do so, you must first ensure that the new database instance is running on a different port.</p>
<p>Then, ensure that you are connecting to MySQL via TCP/IP instead of using the same UNIX socket as the existing instance. The easiest way to do this is to use <strong>127.0.0.1</strong> instead of <strong>localhost</strong> in the connection string. An alternative is to add <strong>&amp;server.port=XXXX</strong> to the value of <strong>connection.url</strong> in the <strong>openmrs-runtime.properties</strong> file, where <strong>XXXX</strong> is the port used by the OpenMRS MySQL instance.</p>
<p>For example, if the MySQL instance used by OpenMRS is running on port <strong>4242</strong>, the <strong>openmrs-runtime.properties</strong> file should include one of the following lines:</p>
<pre><code>connection.url=jdbc:mysql://127.0.0.1:4242/openmrs?autoReconnect=true&amp;sessionVariables=storage_engine=InnoDB&amp;useUnicode=true&amp;characterEncoding=UTF-8</code></pre>
<pre><code>connection.url=jdbc:mysql://localhost:4242/openmrs?autoReconnect=true&amp;sessionVariables=storage_engine=InnoDB&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;server.port=4242</code></pre>
<h3>Tomcat error log contains IOException while loading persisted sessions</h3>
<p>Apache Tomcat tries to restore the exact memory state after each restart. OpenMRS does not depend on this feature, so you can ignore any warnings printed to the Tomcat logs that look similar to the following:</p>
<pre><code>SEVERE: IOException while loading persisted sessions: java.io.WriteAbortedException: writing aborted; java.io.NotSerializableException:</code></pre>
<p>If you find these messages annoying, you can turn off session persistence. Edit the <strong>&lt;TOMCAT_HOME&gt;/conf/server.xml</strong> file and uncomment the line that includes:</p>
<pre><code>&lt;Manager pathname=&quot;&quot; /&gt; </code></pre>
<h3>Java Heap Size errors</h3>
<p>OpenMRS uses a lot of memory for caching. Certain tasks, such as exporting data, may cause a Java Heap Size error. You can mitigate this by increasing the default memory allocation in Tomcat.</p>
<p>If you are starting Tomcat on the command line, you should pass the following parameters to increase the default memory allocation: </p>
<pre><code>-Xmx512m -Xms512m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:NewSize=128m</code></pre>
<p>If you are running Tomcat as a Windows Service, you can increase the memory allocation by adding this same line to the list of start parameters. Make sure that you add this to the end of the existing parameters exactly. An extra space at the end of the line can prevent Tomcat from starting properly. You can find the list of start parameters in the Tomcat Monitor application, by going to <strong>Configure Tomcat &gt; Java &gt; Java Options</strong>, or via the <strong>Control Panel &gt; Services &gt; Apache Tomcat &gt; Properties &gt; Start Parameters</strong>. </p>
<p>If you are running a 64-bit version of Tomcat as a Windows Service, you must edit the Windows Registry to add that line to the <strong>HKEY_LOCAL_MACHINE\SOFTWARE\Apache Software Foundation\Procrun 2.0\Tomcat5\Parameters\JavaJVM</strong> settings in the Registry.</p>
<p>If you are running Tomcat on Ubuntu, edit its startup script such as <strong>/etc/init.d/tomcat6</strong> and make the following changes:</p>
<pre><code>if [ -z &quot;$JAVA_OPTS&quot; ]; then
        JAVA_OPTS=&quot;-Djava.awt.headless=true -Xmx128M&quot;
fi</code></pre>
<div>
Should become:
</div>
<pre><code>if [ -z &quot;$JAVA_OPTS&quot; ]; then
        JAVA_OPTS=&quot;-Djava.awt.headless=true -Xmx1024M -Xms1024M -XX:PermSize=256m -XX:MaxPermSize=256m -XX:NewSize=128m&quot;
fi</code></pre>
<p>If you are running Tomcat as a Linux service, open the <strong>/etc/init.d/tomcat</strong> script and append change the <strong>CATALINA_OPTS</strong> variable:</p>
<pre><code>CATALINA_OPTS=&quot;-Djava.library.path=/opt/tomcat/lib/.libs -Xmx512m -Xms512m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:NewSize=128m&quot;</code></pre>
<h3>Memory leaks</h3>
<p>After troubleshooting, you may determine that Tomcat or OpenMRS are having problems with memory leaks.</p>
<p>To mitigate memory leak problems in Tomcat, consider enabling pooling by adding the following element to the JSP servlet definition in the file <strong>&lt;TOMCAT_HOME&gt;/conf/web.xml</strong>:</p>
<pre><code>&lt;init-param&gt;
&lt;param-name&gt;enablePooling&lt;/param-name&gt;
&lt;param-value&gt;false&lt;/param-value&gt;
&lt;/init-param&gt; </code></pre>
<p>If you believe you have discovered a memory leak in OpenMRS, and are comfortable looking at the OpenMRS application code to identify where the leak is located, you may like to troubleshoot further to find out the cause. OpenMRS developers use YourKit Profiler to discover and debug memory and CPU consumption issues. </p>
<p>YourKit is kindly supporting members of the OpenMRS community with its full-featured Java Profiler product. If you have development skills you may want to use this tool to understand why the application is leaking memory or consuming too many processor resources. As an active participant in the OpenMRS community, you can request a license by opening a support desk ticket</p>
<p><a href="http://go.openmrs.org/helpdesk" class="uri">http://go.openmrs.org/helpdesk</a></p>
<h2>Bugs in OpenMRS</h2>
<p>If you believe you have discovered a problem that may be a bug in OpenMRS, we encourage you to report that bug. The OpenMRS development team takes bug reports seriously and continually fixes as many bug reports as possible for future releases. Please see our bug report page on the OpenMRS wiki for further details and instructions:</p>
<p><a href="http://go.openmrs.org/bug" class="uri">http://go.openmrs.org/bug</a></p>
<p><span id="ch027_getting-help-from-the-openmrs-community.xhtml"></span></p>
<h1>Getting Help from the OpenMRS Community</h1>
<p><img src="static/implementers-2011.png" /></p>
<address>
<p>A 2011 meeting of the OpenMRS community in Kigali, Rwanda. </p>
</address>
<p>OpenMRS is supported by a vibrant community. Whether you need help installing, using, updating or extending OpenMRS, you can find help in a variety of places.</p>
<h2>OpenMRS ID</h2>
<p>OpenMRS ID is an account used to participate in most of the community resources to support implementers and developers, and is required to use most of the tools on this page. Learn more about OpenMRS ID and sign up online</p>
<p><a href="http://go.openmrs.org/id" class="uri">http://go.openmrs.org/id</a></p>
<h2>OpenMRS Wiki</h2>
<p>Documentation for OpenMRS is available in the wiki.</p>
<p><a href="http://wiki.openmrs.org" class="uri">http://wiki.openmrs.org</a></p>
<p>You can find information for users and developers, as well as details of shared modules and other resources.</p>
<p>You can search for information in the wiki using the search bar at the top of the page. Alternatively, use the links on the left of the page to navigate to the relevant section.</p>
<p>If you find an error in the information on the wiki, please correct it if you can! If you do not already have an OpenMRS ID, you can register for free using the <strong>Sign Up</strong> link at the top of the page. After logging in, you will see an <strong>Edit</strong> button at the top of most pages. Click this button, make your changes, and click <strong>Save</strong>. If you are not certain about making an edit, just leave a comment on the page with your questions or concerns. We appreciate your help!</p>
<h2>Mailing lists</h2>
<p>Information about the OpenMRS mailing lists, including details on how to subscribe, and archives of past messages, are available at the following URL.</p>
<p><a href="http://go.openmrs.org/lists" class="uri">http://go.openmrs.org/lists</a></p>
<p>The implementers mailing list is a community mailing list for people using, considering using, or otherwise interested in OpenMRS. You can ask questions, seek advice, and learn from others on the mailing list. Search the archives for similar problems before you post - someone else may have already answered your questions!</p>
<h2>OpenMRS Answers</h2>
<p>OpenMRS Answers is an exciting way to ask questions about installing and using OpenMRS, and to get answers from others in the community.</p>
<p><a href="https://answers.openmrs.org/" class="uri">https://answers.openmrs.org/</a> </p>
<p>It provides an alternative to mailing lists and IRC, and has a system of voting, badges, and points that allows you to compete with others. An OpenMRS ID is required to log in you can participate. OpenMRS Answers focuses on finding specific answers to specific questions. Brief discussions can be conducted in the comments, but most discussions should be held on the mailing lists (see above).</p>
<h2>IRC</h2>
<p>Internet Relay Chat (IRC) is a protocol for real-time Internet chat. The OpenMRS community use the #OpenMRS chat room on irc.freenode.net.</p>
<p>For more information on how to connect to IRC visit:</p>
<p><a href="http://go.openmrs.org/irc" class="uri">http://go.openmrs.org/irc</a></p>
<p>All IRC discussions are logged and available online.</p>
<h2>Having trouble?</h2>
<p>If you have problems with your OpenMRS ID, or with any of the tools listed above, please open a support desk ticket and someone will respond to your issue.</p>
<p><a href="http://go.openmrs.org/helpdesk" class="uri">http://go.openmrs.org/helpdesk</a></p>
<p>If you are not able to log in when creating the ticket, please remember to include your name and contact information.</p>
<p><span id="ch029_leaving-amani-clinic.xhtml"></span></p>
<h1>Leaving Amani Clinic</h1>
<p><img src="static/leaving-clinic.png" /></p>
<p><img src="static/case-study.png" />We now end our visit to Amani Clinic. We saw how the clinic management started with the idea of using a medical information system to support the workflow of their clinic. They implemented OpenMRS to manage their data, evaluate and report on their project's effectiveness, and ultimately improve care for their patients.</p>
<p>Claudine, Daniel, James, and Kissa all had challenges in planning and getting used to new ways of working, but we can believe that their increased ability to better manage health care delivery will result in healthier, happier people in the village of Kisiizi.</p>
<p>We hope you have found their story, along with the information presented in this book, useful in thinking about your own situation.</p>
<p>As a reminder, this book serves only as an introduction to the OpenMRS medical record system and our larger open source community. You are now a member of a new extended family of people working together to make and improve technology for health care on every continent. We hope you will be as excited as we are to make a difference in our communities, and we hope to see you in our mailing lists and wikis, and hear you in our meetings very soon.</p>
<p>Welcome and good luck! </p>
<p><span id="ch030_about-this-book.xhtml"></span></p>
<h1>About this Book</h1>
<p><img src="static/IMG_20111020_181606.png" /></p>
<p>This first edition of this book was created in October 2011 during the first Google Summer of Code Documentation Sprint. We are indebted to the Google Open Source Programs Office, the FLOSS Manuals foundation, and Aspiration for organizing this week-long event where four open source projects (OpenMRS, Sahana Eden, OpenStreetMap, and KDE) joined forces to share knowledge and create manuals for their user communities.</p>
<p>The authors for the first version were Rafal Korytkowski (Poland), Glen McCallum (Canada), Nóirín Plunkett (Ireland), Darius Jazayeri (United States), and Michael Downey (United States).</p>
<p>We received proofreading, structural advice, and editing assistance from Paul Biondich (United States), Hamish Fraser (United States), Allen Gunn (United States), Daniel Kayiwa (Uganda), Burke Mamlin (United States), Saptarshi Purkayastha (India), Janet Riley (United States), and Ben Wolfe (Kenya).</p>
<p>Photographs in this book are courtesy of James Arbaugh, Michael J. Downey, Frank Fries, Mathew Ssemakadde, and Stephanie Taylor. The original book cover was designed by Laleh Torabi.</p>
<p>We would also like to thank the countless people who have contributed to OpenMRS documentation over the past seven years, and the writing team of &quot;CivicCRM: A Comprehensive Guide&quot;, all of which served as inspiration and the basis for much of this book. The OpenMRS community thanks everyone who participated in making this book a reality. Thank you!</p>
<p><img src="static/sprint_google_group_3.jpeg" /></p>
<p><span id="ch032_appendix-a-glossary.xhtml"></span></p>
<h1>Appendix A: Glossary</h1>
<p><strong>administrative staff:</strong> Individuals who manage people or data in a clinical setting.</p>
<p><strong>allergy list:</strong> A series of allergies from which a patient has or is suffering.</p>
<p><strong>bug:</strong> A repeatable problem in OpenMRS.</p>
<p><strong>bug report:</strong> A report created describing a repeatable problem to software developers.</p>
<p><strong>bundled module:</strong> An OpenMRS module that is included with a downloaded OpenMRS installation.</p>
<p><strong>check digit:</strong> An extra digit that is added to the end of an identifier, and depends on the rest of identifier.</p>
<p><strong>clinician:</strong> A doctor, nurse, or other clinical officer who provides health care to patients.</p>
<p><strong>cohort:</strong> A group of patients that can be defined by one or more common traits.</p>
<p><strong>concept:</strong> The idea that encompasses any question which can be asked about a patient, an observable point of data.</p>
<p><strong>concept class:</strong> A category of OpenMRS Concepts with associated traits.</p>
<p><strong>concept datatype:</strong> A descriptor of the type of data which a given OpenMRS Concept describes (e.g., numeric, text, etc.).</p>
<p><strong>concept dictionary:</strong> A list of all the medical and program-related terms used in OpenMRS as questions and answers.</p>
<p><strong>customization:</strong> The idea of adapting a system to suit one's specific, particular needs.</p>
<p><strong>data:</strong> A small piece of knowledge that can be reduced to a single value.</p>
<p><strong>demographics:</strong> Information about a person, typically including items like date of birth, location, name, etc.</p>
<p><strong>drug:</strong> A specific formulation of a medication represented in OpenMRS. </p>
<p><strong>electronic medical record:</strong> A computer system that allows for recording, storage, and retrieval of information related to the delivery of health care to patients.<br />
</p>
<p><strong>encounter:</strong> (1) An instance of direct provider/practitioner to patient interaction, regardless of the setting, between a patient and a practitioner vested with primary responsibility for diagnosing, evaluating or treating the patient's condition, or both, or providing social worker services. (2) A contact between a patient and a practitioner who has primary responsibility for assessing and treating the patient at a given contact, exercising independent judgment. <a href="http://www.astm.org/Standards/E1384.htm" class="uri">http://www.astm.org/Standards/E1384.htm</a></p>
<p><strong>error:</strong> A message in a computer system that describe a problem currently or recently occurring.</p>
<p><strong>flag:</strong> A visual indicator of certain criteria on a patient chart.</p>
<p><strong>form:</strong> An electronic form that may be used for entering or viewing data.</p>
<p><strong>Groovy:</strong> A computer scripting language that allows automation and quick performance of tasks.</p>
<p><strong>implementation plan:</strong> A written document which details specific goals and tasks in installing, customizing, and using OpenMRS.</p>
<p><strong>implementation team:</strong> A defined group of people working together to deploy OpenMRS in a specific project.</p>
<p><strong>implementer:</strong> Someone who has or is in process of deploying OpenMRS in a specific location or context of use.</p>
<p><strong>informatics:</strong> The study of information technology applied to a specific domain.</p>
<p><strong>internationalization:</strong> The adaptation an information system or pieces of information to be used in multiple locations.</p>
<p><strong>IRC:</strong> Short for Internet Relay Chat, an online tool to communicate with others in &quot;real time&quot;. OpenMRS uses IRC to allow developers and implementers to collaborate and meet. <a href="http://go.openmrs.org/irc" class="uri">http://go.openmrs.org/irc</a></p>
<p><strong>local area network:</strong> A method of connecting multiple computers for communication over distances.</p>
<p><strong>location:</strong> A physical place where a patient may receive healthcare services.</p>
<p><strong>longitudinal:</strong> Having a goal of observing or trending over time.</p>
<p><strong>mailing list:</strong> A collection of names and addresses used by a company to send material to multiple recipients. On the internet, mailing lists include each person's e-mail address rather than a postal address. <a href="http://www.entrepreneur.com/encyclopedia/term/82424.html" class="uri">http://www.entrepreneur.com/encyclopedia/term/82424.html</a></p>
<p><strong>medical informatics:</strong> A discipline of studying the use of information technology to the field of medical science.</p>
<p><strong>metadata:</strong> A piece of information that describes other information.</p>
<p><strong>module:</strong> A software package that extends OpenMRS functionality in specific ways. Often developed by others in the OpenMRS community.<br />
</p>
<p><strong>module repository:</strong> An online resource to find and maintain community-developed OpenMRS add-on modules. <a href="http://modules.openmrs.org">http://modules.openmrs.org/</a></p>
<p><strong>observation:</strong> One atomic piece of information that is recorded about a person at a moment in time.</p>
<p><strong>open source:</strong> A method of developing software where the source code is freely available for others to examine, use, and build upon. Also a type of software development community based around sharing of work and collaboration.</p>
<p><strong>order:</strong> An action that a provider requests be taken regarding a patient.</p>
<p><strong>patient:</strong> A person receiving health care services.</p>
<p><strong>patient dashboard:</strong> A visual representation of a patient within OpenMRS, including his or her demographics and other important information.</p>
<p><strong>patient identifier:</strong> Any unique number that can identify a patient. Examples are a Medical Record Number, a National ID, a Social Security Number, a driver's license number, etc.</p>
<p><strong>person:</strong> Every individual who is referred to in any patient's record in OpenMRS must be stored in the system.</p>
<p><strong>person attribute:</strong> store additional pieces of information about the people in your system in addition to those that are natively supported by OpenMRS.</p>
<p><strong>pilot project:</strong> Actively planned as a test or trial.</p>
<p><strong>platform:</strong> A computer system that is simple by design, intended to be customized and adapted for use in a wide variety of contexts.</p>
<p><strong>privilege:</strong> Defines what actions a user is allowed to take within OpenMRS.</p>
<p><strong>problem list:</strong> A list of a patient's problems that serves as an index to his or her record. Each problem, the date when it was first noted, the treatment, and the desired outcome are added to the list as each becomes known. Thus the list provides an ongoing guide for reviewing the health status and planning the care of the patient. <a href="http://medical-dictionary.thefreedictionary.com/master+problem+list" class="uri">http://medical-dictionary.thefreedictionary.com/master+problem+list</a></p>
<p><strong>profile:</strong> An OpenMRS user's basic information, including name, user ID, and password.</p>
<p><strong>program:</strong> A planned series of administrative or research events.</p>
<p><strong>program enrollment:</strong> Represents the fact that a patient is enrolled in one of these Programs over a time period at a Location.</p>
<p><strong>provider:</strong> A health care professional, or group of health care professionals who provide a service to patients.</p>
<p><strong>purge:</strong> To permanently delete data from the OpenMRS database.</p>
<p><strong>relationship:</strong> A description of how two persons in OpenMRS are connected, e.g., mother and child.<br />
</p>
<p><strong>retire:</strong> To make metadata unusable in the future while retaining it in OpenMRS for past reference.</p>
<p><strong>role:</strong> Represents a group of privileges in OpenMRS.</p>
<p><strong>sample data:</strong> Fictional, anonymized information representing patient care within OpenMRS. Some versions of the software include this artificial data to make it easier to plan an OpenMRS implementation.</p>
<p><strong>SMART goals:</strong> Objectives for a project that are specific, measurable, attainable, realistic and timely.</p>
<p><strong>software developer:</strong> A person who is able to program customizations or additional functionality in OpenMRS.<br />
</p>
<p><strong>state:</strong> A condition or situation; status.</p>
<p><strong>super user:</strong> An OpenMRS user with permission to perform all management tasks in the application.</p>
<p><strong>system administrator:</strong> A person who is responsible for day-to-day maintenance of a computer system or network.</p>
<p><strong>uninterruptible power supply:</strong> A battery-based system that provides instant short-term power to a computer or other devices during a power outage.</p>
<p><strong>unretire:</strong> To re-designate metadata as usable.</p>
<p><strong>unvoid:</strong> Make data visible in OpenMRS that had previous been voided.</p>
<p><strong>user:</strong> A person who uses OpenMRS, or more specifically the data in the system representing that person.</p>
<p><strong>void:</strong> To mark data as deleted from a user perspective - but retain it in the OpenMRS database.</p>
<p><strong>wiki:</strong> A web site containing documentation and other resources for a project or organization.</p>
<p><strong>workflow:</strong> A series of tasks to accomplish a goal.</p>
<p><span id="ch033_appendix-b-example-html-form-source.xhtml"></span></p>
<h1>Appendix B: Example HTML Form Source</h1>
<pre><code>&lt;htmlform&gt;
	&lt;!-- Autogenerated example form  (template from 01-Nov-2010 --&gt;
  &lt;macros&gt;
		paperFormId = (Fill this in)
		headerColor =#009d8e
		fontOnHeaderColor = white
  &lt;/macros&gt;

  &lt;style&gt;
		.section {
			border: 1px solid $headerColor;
			padding: 2px;
			text-align: left;
			margin-bottom: 1em;
		}
		.sectionHeader {
			background-color: $headerColor;
			color: $fontOnHeaderColor;
			display: block;
			padding: 2px;
			font-weight: bold;
		}
		table.baseline-aligned td {
			vertical-align: baseline;
		}
  &lt;/style&gt;

  &lt;span style=&quot;float:right&quot;&gt;Paper Form ID: $paperFormId&lt;/span&gt;
  &lt;h2&gt;Amani Antenatal History (v1.0)&lt;/h2&gt;

  &lt;section headerLabel=&quot;1. Encounter Details&quot;&gt;
    &lt;table class=&quot;baseline-aligned&quot;&gt;
      &lt;tr&gt;
        &lt;td&gt;Date:&lt;/td&gt;
        &lt;td&gt;
          &lt;encounterDate default=&quot;today&quot;/&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Location:&lt;/td&gt;
        &lt;td&gt;
          &lt;encounterLocation/&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Provider:&lt;/td&gt;
        &lt;td&gt;
          &lt;encounterProvider/&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Patient Name:&lt;/td&gt;
        &lt;td&gt;
          &lt;lookup class=&quot;value&quot; expression=&quot;patient.personName&quot;/&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/section&gt;

  &lt;section headerLabel=&quot;2. Antenatal History&quot;&gt;
    &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; class=&quot;baseline-aligned&quot;&gt;
      &lt;tr&gt;
        &lt;td&gt;
          &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;table&gt;
                  &lt;tr&gt;
                    &lt;td&gt;
                      &lt;b&gt;Reason For Visit:&lt;/b&gt;
                    &lt;/td&gt;

                    &lt;td&gt;
                      &lt;obs conceptId=&quot;1433&quot; style=&quot;radio&quot; answerConceptIds=&quot;1435,1434,5622&quot; answerLabels=&quot;Planning Pregnancy&amp;lt;br \/ &amp;gt;, Currently Pregnant&amp;lt;br \/ &amp;gt;, Other&quot;/&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;table&gt;
                  &lt;tr&gt;
                    &lt;td&gt;
                      &lt;b&gt;Antenatal Visits #:&lt;/b&gt;
                    &lt;/td&gt;

                    &lt;td&gt;
                      &lt;obs conceptId=&quot;1425&quot;/&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;table&gt;
                  &lt;tr&gt;
                    &lt;td&gt;
                      &lt;b&gt;If Pregnant, was
                        &lt;br /&gt;pregnancy intended?&lt;/b&gt;
                    &lt;/td&gt;

                    &lt;td&gt;
                      &lt;obs conceptId=&quot;1426&quot; style=&quot;radio&quot; answerConceptIds=&quot;1065,1066,1067&quot; answerLabels=&quot;Yes&amp;lt;br \/ &amp;gt;, No&amp;lt;br \/ &amp;gt;, Unknown&quot;/&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;table&gt;
                  &lt;tr&gt;
                    &lt;td&gt;
                      &lt;b&gt;Last Menstrual Period:&lt;/b&gt;
                    &lt;/td&gt;

                    &lt;td&gt;
                      &lt;obs conceptId=&quot;1427&quot;/&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;table&gt;
                  &lt;tr&gt;
                    &lt;td&gt;
                      &lt;b&gt;Date of Delivery:&lt;/b&gt;
                    &lt;/td&gt;

                    &lt;td&gt;
                      &lt;obs conceptId=&quot;1596&quot;/&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;table&gt;
                  &lt;tr&gt;
                    &lt;td&gt;
                      &lt;b&gt;Blood Type:&lt;/b&gt;
                    &lt;/td&gt;

                    &lt;td&gt;
                      &lt;obs conceptId=&quot;1426&quot; style=&quot;radio&quot; answerConceptIds=&quot;152674, 152675, 152676, 152677, 152678,152679, 152680,152681&quot; answerLabels=&quot;A+, A-&amp;lt;br \/ &amp;gt;, B+, B-&amp;lt;br \/ &amp;gt;, 0+, 0-&amp;lt;br \/ &amp;gt;,AB+, AB-&amp;lt;br \/ &amp;gt;&quot;/&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
        &lt;/td&gt;
        &lt;td&gt;
          &lt;table border=&quot;1&quot; cellspacing=&quot;0&quot;&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;table&gt;
                  &lt;tr&gt;
                    &lt;td&gt;
                      &lt;b&gt;High-Risk Sex:&lt;/b&gt;
                    &lt;/td&gt;

                    &lt;td&gt;
                      &lt;obs conceptId=&quot;1355&quot; style=&quot;yes_no&quot;/&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;table&gt;
                  &lt;tr&gt;
                    &lt;td&gt;
                      &lt;b&gt;HIV Test:&lt;/b&gt;
                    &lt;/td&gt;

                    &lt;td&gt;
                      &lt;obs conceptId=&quot;1356&quot; style=&quot;yes_no&quot; dateLabel=&quot;&amp;lt;br \/ &amp;gt;Date:&quot;/&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;table&gt;
                  &lt;tr&gt;
                    &lt;td&gt;
                      &lt;b&gt;Partner&#39;s HIV Status:&lt;/b&gt;
                    &lt;/td&gt;

                    &lt;td&gt;
                      &lt;obs conceptId=&quot;1436&quot; style=&quot;radio&quot; answerConceptIds=&quot;664,703,1067&quot; answerLabels=&quot;Negative&amp;lt;br \/ &amp;gt;, Positive&amp;lt;br \/ &amp;gt;, Unknown&quot;/&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;table&gt;
                  &lt;tr&gt;
                    &lt;td&gt;
                      &lt;b&gt;STI Treatment:&lt;/b&gt;
                    &lt;/td&gt;

                    &lt;td&gt;
                      &lt;obs conceptId=&quot;1428&quot;/&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;table&gt;
                  &lt;tr&gt;
                    &lt;td&gt;
                      &lt;b&gt;RPR/VDRL:&lt;/b&gt;
                    &lt;/td&gt;

                    &lt;td&gt;
                      &lt;obs conceptId=&quot;299&quot; style=&quot;radio&quot; answerConceptIds=&quot;1228, 1229&quot; answerLabels=&quot;Reactive&amp;lt;br \/ &amp;gt;, NR&quot;/&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;table&gt;
                  &lt;tr&gt;
                    &lt;td&gt;
                      &lt;b&gt;Last Tetnus:&lt;/b&gt;
                    &lt;/td&gt;

                    &lt;td&gt;
                      &lt;obs conceptId=&quot;1428&quot;/&gt;
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
        &lt;/td&gt;
        &lt;td&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;b&gt;Recent Contraceptive Use:&lt;/b&gt;
                &lt;br/&gt;

                &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;1107&quot; answerLabel=&quot;None&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;780&quot; answerLabel=&quot;Oral Contraception&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;190&quot; answerLabel=&quot;Condoms&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;5277&quot; answerLabel=&quot;Natural Planning / Rhythm&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;5278&quot; answerLabel=&quot;Diaphragm&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;1378&quot; answerLabel=&quot;Depo-Provera&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;1359&quot; answerLabel=&quot;Norplant&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;1388&quot; answerLabel=&quot;Surgery&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1635&quot; answerConceptId=&quot;5622&quot; answerLabel=&quot;Other&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;

              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
        &lt;/td&gt;
        &lt;td&gt;
          &lt;table&gt;
            &lt;tr&gt;
              &lt;td&gt;
                &lt;b&gt;Previous Complications:&lt;/b&gt;
                &lt;br/&gt;

                &lt;obs conceptId=&quot;1430&quot; answerConceptId=&quot;113859&quot; answerLabel=&quot;Hypertension&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1430&quot; answerConceptId=&quot;1431&quot; answerLabel=&quot;Low Birth Weight Baby&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1430&quot; answerConceptId=&quot;119481&quot; answerLabel=&quot;Diabetes Mellitus&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1430&quot; answerConceptId=&quot;48&quot; answerLabel=&quot;Miscarriage&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1430&quot; answerConceptId=&quot;1171&quot; answerLabel=&quot;Cesarean Section&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1430&quot; answerConceptId=&quot;228&quot; answerLabel=&quot;Antepartum Hemorrhage&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1430&quot; answerConceptId=&quot;230&quot; answerLabel=&quot;Postpartum Hemorrhage&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1430&quot; answerConceptId=&quot;130&quot; answerLabel=&quot;Puerperal Sepsis&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1430&quot; answerConceptId=&quot;113602&quot; answerLabel=&quot;Prolonged Labor&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1430&quot; answerConceptId=&quot;127847&quot; answerLabel=&quot;Recto-vaginal Fistula&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1430&quot; answerConceptId=&quot;49&quot; answerLabel=&quot;Vesico-vaginal Fistula&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
                &lt;obs conceptId=&quot;1430&quot; answerConceptId=&quot;5622&quot; answerLabel=&quot;Other&quot; style=&quot;checkbox&quot;/&gt;
                &lt;br/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/table&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/section&gt;
  &lt;submit/&gt;
&lt;/htmlform&gt;
									
								</code></pre>
<p> </p>
</body>
</html>
