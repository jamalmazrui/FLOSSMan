<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <meta name="author" content="The Contributors" />
  <title>OGG THEORA</title>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<header>
<h1 class="title">OGG THEORA</h1>
<p class="author">The Contributors</p>
<p class="date">2012.04.24-17.24</p>
</header>
<p><span id="ch001_introduction.xhtml"></span></p>
<h1>Introduction<br />
</h1>
<p>The web grew as fast as it did because of its neutral design. Open standards, free software and transparent technologies have empowered a lot of this development. Because of this open environment, web developers can easily create web pages, software developers can build upon existing projects to extend what we can do on the net, and users can browse the web, send email, and use a wide range of applications.<br />
</p>
<p>With online video however, almost all of the basic technologies for its creation and playback are not free or transparent. For example, if a software developer makes a new video player, they must pay royalties to the companies that hold certain patents in order to distribute it legally. These patents (like most software patents) lock down extremely basic ideas.  For example: one company has patented the idea of storing pieces of an image from left to right, top to bottom!  Taken together, the thousands of patents on video techniques stifle the emergence of new ways of distributing and interacting with media.</p>
<h2>Patent Encumbered Video<br />
</h2>
<p>For those concerned with the dominance of private interests over public life, this is an obvious problem: how could the basic ideas necessary to develop software be controlled by a small number of corporations? It creates very concrete problems as well: the global movement for free software cannot include support for many video formats with its products.  And because patents make it costly for developers to distribute their own video players, developers depend on a few products from Microsoft, Apple, and Adobe.  On the web, over 98% of online video is delivered using Flash. <br />
</p>
<p>The problems are not just within the realm of software development - if you create or publish video online then patent-encumbered technologies affect you directly. Patent holders have the power to extract fees from content producers and MPEG LA, which represents patent holders of the popular MPEG video technologies, charges license fees from television broadcasters, DVD distributors, and others.  At this moment they don't charge for online distribution, but at the end of 2009 they are expected to announce new royalty terms, and these new terms could threaten independent publishers of online video. </p>
<h2>A Better Way<br />
</h2>
<p>Now, however, we have an online video technology that anyone is free to use, study, improve, and distribute without needing permission or paying fees. This technology is called Ogg Theora (or just 'Theora'). Some parts of Theora <em>are</em> patented, but the owners of those patents have granted a permanent, irrevocable, royalty-free patent license to everyone. Theora carefully avoids any patents held by traditional patent holders: to get around the ridiculous patent of image storing mentioned above, Theora stores video image information from bottom to top instead of top to bottom!<br />
</p>
<p>Recognizing that Theora is a crucial ingredient for the freedom of our internet, Mozilla, Opera and Google have announced support of Theora video for future or current releases of their browsers. This means that millions of users will be able to watch Theora videos using their browser, without the need for extra software. The work of the free software community, with support from Mozilla, Wikipedia and others, has brought Theora to the same level of quality as state-of-the-art video technologies.</p>
<p>There are other important projects with similar goals, like <a href="http://en.wikipedia.org/wiki/Dirac_(codec)" title="Dirac video codec"><em>Dirac</em></a>, an effort spearheaded by the BBC. But the exciting thing about Theora is that it's here now, supported by popular tools, and ready for mass adoption. By learning how to use Theora and involving it in your work, you can help make the web more exciting and more free.<br />
</p>
<p><span id="ch002_about-this-manual.xhtml"></span></p>
<h1>About This Manual</h1>
<p>This manual was written during a 5 day Book Sprint in the Haus der Kulturen der Welt, Berlin (August 10-15, 2009).<br />
</p>
<p><span><img src="static/Blog-ogg_booksprint_1-en.png" title="ogg_booksprint_1" alt="ogg_booksprint_1" width="600" height="306" /> </span></p>
<p><span>Present were :</span></p>
<p><span>Jan Gerber</span></p>
<p>Homes Wilson</p>
<p>Susanne Lang</p>
<p>David Kühling</p>
<p>Jörn Seger</p>
<p>Plus many people helping online. Many thanks also to Leslie Hawthorn and Google for supporting this sprint, and to the Berlin Summercamp. This book is an ongoing effort...please feel free to improve it!<br />
</p>
<h2><span>1. Register</span></h2>
<p><span></span><span>Register at FLOSS Manuals:<br />
</span><a href="http://en.flossmanuals.net/register" class="uri">http://en.flossmanuals.net/register</a></p>
<h2>2. Contribute!</h2>
<p>Select the manual <a href="http://en.flossmanuals.net/bin/view/TheoraCookbook/WebHome" class="uri">http://en.flossmanuals.net/bin/view/TheoraCookbook/WebHome</a> and a chapter to work on.<br />
</p>
<p>If you need to ask us questions about how to contribute then join the chat room listed below and ask us! We look forward to your contribution!</p>
<p>For more information on using FLOSS Manuals you may also wish to read our manual:<br />
<a href="http://en.flossmanuals.net/FLOSSManuals" class="uri">http://en.flossmanuals.net/FLOSSManuals</a></p>
<h2>3. Chat</h2>
<p>It's a good idea to talk with us so we can help co-ordinate all contributions. We have a chat room embedded in the FLOSS Manuals website so you can use it in the browser.<br />
</p>
<p>If you know how to use IRC you can connect to the following:<br />
server: irc.freenode.net<br />
channel: #flossmanuals</p>
<h2>4. Mailing List</h2>
<p>For discussing all things about FLOSS Manuals join our mailing list:<br />
<a href="http://lists.flossmanuals.net/listinfo.cgi/discuss-flossmanuals.net%20">http://lists.flossmanuals.net/listinfo.cgi/discuss-flossmanuals.net</a></p>
<p><span id="ch003_what-is-video.xhtml"></span></p>
<h1>What is Digital Video?</h1>
<p>Video is a series of images that appears as an image in motion. The first &quot;videos&quot; (films) were literally a series of photographs, illuminated one-by-one at a rate fast enough to trick the human eye. Digital video can be thought of as a series of images but usually the reality is more complex.</p>
<p>While it is possible to store videos as a series of still images (frames), this is a somewhat wasteful approach as a lot of information must be stored. Surely there must be a better way! Well, when we look at frames in a movie we quickly see that only parts of a moving image change from one frame to the next while the rest of the image stays exactly the same. If the image is of someone walking, for example, perhaps they move while the background stays the same. So why not simply describe what changes from one frame to the next, since a little description is much less information than a whole image itself?<br />
</p>
<p>In fact, that's what digital video does. And in a world with limited disk space and network connections, simple ideas like this one can let you store hundreds of videos on your computer, instead of a handful or download a video in minutes, instead of hours.</p>
<p>In addition to this technique, digital video employs other methods to reduce the amount of data in a video. Digital video often uses tricks such as describing regions of similar color instead of describing each point one at a time -similar ways are used for describing images. Or they carefully describe certain parts of the image where lots of detail or movement is happening, for instance the part you're probably staring at, while giving less attention to the boring stuff at the edges. These ideas are not new, but they are improving rapidly with exciting consequences for producers of online video.<br />
</p>
<p><span id="ch004_what-is-theora.xhtml"></span></p>
<h1>What is Theora?</h1>
<p>Theora is a video technology for creating, editing, manipulating, and playing video. This type of technology is often referred to as a video <strong>format</strong> or <strong>codec</strong> (a portmanteau of <em>co</em>der-<em>dec</em>oder). Theora is a free video format, meaning that anyone is free to use, study, improve, and distribute it without needing permission. Some parts of Theora <em>are</em> patented, but the owners of those patents have granted a permanent, irrevocable, royalty-free patent license to everyone.<br />
</p>
<p>Because distribution and improvement of Theora is not limited by patents, it can be included in free software. Distributions of GNU/Linux-based operating systems, such as Ubuntu, Debian GNU/Linux, or Fedora, all include Theora &quot;out-of-the-box&quot;. And free software web browsers like Firefox and Chrome support Theora. If we consider the six major <em>usage share of web browsers</em> statistics of July 2009, approximately 25% of Internet users across all of these statistics are using Firefox and 2.5% are using Chrome as their browser. This means that every day a huge number of people are using software capable of playing Theora video.</p>
<h2>History<br />
</h2>
<p>Theora is based on an older technology called <strong>VP3,</strong> originally a proprietary and patented video format developed by a company called On2 Technologies.<sup><a href="http://en.wikipedia.org/wiki/Theora#cite_note-6"><span></span></a></sup> In September 2001, On2 donated VP3 to the <a href="http://www.xiph.org/">Xiph.Org</a> Foundation under a free software license. On2 also made an irrevocable, royalty-free license grant for any patent claims it might have over the software and any derivatives<sup><a href="http://en.wikipedia.org/wiki/Theora#cite_note-theoraspec-3"><span></span><span></span></a></sup>, allowing anyone to build on the VP3 technology and use it for any purpose. In 2002, On2 entered into an agreement with the Xiph.Org Foundation to make VP3 the basis of a new, free video format called Theora. On2 declared Theora to be the successor to VP3.<br />
</p>
<p>The Xiph.Org Foundation is a non-profit organization, that focuses on the production and mainstreaming of free multimedia formats and software. In addition to the development of Theora, they developed the free audio codec Vorbis, as well as a number of very useful tools and components that make free multimedia software easier and more comfortable to use.<br />
</p>
<p>After several years of beta status, Theora released its first stable (1.0) version in November 2008. Videos encoded with any version of Theora since this point will continue to be compatible with any future player.<sup><a href="http://en.wikipedia.org/wiki/Theora#cite_note-8"><span></span><span></span></a></sup>  A broad community of developers with support from companies like Redhat and NGOs like the Wikimedia Foundation continue to improve Theora. </p>
<h2>The Web<br />
</h2>
<p>Support for Theora video in browsers creates a special opportunity. Right now, nearly all online video requires Flash, a product owned by one company. But, now that around 25% of users can play Theora videos in their browser without having to install additional software, it is possible to challenge Flash's dominance as a web video distribution tool. Additionally, the new HTML5 standard by the W3C (World Wide Web Consortium) adds another exciting dimension — an integration of the web and video in new and exciting ways that complement Theora.<br />
</p>
<h2>Patents and Copyright</h2>
<p>The world of patents is complicated, leaving plenty of room for Theora's competitors to spread fear, uncertainty, and doubt (&quot;FUD&quot;) about its usefulness as a truly free format. In essence, Theora is free. It is free for you to use, change, redistribute, implement, sell or anything else you may like to do with it. But it's important that supporters of free formats understand the questions that arise. <br />
</p>
<p><span></span></p>
<p>One commonly spread fear is that Theora infringes on <em>submarine patents</em> — patents nobody knows about yet that the makers of Theora never had the authority to use. However it is also true that <em>all</em> modern software could infringe on submarine patents — everything from Microsoft Word to the Linux kernel. However millions of people and entire industries still use these tools. In other words, submarine patents are a problem for the software industry as a whole, however, this doesn't mean that the software industry should stop developing software.<br />
</p>
<p>It is also important to note that in a worst-case scenario, even if a submarine patent &quot;emerged&quot;, Theora could probably work around it; as this sort of thing happens all the time. Large organizations like the Mozilla Foundation and Wikipedia have examined this issue and have come to this same conclusion.</p>
<p>The software produced by Xiph.org is also subject to copyright, and made available under free software licenses. Xiph.org provides code so that anyone can include it in any application. Xiph.org also provides a set of tools for working with Theora files. This means you can study, modify, redistribute and sell anything you make using Theora or any of the tools provided with it.</p>
<h2>Other Free Video Formats</h2>
<p>It is worth noting that there is another project creating a royalty-free, advanced video compression format. It is called Dirac. Originally created by the BBC Research department, Dirac will in the future try to cover all applications from Internet streaming to Ultra-high definition TV and expand to integrate with new hardware equipment technologies. Nevertheless, Ogg Theora lends itself extremely well to online (streaming) video distribution, whereas Dirac will likely become a better choice for sharing video files that are of high-definition footage.<br />
</p>
<p><span id="ch006_codecs.xhtml"></span></p>
<h1>Codecs</h1>
<p>To work with digital video it often helps to know a little bit about the technology, so lets look at some of the basic concepts behind digital video.</p>
<p>A <strong>codec</strong> is a mathematical formula that reduces the file size of a video or audio file. Theora is known as a <em>video</em> codec since it works exclusively with video files.<br />
</p>
<p>When a codec reduces a file size of a video file, it is also said to be <strong>compressing</strong> the file. There are two forms of compression that are of interest here - <strong>Lossless</strong> and <strong>Lossy</strong> <strong>Compression</strong>.</p>
<ol>
<li><strong>Lossless compression</strong> - This is the process of compressing data information into a smaller size without removing data. To visualise this process imagine a paper bag with an object in it. When you remove the air in the bag by creating a vacuum the object in the bag is not affected even though the total size of the bag is reduced.</li>
<li><strong>Lossy compression</strong> - Sometimes called 'Perceptual Encoding', this is the process of 'throwing away' data to reduce the file size. The compression algorithms used are complex and try to preserve the qualitative perceptual experience as much as possible while discarding as much data as necessary. Lossy compression is a very fine art. The algorithms that enable this take into account how the brain perceives sounds and images and then discards information from the audio or video file while maintaining an aural and visual experience resembling the original source material. To do this the process follows Psychoacoustic and Psychovisual modeling principles.</li>
</ol>
<h2>Quality</h2>
<p>The quality of digital video is determined by the amount of information encoded (<strong>bitrate</strong>) and the type of video compression (<strong>codec</strong>) used. While there are some codecs that can be considered to be more advanced than Theora, the difference in perceived quality is not significant. </p>
<h2>Bitrate and quality</h2>
<p>Since digital video represents a moving image as information, it makes sense that the more information you have, the higher the quality of the moving image. The bitrate is literally the number of bits per second of video (and/or audio) used in encoding. For a given codec, a higher bitrate allows for higher quality. For a given duration, a higher bitrate also means a bigger file. To give some examples, DV cameras record video and audio data at 25Mbit/s (a <strong>Mbit</strong> is 1,000,000 bits), DVDs are encoded at 6 to 9 Mbit/s, internet video is limited by the speed of broadband connections: many people have 512kbit/s (a <strong>kbit/s</strong> means 1,000 bits delivered per second) or 1Mbit/s lines, with 16Mbit/s connections becoming more common recently. Right now, around 700kbit/s is commonly used for videos embedded on web pages.<br />
</p>
<p>There are many reasons to want a lower bitrate. The video may need to fit on a certain storage medium, like a DVD. Or you may want to deliver the video fast enough for your audience, whose average internet connection speed is limited, to be able to watch it as they receive it.<br />
</p>
<p>Different kinds of video may require different bitrates to achieve the same level of perceived quality. Video with lots of cuts and constantly moving camera angles requires more information to describe it than video with many still images. An action movie, for example, would require a higher bitrate than a slow moving documentary.<br />
</p>
<p>Most modern codecs allow for a <strong>variable bitrate</strong>. This means that the bitrate can change over time in response to the details required. In this case, a video codec would use more bits to encode 10 seconds of quick cuts and moving camera angles than it would use to encode 10 seconds of a relatively still image.</p>
<h2>Codecs and quality</h2>
<p>Codecs reduce the necessary bitrate of a media file by describing the media in clever, more efficient ways. Video codecs describe the changes between one frame and the next, instead of describing each frame separately. Audio codecs ignore certain frequencies that the human ear doesn't notice. Just as simple techniques can dramatically reduce the bitrate and size of the file, more sophisticated techniques can reduce it even more. This is how some codecs can be considered superior to others.</p>
<p>When codecs use complicated mathematical techniques to encode video, you need a powerful chip to decode that video quickly enough for playback. This is a reason why sometimes it's best to use a simpler codec. Video encoded using state-of-the-art tricks may be unwatchable on an old computer, for example. Or it sometimes might be best to use an older, simpler video codec (as DVDs do) because the hardware required to play it will be cheaper.</p>
<h2>Theora and quality</h2>
<p>Thanks to recent work by the Theora community, Theora achieves a similar level of quality to other modern codecs like h.264, the patent-encumbered codec used by Apple, Youtube, and others. This can be a matter of some controversy, and there are reasons to consider h.264 technically superior in quality to Theora. But the best way to decide is to see for yourself. </p>
<p>These sites have side-by-side comparisons between Theora and h.264:<br />
</p>
<p><a href="http://people.xiph.org/~greg/video/ytcompare/comparison.html" class="uri">http://people.xiph.org/~greg/video/ytcompare/comparison.html</a></p>
<p><a href="http://people.xiph.org/~maikmerten/youtube/" class="uri">http://people.xiph.org/~maikmerten/youtube/</a></p>
<p><span id="ch007_containers.xhtml"></span></p>
<h1>Containers<br />
</h1>
<p>A <strong>container</strong> or <strong>wrapper</strong> is a file format that specifies how different streams of data can be stored together, or sent over a network together. It allows audio and video data to be stored in one file and played back in a synchronised manner. It also allows seeking in the data, by telling the playback software where the audio and video data is for certain points in time.</p>
<p>In addition to audio and video, containers may provide meta data about the data they contain, including the size of the <strong>frames</strong>, the <strong>framerate</strong>, whether the audio is in <strong>mono</strong> or <strong>stereo</strong>, the <strong>sample rate</strong>, and also information about the codecs used to encode the data.</p>
<p>When you play a digital movie that has sound, your player is reading the container, and decoding the audio and video using separate codecs. Theora video is usually stored or streamed together with <strong>Vorbis</strong> sound in the <strong>Ogg</strong> container, but it can be stored in other containers too.  Matroska (.mkv) is another format people use for Theora video.</p>
<h2>The difference between containers and codecs.<br />
</h2>
<p>The three letter extension at the end of the file name refers to the container, not the codec. People often get confused about this. When a file ends in .mp4 or .avi, those are containers that could contain several different combinations of audio and video streams. Certain containers don't work with certain codecs, and certain codecs work best with certain containers. But you can't tell for sure what codecs a video file requires by looking at the file extension.<br />
</p>
<p><span id="ch009_how-to-play-theora.xhtml"></span></p>
<h1>Playing Theora<br />
</h1>
<p>To play Ogg Theora videos you need a video player that supports Ogg Theora playback. Often to playback some types of video you need to install obscure software which can be very frustrating and time consuming. Fortunately, several video players can play Ogg Theora without the need to install anything else. The two easiest players to use are notable because they work the same across all of the major Operating Sytems (GNU/Linux, Mac OS X, Windows).<br />
</p>
<p><strong>VLC</strong> is a free software video player that plays many different types of video files, including Theora. You can get it here online at <a href="http://www.videolan.org/vlc/" title="Download VLC">http://www.videolan.org/vlc</a><br />
</p>
<p><strong>Miro</strong> is another video player that supports Ogg Theora video (<a href="http://getmiro.com/" title="Download Miro">http://getmiro.com)</a>.</p>
<p><strong>MPlayer</strong> is another free software player that supports Ogg Theora video (<a href="http://www.mplayerhq.hu/" class="uri" title="MPlayer Website">http://www.mplayerhq.hu/</a>).<br />
</p>
<p>If you don't have any of them or don't want to install them, you can also use the <strong>Firefox</strong> web browser versions 3.5 and later <a href="http://getfirefox.com/" title="Download Firefox">(</a><a href="http://getfirefox.com" class="uri">http://getfirefox.com</a>) as a Theora viewer.<br />
</p>
<p>As a rule of thumb, if the video is on your desktop, use VLC, MPlayer or Miro.  If the video is already on the web, use Firefox 3.5 or later.</p>
<h2>Integrating Theora</h2>
<p>If you want to use Theora with other softwares such as Windows Media Player or QuickTime Player, you need to install components or filters that will enhance the functionality of Theora. This doesn't apply to you if you use GNU/Linux, since Theora is natively supported in most distributions and plays with Totem and other GStreamer based applications.</p>
<p>For Windows and Mac OS X you can add full functionality and support of Theora to all QuickTime based applications, such as the QuickTime player itself, but also iTunes or iMovie. All you need to do is install the Xiph QuickTime Components (XiphQT) that can be downloaded from the Xiph.Org Website: <a href="http://xiph.org/quicktime/download.html" title="Xiph QuickTime Components">http://xiph.org/quicktime/download.htm</a></p>
<p>The other useful filter a Windows user might be interested in is the Directshow Filter. It is also offered from the Xiph.Org Foundation and adds encoding and decoding support for Ogg Vorbis, Speex, Theora and FLAC for any Directshow application, such as Windows Media Player. You can also download the filters from the Xiph.Org Website: <a href="http://xiph.org/dshow/" class="uri" title="Directshow filters">http://xiph.org/dshow/</a></p>
<p><span id="ch010_vlc.xhtml"></span></p>
<h1>VLC</h1>
<p>VLC (which stands for <em>VideoLAN Client)</em> is an excellent tool for playing video and audio files. It is <strong>free software</strong>, it plays a wide range of formats including Theora, and it runs on a variety of platforms. If you use Windows, Mac OS X, or GNU/Linux (eg. Ubuntu) then VLC is a great option for you. VLC also works the same across each Operating System so if you know how to use it in Windows (for example) you know how to use it under Ubuntu. VLC's flexibility and reliability make it one of the most popular free software video tools.</p>
<h2>Installing</h2>
<p>VLC is a desktop application that you need to download and install. Installation steps will vary depending on what platform you're using (GNU/Linux, Mac OS X, or Windows). </p>
<p>This page has links to download VLC, and instructions for various platforms:</p>
<p><a href="http://www.videolan.org/vlc/" class="uri" title="Download VLC">http://www.videolan.org/vlc/</a></p>
<p>There is also a good manual about how to use and install VLC linked from the FLOSS Manuals website.<br />
</p>
<h2>Playing Video</h2>
<ol>
<li>Run VLC.  You will see a window that looks more or less like this:<br />
<br />
<img src="static/TheoraCookbook-VLC-Picture_4_1-en.png" title="Picture_4_1" alt="Picture_4_1" width="436" height="116" /><br />
<br />
</li>
<li>Go to File &gt; Quick Open File in the VLC menu.<br />
<br />
<img src="static/TheoraCookbook-VLC-Picture_5_2-en.png" title="Picture_5_2" alt="Picture_5_2" width="438" height="280" /><br />
<br />
</li>
<li>Find the Theora file you want to open.  Select it, and click &quot;Open&quot;.<br />
<br />
<img src="static/TheoraCookbook-VLC-Picture_6_1-en.png" title="Picture_6_1" alt="Picture_6_1" width="459" height="362" /><br />
<br />
</li>
<li>A video will appear in your window like this, and the video should begin playing.<br />
<br />
<img src="static/TheoraCookbook-VLC-Picture_7_1-en.png" title="Picture_7_1" alt="Picture_7_1" width="437" height="477" /></li>
</ol>
<h2>Basic Playback Controls</h2>
<ul>
<li>As in most media players, you can drag the playback position indicator to move forward or backward in the video.</li>
<li>For full-screen playback, double click on the video.  To exit fullscreen, double click again. </li>
</ul>
<p><span id="ch011_miro.xhtml"></span></p>
<h1>Miro</h1>
<p>Miro (previously called Democracy TV) is a tool for finding, downloading and watching video from a wide range of online sources.  It is free software made by the nonprofit (NGO) Participatory Culture Foundation : <a href="http://participatoryculture.org/" class="uri">http://participatoryculture.org/</a>.<br />
</p>
<p>Miro plays a wide range of formats including Theora, and it runs on a variety of platforms (Operating Systems such as Windows, OSX, and GNU/Linux). In addition to video playback, Miro makes it easy to search for and download videos from specially formatted lists of videos known as podcasts or vodcasts.</p>
<p>You can use Miro to play video on your desktop, or to download and watch video from a URL pointing directly to the video file, or even a popular video website like YouTube. You can also use Miro to download and then watch Bittorrent files (files ending in .torrent).</p>
<h2>Installing</h2>
<p>Miro is a desktop application that you need to download and install.  Installation steps will vary depending on what platform you're using (GNU/Linux, Mac OS X, or Windows). </p>
<p>This page has links to download Miro and instructions for various platforms:</p>
<p><a href="http://getmiro.com/" title="Download Miro">http://getmiro.com</a></p>
<h2>Playing A Video</h2>
<ol>
<li>Run Miro.  After clicking through a few messages that display the first time Miro runs, you will see a window that looks like this:<br />
<br />
<img src="static/TheoraCookbook-Miro-miro-en.png" title="miro" alt="miro" width="600" height="415" /><br />
<br />
</li>
<li>Go to Video &gt; Open in the Miro menu.<br />
<br />
<img src="static/TheoraCookbook-Miro-open-en.png" title="open" alt="open" width="279" height="281" /><br />
<br />
</li>
<li>Find the file you want to open.  Select it, and click &quot;Open&quot;.<br />
<img src="static/TheoraCookbook-Miro-open2-en.png" title="open2" alt="open2" width="564" height="291" /><br />
<br />
</li>
<li>The video should begin playing in the Miro Window.<br />
<br />
<img src="static/Miro-PlayVideo-play_1-en.png" title="play_1" alt="play_1" width="600" height="415" /></li>
</ol>
<p><span id="ch013_introduction.xhtml"></span></p>
<h1><strong>Introduction</strong></h1>
<p>There are a few things to consider before you put your video online.</p>
<p>Keep in mind that in order for viewers to watch your video, they need to have a high-bandwidth connection. The higher the video quality the higher the bandwidth needed to access the video. This means that sometimes your target audience may not be able to access video online, and hence you may wish to consider another strategy such as distribution of the video on media like CD, DVD, or USB storage sticks.</p>
<p>If your audience has a fast internet connection you may wish to offer the video either for download or for playing from your website. Each strategy has its strengths depending on what it is you hope to achieve.<br />
</p>
<p>Replaying on your website :<br />
</p>
<ol>
<li>you can define the context in which the video is being presented</li>
<li>it is convenient for your audience to just click and play the video<br />
</li>
<li>it is quite handy for your site visitors to just click and watch a small part of the video and not have to download a huge amount of data just to get an impression of your work<br />
</li>
<li>it is easy for your audience to show your work to others, for instance by sending around a link to the video they want to point to<br />
</li>
</ol>
<p>Offering your video for download :</p>
<ol>
<li>your audience can share it by file sharing networks (some see this as a weakness)<br />
</li>
<li>they can play it as many times as they wish without consuming extra bandwidth</li>
<li>they can edit it</li>
<li>they can show it offline (eg. movie screenings)</li>
<li>you can provide a higher quality video that is not possible to play in a website due to browser or bandwidth constraints<br />
</li>
</ol>
<p>You could also choose to offer both strategies: an option to watch the video on your website and an option to download the video. You could even choose to upload two different versions of your video: one encoded in a quality more optimized for the web (something like a preview version of your film in a smaller size and poorer quality) and one video for people to download in a better quality and larger size and resolution.<br />
</p>
<p>If you want to share your Video on your website you have a few options. One is using the great HTML 5 <em>video</em> tag. If that is not an option for every viewer since some might use old browsers, you might want to also offer a fallback solution: the Cortado player (software you can embed in your webpage to play Theora).</p>
<p>If you don't have access to a server to store and deliver video, you can also use one of the many available hosting sites, that offer free hosting of Theora video (you don't want to upload your video to hosting sites such as Youtube since you would lose quality, and you would also wave some of your rights on the material).<br />
</p>
<p>Another strategy is to offer your video for download with bittorrent. Bittorrent is a peer-to-peer filesharing protocol that shares the internet connection of a respective number of computers that download the same file. Hence, the more people that download your video with bittorrent the faster the transfer will become for other users. Bittorrent is probably the most economic way to transfer large popular files on the internet.<br />
</p>
<p><span id="ch014_html5.xhtml"></span></p>
<h1>HTML5 Video</h1>
<p>If you create video, you may wish to display the content in a webpage. The code you use to create webpages is governed by a set of rules known as HTML, and there is recently a new version of this these rules called HTML 5.</p>
<p>HTML 5 introduces a <em>video</em> tag. A 'tag' is a few lines of HTML code that instructs the browser to display something or do something. The HTML5 video tag allows simple integration of videos in a manner very similar to placing images in a webpage.</p>
<p>The video can also be displayed with very nice controls for play, pause, altering the audio volume, and scrolling through the timeline of the video.<br />
</p>
<p><img src="static/TheoraCookbook-HTML5-Firefox_video_tag-en.png" title="Firefox_video_tag" alt="Firefox_video_tag" width="406" height="228" /> </p>
<h2>Basic Syntax</h2>
<p>Here is a basic example of a <em>video</em> embed tag using HTML 5 :</p>
<pre><code>&lt;video src=&quot;../video.ogv&quot;&gt;&lt;/video&gt;</code></pre>
<p>The above example embeds the video file, 'video.ogv', into a webpage. The file in this example should be located in the same directory as the HTML file because the 'src' parameter refers to a local file. To reference a video file in another directory on the same webserver you need to provide the path information just as you would for an image file.</p>
<pre><code>&lt;video src=&quot;..//bin/edit/myvideofiles/video.ogv&quot;&gt;&lt;/video&gt;</code></pre>
<p>You can also specify a file on another server:</p>
<pre><code>&lt;video src=&quot;../http://mysite.com/video.ogv&quot;&gt;&lt;/video&gt;</code></pre>
<h2>Parameters</h2>
<p>Adding additional parameters provides more control over the video.<br />
</p>
<pre><code>&lt;video
  src=&quot;../video.ogv&quot;
  width=&quot;480&quot;
  height=&quot;320&quot;
  autoplay
  controls&gt;
  Your Browser does not support the video tag, upgrade to Firefox 3.5+
&lt;/video&gt;</code></pre>
<p>In this example the <em>width</em> and <em>height</em> of the video are provided. If you don't want the image to appear distorted it is important that you set the height and width dimensions correctly. <em>autoplay</em> means that the video will be played as soon as the page loads. <em>controls</em> specifies that the controls to pause or play the video (etc) are displayed.</p>
<p>It is possible to include text or other HTML content inside the video tag as fallback content for browsers that do not support the video tag.</p>
<h2><strong>Using your own controls / player skin</strong><br />
</h2>
<p>If you know a little Javascript you can control the playback quite easily. Instead of using the <em>controls</em> provided by the browser, it is possible to create your own interface and control the video element via JavaScript. There are two things you need to remember with this method :</p>
<ol>
<li>Do not forget to drop the <em>controls</em> attribute</li>
<li><p>The video tag needs an id parameter like this :<br />
</p>
<pre><code>&lt;video src=&quot;../video.ogv&quot; id=&quot;myvideo&quot;&gt;&lt;/video&gt;</code></pre></li>
</ol>
<p>Some JavaScript functions:<br />
</p>
<pre><code>video = document.getElementById(&quot;myvideo&quot;);
//play video
video.play();
//pause video
video.pause();
//seek to second 10 in the video
video.currentTime = 10;</code></pre>
<p>If you have multiple video tags in a single webpage you will need to give each a unique id so that the javascript knows which video the controls refer to.<br />
</p>
<p>A full list of functions and events provided by the video tag can be found in the HTML5 spec at <a href="http://www.whatwg.org/specs/web-apps/current-work/#video%20">http://www.whatwg.org/specs/web-apps/current-work/#video</a></p>
<h2><strong>Manual Fallback options</strong><br />
</h2>
<p>In the above, simple example, if the video element is not supported by the browser, it will simply fall back to displaying the text inside the video element.<br />
<br />
Instead of falling back to the text, if the browser supports Java, it is possible to use Cortado as a fallback. Cortado is an open-source cross-browser and cross-platform Theora video player written in Java. The great thing is that the user doesn't need to download any extra Java packages as the applet uses the standard native Java in the browser. Cortado's home page can be found here :</p>
<div class="level2">
<p><a href="http://www.theora.org/cortado/" class="uri">http://www.theora.org/cortado/</a><br />
<del></del></p>
<p>A pre-compiled version of the applet is also available at this URL :</p>
</div>
<p><a href="http://www.theora.org/cortado.jar%20">http://www.theora.org/cortado.jar</a></p>
<p>You can download the jar file, or you can refer to it directly. The following is an example to embed cortado (not all paramters are required, but listed here to provide you an idea of possible options) :</p>
<pre class="code"><code>    &lt;applet code=&quot;com.fluendo.player.Cortado.class&quot;
            archive=&quot;http://www.theora.org/cortado.jar&quot;
	    width=&quot;352&quot; height=&quot;288&quot;&gt;
      &lt;param name=&quot;url&quot; value=&quot;http://myserver.com/theora.ogv&quot;/&gt;
      &lt;param name=&quot;framerate&quot; value=&quot;29&quot;/&gt;
      &lt;param name=&quot;keepAspect&quot; value=&quot;true&quot;/&gt;
      &lt;param name=&quot;video&quot; value=&quot;true&quot;/&gt;
      &lt;param name=&quot;audio&quot; value=&quot;true&quot;/&gt;
      &lt;param name=&quot;bufferSize&quot; value=&quot;100&quot;/&gt;
      &lt;param name=&quot;userId&quot; value=&quot;user&quot;/&gt;
      &lt;param name=&quot;password&quot; value=&quot;test&quot;/&gt;
    &lt;/applet&gt;</code></pre>
<p>If you select to download the jar file as a fallback, make sure you put it (<strong>cortado.jar)</strong> and the above html page in the same directory. Then change the following line to include a reference (link) to your own ogg stream (live or pre-recorded) :<br />
</p>
<pre class="code"><code>&lt;param name=&quot;url&quot; value=&quot;http://myserver.com/theora.ogv&quot;/&gt;</code></pre>
<p>Now if you open the webpage in a browser it should play the video. </p>
<p>To use Cortado as a fallback, place the Cortado tag within the HTML5 video tag -- as in the following example:<br />
</p>
<pre><code>&lt;video src=&quot;../video.ogv&quot; width=&quot;352&quot; height=&quot;288&quot;&gt;
  &lt;applet code=&quot;com.fluendo.player.Cortado.class&quot;
          archive=&quot;http://theora.org/cortado.jar&quot; width=&quot;352&quot; height=&quot;288&quot;&gt;
    &lt;param name=&quot;url&quot; value=&quot;video.ogv&quot;/&gt;
  &lt;/applet&gt;
&lt;/video&gt; </code></pre>
<h2>Javascript Based Players</h2>
<p>Some javascript libraries exist to handle fallback selection. These libraries enable simple embeding while retaining fallback to many players and playback methods across many browsers</p>
<p><strong>Mv_Embed</strong></p>
<p>The mv_embed library is very simple to use. A single JavaScript file include enables you to use the html5 video tag and have the attributes be rewritten to player that works across a wide range of browsers and plugins. <a href="http://metavid.org/wiki/mv_embed" title="mv_embed">More info on mv_embed<br />
</a></p>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;../http://metavid.org/w/mwScriptLoader.php?class=mv_embed&quot;&gt;&lt;/script&gt;
...
&lt;video src=&quot;../mymovie.ogg&quot; poster=&quot;mymovie.jpeg&quot;&gt;</code></pre>
<p><strong>Itheora</strong></p>
<p><a href="http://itheora.org/" title="itheora">ITheora</a> is a PHP script allowing you to broadcast ogg/theora/vorbis videos (and audios) files. It's simple to install and use. Itheora includes documentation on their site on how to use their player and skins.<br />
</p>
<h2>Support in Browsers</h2>
<p>Right now, latest versions of Mozilla Firefox, GNU IceCat and Epiphany browsers support Theora natively. Opera and Google Chrome have beta versions available with Theora support. Safari supports the video tag, but only supports codecs through QuickTime - that means by default it does not support Theora. With XiphQT (<a href="http://xiph.org/quicktime" class="uri">http://xiph.org/quicktime</a>) it is possible to add Theora support to QuickTime and thus Safari.</p>
<p><span id="ch015_hosting-theora-yourself.xhtml"></span></p>
<h1>Hosting on your own site<br />
</h1>
<p>Like images or HTML pages you can put your Theora videos on your own webserver. </p>
<h2>Mime Types</h2>
<p>For videos to work they have to be served with the right <strong>mime type</strong>.<br />
</p>
<p>A mime type is the name given to a way of identifying different file types delivered over the Internet. This information is usually delivered with the data. The extra information identifying what kind of information is being delivered is usually not readable by humans, but is interpreted by software so that the right kind of data is delivered and processed by the right kind of software. The information is sent in the <strong>header</strong> of the transported data.</p>
<p>A header is a small amount of meta data sent by one software to another which describes the kind of information being transported. Typical header information includes the length, destination, mime type etc.<br />
</p>
<p>Mime types have two parts - the <em>type</em> and <em>subtype</em> (although the two together is just referred to simply as a 'type'). The type is written in the form <em>type/subtype.</em> There are only four categories of type - audio, video, text, and application. There are innumerable subtypes.<br />
</p>
<p>The right mime type for Theora video is 'video/ogg'.</p>
<p>A current server should send the right information.  If your server does not send the right headers, you have to change the configuration of your webserver. However, you should first consider if you know enough about configuring web services. If you are not feeling confident about this then perhaps enlist the support of a friendly techie. Assuming you are using the Apache webserver (the most popular webserver on the web), and you feel confident to change the server configuration, there are two ways you can do this :<br />
</p>
<ol>
<li>you can add two lines to your Apache webserver configuration<br />
</li>
<li>you might be able to provide the extra settings by placing a .htaccess file in your video folder<br />
</li>
</ol>
<p>For the first strategy you need access to your web server configuration file (httpd.conf). In this case all files being delivered by your webserver will send the correct information. This is the best solution. However if you do not have access to your webserver configuration files (for example, if you are using a shared hosting service) then you may wish to try the second strategy. The second strategy will only effect the video being served from the same folder that you put the .htaccess file.</p>
<p>For both strategies you need to enter this information in the appropriate file:<br />
</p>
<pre><code>AddType video/ogg          .ogv
AddType application/ogg    .ogg</code></pre>
<p>For httpd.conf and .htaccess files you can place this information at the end of the file.  If you do not have an .htaccess file you can just create a blank file and add this information (no other information is required).</p>
<p> </p>
<h2>oggz-chop<br />
</h2>
<p>Using Apache you can also get a lot more sophisticated. You can, for example, enable the use of URLs that reference and playback only part of any given Theora video file. If you want to include only parts of your video in your webpage or allow linking to a specific time in the video,  you can use <strong>oggz-chop</strong> on the server. With oggz-chop installed you can address segments of the video by providing an offset parameter in the url. To include second 23 to second 42, of your video you would use<br />
</p>
<pre><code> &lt;video src=&quot;../http://example.com/video.ogv?t=23.0/42.0&quot;&gt;&lt;/video&gt;</code></pre>
<p>Installing oggz-chop requires the action module to be enabled in Apache and oggz-chop installed on the server. Describing how to enable the action module is beyond the scope of this document, so you may better consult with an Apache guru, or read some documentation on this subject before attempting it.</p>
<p>However...if you know you have Apache2 installed and you have administrator access to your server you could try this command to install the actions module :</p>
<pre><code> sudo a2enmod actions</code></pre>
<p>Try it at your own risk...</p>
<p>oggz-chop is part of oggz-tools, you can (probably) install that with :<br />
</p>
<pre><code>sudo apt-get install oggz-tools</code></pre>
<p>With those installed you have to enable oggz-chop with those two lines in your Apache configuration or .htaccess file:<br />
</p>
<pre><code>ScriptAlias /oggz-chop /usr/bin/oggz-chop
Action    video/ogg    /oggz-chop</code></pre>
<h2>Allowing Remote Access<br />
</h2>
<p>Videos, unlike images, can not be embedded from remote sites, if those sites do not specifically allow this.  To allow other sites to include your videos on their domain add this line to your Apache configuration or .htaccess file:<br />
</p>
<pre><code>Header Set Access-Control-Allow-Origin &quot;*&quot;</code></pre>
<p>With this setting, the server responds with an additional header 'Access-Control-Allow-Origin: *' which means that the videos can be embedded in any webpage. If you want to restrict access to the videos (for example, to be only accessible from <a href="http://example.org" class="uri">http://example.org</a>) you have to change it to:<br />
</p>
<pre><code>Header Set Access-Control-Allow-Origin &quot;http://example.org&quot;</code></pre>
<p>Note that now, your videos can not be embedded on domains other than example.org. The Access-Control-Allow-Origin header can also contain a comma separated list of acceptable domains.<br />
<a href="https://developer.mozilla.org/En/HTTP_access_control" class="uri">https://developer.mozilla.org/En/HTTP_access_control</a> has a more detailed description of http access control.<br />
</p>
<h2>Serving Videos via a Script</h2>
<p>As a final strategy. If you do not have control over your hosting setup but want to use videos anyway, it is possible to use a small PHP or CGI script to set the right headers and serve the video. Such a script could look like this:<br />
</p>
<pre><code>&lt;?php
$video = basename($_GET[&#39;name&#39;]);
if (file_exists($video)) {
  $fp = fopen($video, &#39;rb&#39;);
  header(&#39;Access-Control-Allow-Origin: *&#39;);
  header(&#39;Content-Type: video/ogg&#39;);
  header(&#39;Content-Length: &#39; . filesize($video));
  fpassthru($fp);
} else {
  echo &quot;404 - video not found&quot;;
}
?&gt;</code></pre>
<p>If this script is placed as index.php in your video folder, you would use <a href="http://example.com/videos/?name=test.ogv" class="uri">http://example.com/videos/?name=test.ogv</a> instead of directly linking to your video (<a href="http://example.com/videos/test.ogv" class="uri">http://example.com/videos/test.ogv</a>).<br />
</p>
<pre><code> &lt;video src=&quot;../http://example.com/videos/?name=test.ogv&quot;&gt;&lt;/video&gt;</code></pre>
<p><span id="ch016_hosting-sites.xhtml"></span></p>
<h1>Hosting Sites</h1>
<p>There are many existing websites that will host your Theora content for free. You can then either link directly to the content from your own webpages, or refer people to the content hosted on the external site.</p>
<h2>Archive.org</h2>
<p>Archive.org <a href="http://www.archive.org">(</a><a href="http://www.archive.org" class="uri">http://www.archive.org</a>) is the website for the not-for-profit organization known as the <strong>Internet Archive</strong>, that focuses on the preservation of digital media.  To post to the archive, you must also license the work under a <strong>Creative Commons</strong> (or similar) license. This is usually not a problem if you made the work yourself, but maybe an issue if you used copyrighted material (eg, music within a video) within your work, or if you are uploading something someone else made.</p>
<p>You can host Ogg Theora content at the Internet Archive for free, and then link to it from your own website. Archive.org will convert your video to Ogg Theora and many other formats when you upload it. <strong></strong></p>
<p><strong>Note:</strong> when you visit a page on archive.org, it will notify you if your browser supports the video tag. If you see this message...<br />
</p>
<p><img src="static/TheoraCookbook-HostingSites-Picture_18-en.png" alt="Picture_18.png" width="600" height="300" /></p>
<p>Simply reload the page and look for the message under the video icon:</p>
<p><img src="static/TheoraCookbook-HostingSites-Picture_26-en.png" alt="Picture_26.png" width="334" height="300" /><br />
</p>
<p>At this point, click the link that says &quot;try the new &lt;video&gt; tag&quot; and click the following link to always use the video tag.  Then your videos will display in Theora.  If you'd like a direct link to the Theora version of the video, copy the &quot;Ogg Video&quot; link in the left sidebar.  When you have that link, you can link directly to the video and anyone with a compatible browser will see the video play:</p>
<p><img src="static/TheoraCookbook-HostingSites-sita-en.png" title="sita" alt="sita" width="599" height="457" /></p>
<h2>Dailymotion</h2>
<p>Dailymotion (<a href="http://dailymotion.com/" class="uri">http://dailymotion.com/</a>) is one of the larger video sharing sites, and recently they have been dabbling with Theora support.  They have converted over 300,000 videos to Theora, and by applying for a &quot;motion maker&quot; account (and getting approved) you can publish videos there using Theora.  Their experimental Theora portal here: <a href="http://openvideo.dailymotion.org/">http://openvideo.dailymotion.com/</a>.  Note: not all videos in the portal currently display in Theora, so be sure to verify that your videos are working before relying on this service.</p>
<p><img src="static/TheoraCookbook-HostingSites-Picture_22-en.png" alt="Picture_22.png" width="600" height="549" /></p>
<h2>Wikimedia Commons</h2>
<p><em>Wikimedia Commons</em> ( <a href="http://commons.wikimedia.org/" class="uri">http://commons.wikimedia.org/</a> ) is a website managed by the <em>Wikimedia Foundation</em> ( <a href="http://wikimediafoundation.org/wiki/Home">http://wikimediafoundation.org/</a> ), a non-for-profit organization that also manages Wikipedia. It is a database of media files available for anyone to use for any purpose. It's an open website that any can contribute to, which uses wiki software that allows for easy collaboration.</p>
<p>The site is managed entirely by volunteer editors, who also create the majority of its content by contributing their own work. The community is multilingual, with translators available for dozens of languages. It only collects material that is available under free content licenses or in the public domain. You can upload Ogg Theora files to Wikimedia Commons.<br />
</p>
<p><img src="static/TheoraCookbook-HostingSites-Picture_24-en.png" alt="Picture_24.png" width="588" height="515" /></p>
<p><span id="ch018_introduction.xhtml"></span></p>
<h1>Introduction<br />
</h1>
<p><em>Encoding</em> is the process of creating a Theora file from raw, uncompressed source video material.  In case the source video material exists in some non-raw, compressed form, an intermediate decoding step is needed before creating the Theora video. This Decoding-Encoding is often referred to as Transcoding, though often Encoding is used as a synonym.</p>
<p>Software programs performing the encoding (resp. transcoding) are called encoders. Various Theora encoders exist, for example <a href="http://v2v.cc/~j/ffmpeg2theora/">ffmpeg2theora</a> and <a href="http://www.videolan.org/"><span>VLC</span></a> (<a href="http://en.wikipedia.org/wiki/Theora#Encoding" class="uri">http://en.wikipedia.org/wiki/Theora#Encoding</a>), to name just a few. <br />
</p>
<p>Before encoding the user has to decide on at least two parameters:<br />
</p>
<ul>
<li>the image quality of the created Theora file</li>
<li>the audio quality<br />
</li>
</ul>
<p>Depending on the encoder used, more options might be available to control the encoding process:</p>
<ul>
<li>clipping a configured amount of the frames' borders during encoding</li>
<li>rescaling the video resolution</li>
<li>changing the frame-rate of the video</li>
<li>handling the video-audio synchronisation<br />
</li>
<li>setting the keyframe-interval</li>
</ul>
<h2>Video Quality, Bit-Rate and File Size</h2>
<p>Most Theora encoders allow the user to directly specify the subjective quality of the encoded video, usually on a scale from 0 to 10. The higher the quality, the bigger the resulting Theora files.  Most encoders can alternatively be configured to encode for a given average target bitrate. While this option is useful for generating Theora video files for streaming, it sometimes yields sub-optimal quality.<br />
</p>
<p>Recent versions of some Theora encoders feature a two-pass encoding mode. Two-pass encoding allows the encoder to hit a configured target bit-rate with optimum video quality, and should thus be comparable to quality controlled encoding, though it comes at the cost of taking twice the encoding time. By nature live videos can not be generated with two-pass encoding.<br />
</p>
<p><span></span></p>
<h2>Video Resolution and Frame-Rate</h2>
<p>There can be good reasons to further reduce the height and width (video resolution) of your video when encoding to Theora. </p>
<ul>
<li>If the Encoder produces too large files, even at low quality settings around 0, then reducing the video resolution will help reduce the file size further<br />
</li>
<li>If your required maximum file size requires a very low quality setting of 0..3, leading to an unacceptable perceived quality then reducing the video resolution will mean more data can be dedicated to improving the quality<br />
</li>
<li>If the playback of the encoded video should work even on low-performance computers then a lower video resolution will assist this<br />
</li>
<li>If your source video material has resolution higher than standard-definition video. The Theora video codec is not designed for high-definition video and might not perform very well at it so it would be better to reduce the video resolution<br />
</li>
</ul>
<p>If your source video material has an unusually low resolution, and you can spare the bits, increasing the video resolution during encoding might have a positive effect on overall video quality.<br />
</p>
<p>Adjusting the frame-rate during encoding is generally a bad idea, as it often leads to jerking, reducing perceived quality by a large amount.  However, if you require a very low target file size, try reducing the frame-rate to exactly half the source frame rate. This might do the job of sufficiently reducing file size without degrading quality to an unacceptable level.</p>
<h2>Clipping the Frames in the Video</h2>
<p>Sometimes video source material does not make use of the full video frames, leaving black borders around the video. It is a good idea to remove black or otherwise unused parts from the video as this usually improves the quality and file size of the encoded Theora file. If possible, try to keep video width and height multiples of 16. The Theora format is capable of, but not very efficient at, storing video using other arbitrary frame sizes.<br />
</p>
<h2>Video-Audio Synchronization</h2>
<p>In an ideal world, the encoder would just copy the video-audio synchronization of the source video material to the created Theora file. In practice however, this is sometimes just not possible. Theora video files must adhere to a constant frame rate throughout the full file. Also the playback speed of the audio tracks is constant in Theora. Some source video material, however might not have a 100% constant frame rate.  Sometimes frames are just missing from the source video due to recording errors or as a result of using video cutting software.</p>
<p>In these cases, the encoding process must actively adjust audio-video synchronization. This is done either by duplicating and/or dropping frames in the video, or by changing the speed of the audio tracks.<br />
</p>
<h2>Keyframe-Interval</h2>
<p>Many Theora encoders allow changing a parameter named <em>keyframe interval.</em> A larger keyframe interval reduces the target file size without sacrificing quality. Keyframes are those frames in the video, which a player can directly seek to during playback. To seek to other points in the video, all frames from the last keyframe on have to be decoded first. In a video with 24 frames/second, a keyframe interval of 240 implies that direct seeking is only possible with a granularity of 10 seconds. Also cutting and concatenation of the encoded video will be limited to the keyframe granularity.</p>
<p>As a rule of thumb, never set the keyframe interval to more than 10 times the target video frame rate.</p>
<p><span id="ch019_firefogg.xhtml"></span></p>
<h1>Firefogg</h1>
<p>Firefogg is the name of an extension to the Firefox webbrowser that adds support for encoding your video files to Theora using a nice web interface. It also enables web-sites to provide a video-upload service that takes videos from your computer, converts them to Theora on-the-fly uploading the generated Theora file to a website.</p>
<h2>Installation</h2>
<p>Firefogg requires the Firefox web browser, at least version 3.5. If your version of Firefox is older, or in case you do not have Firefox installed at all, visit <a href="http://www.mozilla.com" title="www.mozilla.com">www.mozilla.com</a> to download an up-to-date version.</p>
<p>Once you have a recent Firefox version, use it to visit the Firefogg homepage at <a href="http://www.firefogg.org" title="www.firefogg.org">www.firefogg.org</a>:</p>
<p><img src="static/TheoraCookbook-FirefoggEncoding-ffi_00-en.png" title="ffi_00" alt="ffi_00" /><br />
</p>
<p>Now click on <em>Install Firefogg</em>. At the top of the page, Firefox now asks you to allow installation of the new software:</p>
<p><img src="static/TheoraCookbook-FirefoggEncoding-ffi_01-en.png" title="ffi_01" alt="ffi_01" /> </p>
<p>Click on <em>Alllow</em>, to pop up the following dialog:</p>
<p><img src="static/TheoraCookbook-FirefoggEncoding-ffi_02-en.png" title="ffi_02" alt="ffi_02" /></p>
<p>Click on <em>Install Now.</em> After installation, you are asked to restart Firefox.  Click on <em>Restart Firefox</em> to proceed.</p>
<h2>Encoding your first video</h2>
<p>To encode videos with Firefogg, you need an internet connection. Parts of the encoding software reside on the internet and will not be installed to your computer.</p>
<p>The encoding software is started by visiting <a href="http://firefogg.org/make" class="uri" title="Encode Videos with Firefogg">http://firefogg.org/make</a>. The following site shows up:</p>
<p><img src="static/TheoraCookbook-FirefoggEncoding-ffc_00-en.png" title="ffc_00" alt="ffc_00" /></p>
<p>Click on <em>Select File</em>, which pops up a file dialog allowing you to select the source video file to encode. In this example we are using the video <em>my_source_video.mp4.</em> After selecting the file, you are brought to a dialog that asks you for tuning encoding parameters:</p>
<p><img src="static/TheoraCookbook-FirefoggEncoding-ffd_01-en.png" title="ffd_01" alt="ffd_01" /> </p>
<p>For now, just select <em>Save Ogg.</em> You are asked to select the name of the Theora file to create.  Remember.  We select the name <em>my_theora_video.ogv</em> (remember, the correct file name extension for Theora videos is <em>.ogv</em>). Now encoding starts, using the default set of parameters:</p>
<p><img src="static/TheoraCookbook-FirefoggEncoding-ffd_03-en.png" title="ffd_03" alt="ffd_03" /><br />
</p>
<p>Now wait for the encoding to progress to 100% and you're done.<br />
</p>
<h2>Advanced Encoding Options</h2>
<p>Using the default set of parameters for encoding video yields very small Theora files optimized for web streaming. Perceived video quality will actually be quite low for most tastes. But wait, Firefogg is as advanced as most other Theora encoders.  After a little tuning, very high quality videos can be easily created. Tuning options are available on the web page below the <em>Save Ogg</em> button.<br />
</p>
<p>The easiest way to configure encoding is by selecting one of three presets available from the <em>Preset</em> menu:<br />
</p>
<p><img src="static/TheoraCookbook-FirefoggEncoding-ffc_04-en.png" title="ffc_04" alt="ffc_04" /></p>
<p>The first two presets called <em>Web Video Theora</em> and <em>Low Bandwidth Theora</em> are both optimized for streaming video over the internet.  If you intend to play back the created Theora file solely from CDs, USB sticks or your computer's hard disk, you should try to <em>not</em> use them.  Go for the <em>High Quality Theora</em> preset instead.</p>
<h3>Custom Settings</h3>
<p>More details of the encoding process can be configured by selecting <em>Custom Settings</em> and manually adjusting lower-level options in the other available menus. Lets have a look at the most important menu, <em>Basic Quality and Resolution Control</em>:</p>
<p><img src="../http:/en.flossmanuals.net/floss/pub/TheoraCookbook/FirefoggEncoding" width="0" height="0" /><img src="static/TheoraCookbook-FirefoggEncoding-ffc-06_1-en.png" title="ffc-06_1" alt="ffc-06_1" width="560" height="526" /></p>
<p>Here you can control the quality of the created Theora file, and also choose to change the frame size of the encoded video.  Encoding a video for a target quality (instead of a target bit rate) is the preferred encoding mode for Theora, so in most cases you won't want to try the encoding options in the other menus.<br />
</p>
<h2>Other Uses of Firefogg<br />
</h2>
<p>Once installed, Firefogg can be used on websites that support it. There is a list of sites that support Firefogg at <a href="http://firefogg.org/sites" class="uri" title="Sites using Firefogg">http://firefogg.org/sites</a>.</p>
<p><span id="ch020_vlc.xhtml"></span></p>
<h1>Encoding with VLC<br />
</h1>
<p>The VLC media player (<a href="http://en.flossmanuals.net/bin/view/TheoraCookbook/www.videolan.org" title="VLC media player">www.videolan.org</a>) allows easy encoding of video files to Theora. Encoding can either be performed via the graphical user interface (GUI), or from the command line. The following instructions have been written for use with VLC version 1.0.1 running on Ubuntu. Other versions may differ in details, though the overall process will be the same.<br />
</p>
<h2>Using the GUI<br />
</h2>
<p>When you start VLC, you are immediately greeted by its main window:<br />
</p>
<p><img src="static/TheoraCookbook-VLCEncoding-vlc-en.png" alt="User Interface of the Video LAN Client (VLC)" width="349" height="116" /></p>
<p>In the <em>Media</em> Menu select <em>Convert/Save</em>. This brings you to the following dialog:</p>
<p><img src="static/TheoraCookbook-VLCEncoding-convertb_01-en.png" alt="convertb_01.png" width="528" height="490" /></p>
<p>Under <em>File Selection</em> click <em>Add</em> and select the source video file for encoding.Then click on <em>Convert/Save</em> at the bottom. This leads you to the encoding dialog:</p>
<p><img src="static/TheoraCookbook-VLCEncoding-convertb_02-en.png" alt="convertb_02.png" width="520" height="389" /><br />
</p>
<p>Under <em>Destination</em> click <em>Browse</em> and select the location and name of the Theora file that you want to create. Remember that the correct file name extension for a Theora file is <strong>.ogv</strong>. Under <em>Settings</em> set the Profile to <em>&quot;Video - Theora + Vorbis (OGG)</em>&quot;.</p>
<p>Then press the <em>Start</em> button. This starts the encoding process and brings you back to VLC's main dialog:</p>
<p><img src="static/TheoraCookbook-VLCEncoding-convert_10-en.png" alt="convert_10.png" width="349" height="117" /></p>
<p>At the window's bottom, the text &quot;Streaming&quot; is now displayed. This indicates that it is busy encoding your file. The slider will slowly move to the right as encoding progresses. Once encoding is done, the slider jumps back to the left and the &quot;Streaming&quot; display disappears.<br />
</p>
<h2>Advanced Options </h2>
<p>If you are not satisfied with the encoding result, try adjusting some of the more advance encoding parameters. In the previous encoding dialog, before hitting <em>Start</em>, press the button with the &quot;tool&quot; icon, just to the left of the profile selection:</p>
<p><img src="static/TheoraCookbook-VLCEncoding-convertc_01-en.png" alt="convertc_01.png" width="504" height="123" /><br />
</p>
<p>This opens up a new dialog, with the 4 tabs, labeled; &quot;Encapsulation&quot;, &quot;Video codec&quot;, &quot;Audio codec&quot; and &quot;Subtitles&quot;. Make sure you do not change any parameters under &quot;Encapsulation&quot;. The video encoding options you need are under the &quot;Video codec&quot; tab, shown below:</p>
<p><img src="static/TheoraCookbook-VLCEncoding-converto_00-en.png" alt="converto_00.png" width="584" height="472" /><br />
</p>
<p>If your encoding result's video quality was too low, try increasing <em>Bitrate</em>. If your video source material has a very high resolution, try setting <em>Scale</em> to 0.5 to encode at half the original resolution. As of this writing, changing video resolution fails to work properly for some source material, when using VLC 1.0.1.</p>
<h2>Encoding from the Command Line<br />
</h2>
<p>If you are encoding a number of files to Theora, clicking through the VLC dialog windows can become tedious and error-prone. Here VLC's command line interface comes to the rescue. While not as intuitive as the GUI, it allows you to exactly repeat an encoding process with constant parameters.<br />
</p>
<p>Use the following command to encode your source video, (in the example below the files are called &quot;my_source_video.mp4&quot; to &quot;my_theora_video.ogv&quot; you can of course, use whatever name you want) with the same parameters as used in the GUI example above:</p>
<pre><code>vlc my_source_video.mp4 \
      --sout=&quot;#transcode{vcodec=theo,vb=800,scale=1,
      deinterlace=0,acodec=vorb,ab=128,channels=2,\
      samplerate=44100}:standard{access=file,mux=ogg,\
      dst=&#39;my_theora_video.ogv&#39;}&quot;</code></pre>
<p>All the parameters that had previously been specified in the advanced encoding options dialog window, are now given in text form. The only options whose meaning might not be immediately obvious are <em>vb</em> which means video bitrate and <em>ab</em>, which refers to the bitrate of the encoded audio.<br />
</p>
<h3>Recommended Encoding Options</h3>
<p>The command line shown above merely utilizes the parameter set provided by the GUI interface, which is in no way optimized for Theora encoding. We can do much better by using options that are exclusively available on the command line only. A better option might be to use the following command line as a basis for encoding. Tweak it to suit your needs:</p>
<pre><code>vlc my_source_video.mp4 \
    --sout-theora-quality=5 \
    --sout-vorbis-quality=1 \
    --sout=&quot;#transcode{venc=theora,vcodec=theo,\
           scale=0.1,deinterlace=0,croptop=0,\
           cropbottom=0,cropleft=0,cropright=0,\
           acodec=vorb,channels=2,samplerate=44100}\
           :standard{access=file,mux=ogg,\
                     dst=&#39;my_theora_video.ogv&#39;}&quot;</code></pre>
<p>In this example video and audio quality are specified as numbers in the range 0 (low quality) up to 10 (highest quality). In case you want to remove black or noisy borders around the video, adjust the options <em>croptop</em> through <em>to cropright</em>.</p>
<p>These examples require that your VLC installation comes with the VLC Theora plugin. Verify the plugin's presence by typing:</p>
<pre><code>vlc -p theora</code></pre>
<p>Even if this prints out <em>&quot;No matching module found&quot;</em> it may still be possible to encode to Theora, by using the ffmpeg plugin that supports Theora as well. However, the advanced <em>&quot;--sout-theora-quality&quot;</em> option is not available with ffmpeg.<br />
</p>
<h3>Why not to use the GUI<br />
</h3>
<p>The Theora codec works best when encoding for a specified video quality. Encoding for a given target bitrate will always give inferior results for a file of the same size. Unfortunately there is no way to specify target video quality via the GUI, which is why you just shouldn't use it for any kind of professional encoding work. Also, note that you cannot crop borders of the video when encoding from the VLC GUI. </p>
<p>Keep in mind that this chapter was written using the 1.0.1 version of VLC, which was current at the time of this writing. Newer versions may outgrow these limitations.<br />
</p>
<p>⁞</p>
<p><span id="ch021_ffmpeg2theora.xhtml"></span></p>
<h1>ffmpeg2theora</h1>
<p>ffmpeg2theora is a very advanced Theora encoding application. The advanced functionality comes at the price of having to use a command line, as no graphical user interface is provided. For GNU/Linux, Mac OS X and Windows download ffmpeg2theora from <a href="http://v2v.cc/~j/ffmpeg2theora/download.html" class="uri" title="ffmpeg2theora download">http://v2v.cc/~j/ffmpeg2theora/download.html</a>. If you are running a recent version of GNU/Linux, chances are good that your distribution already comes with software packages for ffmpeg2theora, that can be installed with the distribution's software packet manager.</p>
<h2>Basic Usage</h2>
<p>Open a command prompt and enter:<br />
</p>
<pre><code>ffmpeg2theora my_source_video.mp4 -o my_theora_video.ogv</code></pre>
<p> This encodes the source video file &quot;my_source_video.mp4&quot;, creating a new Theora video file named &quot;my_theora_video.ogv&quot;.<br />
</p>
<h2>Adding Parameters<br />
</h2>
<p>When you are unhappy with the result of encoding, it's time to start tuning encoding parameters. We'll start with setting the video quality of the encoded video. Quality is given as a number in range 0 (lowest quality, smallest file) up to 10 (highest quality, largest file). Try this to encode at a high video quality of 9, and a very high audio quality of 6:</p>
<pre><code>ffmpeg2theora my_source_video.mp4 -o my_theora_video.ogv \
    --videoquality 9 --audioquality 6</code></pre>
<p>The following example exposes the basic encoding parameters. Just copy-paste and adjust it to your needs:</p>
<pre><code>ffmpeg2theora my_source_video.mp4 -o my_theora_video.ogv \
    --videoquality 9 --audioquality 6 \
    --croptop 0 --cropbottom 0 --cropleft 0 --cropright 0 \
    --width 720 --height 576 \
    --title &quot;Video Title&quot; --artist &quot;Artist Name&quot; --date &quot;1997-12-31&quot;</code></pre>
<p>If you do not wish to scale the video's frame size, drop the <em>--width</em> and <em>--height</em> options. There is no way to specify a scale factor, so check the input video's size and computing the target frame size as required. In most cases it is better to only specify one of the <em>--width</em> or <em>--height</em> options, the missing option is then automatically adjusted to a correct value.<br />
</p>
<h2>Advanced Options</h2>
<p>Ffmpeg2theora supports a multitude of other parameters for advanced use, which cannot all be described in detail here. To get an overview of all available options and short descriptions, type:</p>
<pre><code>ffmpeg2theora --help</code></pre>
<p>Depending on the operating system you are using, you <em>might</em> be able to open up the ffmpeg2theora manual by typing</p>
<pre><code>man ffmpeg2theora</code></pre>
<p> The following options often prove useful:</p>
<h5>--sync</h5>
<p>Copy any audio-video synchronization of the source video file to the destination Theora video. Depending on the source video used, this may fix problems of audio-video delay drift introduced by the encoding process.<br />
</p>
<h5>--keyint &lt;N&gt; </h5>
<p>Set the keyframe interval, i.e. the number of frames between keyframes, of the generated file. Large values of <em>&lt;N&gt;</em> lead to a reduced file size, however seeking and cutting does not work well with Theora files that have a large keyframe interval.</p>
<h5> --framerate &lt;N&gt;</h5>
<p>Set the frame rate of the generated video file. In case you are attempting to create Theora videos with extremely small file size, try specifying half the input video's framerate.</p>
<h5> --starttime &lt;N&gt;  --endtime &lt;M&gt;</h5>
<p>These two options allow you to copy only a part of the source video when encoding. Specify <em>&lt;N&gt;</em> and <em>&lt;M&gt;</em> as the number of seconds from the start of the video.<br />
</p>
<h2>Two-Pass Encoding</h2>
<p>The upcoming version 0.25 of ffmpeg2theora is going to support a two-pass encoding mode, which is described in this section. Once version 0.25 is released, just download it from <a href="http://v2v.cc/~j/ffmpeg2theora/download.html" class="uri" title="ffmpeg2theora download">http://v2v.cc/~j/ffmpeg2theora/download.html</a>. The examples given below are not going to work with older versions.<br />
</p>
<h3>Why Two-Pass Encoding</h3>
<p>A lot of hype is surrounding two-pass encoding. Many people assume that you need to encode in two passes to achieve a constant subjective quality throughtout a video. This is how it used to be for many non-free video codecs such as DivX. However, as we have seen, ffmpeg2theora is well capable of encoding for a constant target quality in a single pass using option -<em>-videoquality</em>.</p>
<p>The only real advantage of using two-pass mode over using <em>--videoquality</em>, is the ability to create a Theora video of a given file size. Imagine you want to encode a video, which must fit onto a single CD with 700 MB of available storage. You want a constant video quality, but in advance you can't possibly guess which <em>--videoquality</em> will exactly hit 700 MB. Using two-pass mode exactly achieves that.</p>
<h5>Using Two-Pass Mode</h5>
<p>So you want to encode &quot;my_source_video.mp4&quot; into a Theora video, with a file size of exactly 700 MB. ffmpeg2theora does not allow you to directly specify the size of the encoded file. Instead you specify the average video bitrate for the video. Note that the audio is also going to require some data, which has to be taken into account.</p>
<p>To decide on an average video bitrate for the file we first need to find out the duration of the source video &quot;my_source_video.mp4&quot;. Ffmpeg2theora can help us with that. Type:</p>
<pre><code>ffmpeg2theora --info &quot;my_source_video.mp4&quot;</code></pre>
<p>Which prints, among other information:</p>
<pre><code>{
  &quot;duration&quot;: 2365.165100,
  &quot;bitrate&quot;: 6437.331055,
 [..]
}</code></pre>
<p> The <em>duration</em> shown is in seconds. If we divide the available 700 MB of space by the 2365 seconds to encode, we come to an average <em>byte</em> rate of 296 kByte/s. Multiplied by 8 we get the average <em>bit</em> rate of 2368 kBit/s.<br />
</p>
<p>We cannot use the full 2368 kBit/s for our video only. We also have an audio track, that is going to take 128 kBit/s. The average video bit rate we can use is thus 2240 kBit/s. Of this we subtract another 1% to account for any overhead in the encapsulation that is used to contain the video and audio tracks. This leaves us with 2218 kBit/s for the video and 128 kBit/s for the audio.<br />
</p>
<p>The following command is going to perform the two-passs encoding, creating the Theora video file &quot;my_theora_video.ogv&quot;:</p>
<pre><code>ffmpeg2theora my_source_video.mp4 -o my_theora_video.ogv \
    --two-pass --videobitrate 2218 --audiobitrate 128</code></pre>
<p>Note that unlike other two-pass encoders, only <em>one</em> invocation of the ffmpeg2theora command is required. If you require more control, performing cropping, scaling etc., feel free to copy-paste other options from the examples given in previous sections.<br />
</p>
<p><span id="ch022_thoggen.xhtml"></span></p>
<h1>Thoggen</h1>
<p>Thoggen  <a href="http://www.thoggen.net">(</a><a href="http://www.thoggen.net/" class="uri">http://www.thoggen.net/</a>)  is a simple, easy to use DVD extraction program for GNU/Linux, to  create Theora videos. Note that only the video part of DVDs can be encoded; any menus present on the DVD are going to be stripped out.<br />
</p>
<p>Encoding a DVD using Thoggen involves two steps:</p>
<ol>
<li>Selecting the DVD titles to extract and encode</li>
<li>Configuring parameters of the encoding process </li>
</ol>
<p>If you do not have Thoggen installed you will have to first do this of course. If you are running Ubuntu simply type this in a terminal window :</p>
<pre><code>sudo apt-get install thoggen</code></pre>
<p>You will be asked for your password, and then Thoggen will be installed.<br />
</p>
<h2>Selecting the DVD Titles to Encode</h2>
<p>Upon starting, Thoggen will automatically detect any DVD media present in any DVD drive, presenting a list of titles it found on the DVD:</p>
<p><img src="static/TheoraCookbook-thoggen1-en.png" alt="thoggen1.png" width="342" height="436" /></p>
<p>You are asked to select the titles that are going to be extracted and converted to Theora. The longest title is selected by default, as this is usually the main video. If this is not what you actually want, change it to suit your needs.<br />
</p>
<p>Note that you may also convert from a DVD image on your hard drive, instead of directly from a DVD. To do this select the image location from the 'File' menu. The same list of titles will then be displayed, as if it was taken directly from the physical DVD.<br />
</p>
<p>When done selecting, press <em>OK</em> and you will be taken to the next dialog.</p>
<h2>Configuring the Encoding Process</h2>
<p>The following dialog now allows you to specify parameters of the encoding process: </p>
<p><img src="static/TheoraCookbook-thoggen2-en.png" alt="thoggen2.png" width="460" height="687" /></p>
<p>If you selected more than one video in the previous step, this window will be presented once for each of them. For multi-language DVDs use this dialog to select which languages to include. Select the quality and video size, and where to save the video. If unsure which option to choose, just go with the defaults. Note that video quality is specified as a number in range 1 (lowest quality, smallest output file) to 63 (highest quality, largest file)<br />
</p>
<p>When you are happy with the settings, press <em>OK</em>, to start the encoding. You are then presented with a slideshow preview of the video along with a progress bar, while waiting for the encoding process to finish.<br />
</p>
<p>You can now use VLC, or any other player supporting Theora, to view your copy of the DVD, without having to actually search for and insert the DVD into the drive whenever you want to watch your movie.</p>
<h2>A Note on Cropping</h2>
<p>Thoggen can remove borders at the left, right, top and bottom when encoding the DVD, available from the <em>Configure Cropping</em> button. It is often actually a good idea to remove about 5% the movie's width and height. This is due to the fact that DVDs are manufactured with ancient analog televisions in mind, hence there are usually borders around the movie. Older DVDs sometimes contain noise and artifacts in the movie borders, only visible when playing the DVD on a PC.<br />
</p>
<p>For a typical DVD resolution of 720x576 pixels, try cropping 8 pixels on the left, right, top and bottom, leaving a total frame size of 704x560.</p>
<p><span id="ch024_introduction.xhtml"></span></p>
<h1>Subtitles</h1>
<p>Most videos include people speaking in a certain language; to make these video accessible and understandable to a global audience the video must be subtitled or dubbed. Subtitles are by far the easiest to produce: audio dubbing requires time and software expertise, but you can create subtitles with just a video player and a text editor.</p>
<p><img src="static/VideoTranslation-Subtitles-subtitle_example_image-en.jpg" title="subtitle_example_image" alt="subtitle_example_image" width="500" height="365" /></p>
<h2>Finding Subtitles</h2>
<p>Before starting a subtitling translation project, it's worth searching for existing subtitles, particularly if the video is a well-known or commercial work. For example, if you are including a scene from an American documentary in a video, there are resources to search for subtitles for this material.  However, outside of well-known video and films, pre-created subtitles are rare, and subtitles available under an open license are even harder to find.<br />
<br />
There are a few issues that come up when searching for subtitles. For cinematic films, for example, there are almost invariably many different versions of the film. One can imagine that any extra scene, extended title sequence, or formatting change can alter the timing of subtitles onscreen which many times renders subtitles useless. Therefore, it is important to find subtitles that are accurate for the audio of the particular film version. There are free software tools like Sub Downloader (<a href="http://www.subdownloader.net/" class="uri">http://www.subdownloader.net/</a>) that help with this problem by matching subtitle sets to specific film versions. Another issue that comes up is the file format of the subtitle file itself. There are different formats for different types of video as well as different types of physical media (HD, DVD, Blu Ray etc.) which affect the selection of subtitles for a given piece of film.<br />
<br />
The following are resources for finding subtitles :</p>
<ul>
<li>OpenSubtitles.org: <a href="http://www.opensubtitles.org/en%20">http://www.opensubtitles.org/en</a></li>
<li>TinyTM: <a href="http://tinytm.sourceforge.net/%20">http://tinytm.sourceforge.net/ </a></li>
<li>DivX Subtitles: <a href="http://www.divxsubtitles.net/" class="uri">http://www.divxsubtitles.net/</a> </li>
<li>AllSubs.org <a href="http://www.allsubs.org%20">http://www.allsubs.org</a><br />
</li>
</ul>
<h2>Subtitle File Formats</h2>
<p>A subtitle file format specifies the format of a file (text or image) containing the subtitle and timing information. Some text-based formats also allow for specifying styling information, such as colors or location of the subtitle.<br />
<br />
Some subtitle file formats are:</p>
<ol>
<li>Micro DVD (.sub) - a text-based format, with video frame timing, and no text styling</li>
<li>Sub Rip (.srt) - a text-based format, with video duration timing, and no text styling </li>
<li>VOB Sub (.sub, .idx) - an image-based format, generally used in DVDs </li>
<li>Sub Station Alpha / Advanced Sub Station (.ssa, .ass) - a text-based format with video duration timing, and text styling and metadata information attributes. </li>
<li>Sub Viewer (.sub) - a text-based format with video duration timing, text styling and metadata information attributes.  <br />
</li>
</ol>
<p>We will only focus on the subtitle format Sub Rip (.srt), which is supported by most software video players and subtitle creation programs. SRT files can also be created and edited by text editors, or more specialised software like Jubler, GnomeSubtitle, Gaupol and SubtitleEditor.<br />
</p>
<h2>Editing SRT files</h2>
<p>An SRT subtitle file is just a text file that is formatted in a simple way so the player can read it and co-relate subtitles to the time they should be played in the video. SRT is a very simple, widely used subtitle format. If you find an existing SRT file for the video you need to subtitle, it's easy to create subtitles for other languages when you know how an SRT file works.<br />
</p>
<p>A SRT file is made of a list of lines looking like this:<br />
</p>
<pre><code>  1
  00:03:05,260 --&gt; 00:03:07,920
  Hello, world.</code></pre>
<p>The first line is the number of the subtitle, incrementing from 1 to as many as needed. The second line is the time at which the subtitle appears and disappears in the video, and is recorded in hours:minutes:seconds,milliseconds. The third line, and any lines after it up to the first blank line, are the subtitle text. One blank line is required to mark the end of the subtitle text. You can add as many such triplets as you need for the remaining subtitles.</p>
<p>For the above example, it just means that the first subtitle shows up at 3 minutes 5.26 seconds into the video, disappears at 3 minutes and 7.92 seconds, and reads &quot;Hello, world&quot;. That's it.</p>
<h2>Creating subtitles from scratch</h2>
<p>To create a subtitle file from scratch, you may want a more advanced tool that makes it easier to assign subtitles to specific points in a video.  Jubler, GnomeSubtitle, Gaupol and SubtitleEditor are all free software tools, and worth checking out. </p>
<p>FLOSS Manuals has created a complete guide to Jubler (which is both free software and cross-platform).  You can find the guide here: <a href="http://en.flossmanuals.net/jubler" class="uri">http://en.flossmanuals.net/jubler</a><br />
</p>
<p><span id="ch025_distribution.xhtml"></span></p>
<h1>Distribution</h1>
<p>Using a subtitle format like .SRT means that you can distribute subtitles for many different languages without distributing a different version of your video for each language.  You just need to make separate .SRT subtitle files for every required language, and make those files available on the web.<br />
</p>
<p>This strategy is very common in the world of subtitles. Including the subtitles as a separate files allows that file to be accessed, changed, or removed without affecting the video file itself. The disadvantage of this technique is that the subtitle file format becomes an issue. Players must accept the format in order to properly display the subtitles. And users must know a little bit about how subtitles work in order to play the subtitle files correctly.  If you're distributing .SRT files with a downloadable video, be sure to include some instructions on how to retrieve and play the subtitles.  If you're distributing video on the web, you can use HTML5 and javascript to offer different subtitle tracks on your webpage.  <br />
</p>
<p>Its also possible to explore embedding multiple .srt files within the video file itself. This provides the user with the option to choose from among the translations you make available (or to display no subtitles at all) without the need for additional subtitle files. Patent-unencumbered video container formats that support this include Matroska Multimedia Container (MKV) and the Ogg container format.<br />
</p>
<p><span id="ch026_embedding-subtitles.xhtml"></span></p>
<h1>Embedding Subtitles<br />
</h1>
<p>If you want your video file to contain a subtitle file, so you don't have distribute the .srt file separately, you need to embed the subtitle file into the video. The video encoding tool <strong>ffmpeg2theora</strong> has a few command line options to include subtitles in your video.</p>
<p>ffmpeg2theora us available for most operating systems, including Windows, Mac OS X, and GNU/Linux.<br />
</p>
<p>Related to subtitles three commands are important:</p>
<ul>
<li>--subtitles pointing to a subtitle file in SRT format,</li>
<li>--subtitles-language to define the language of the subtitles</li>
<li>--subtitles-encoding to specify the character set of the subtitles file used.<br />
</li>
</ul>
<p>Lets have a look at some of the required options for using ffmpe2theora for embedding srt files in a Theora video file.<br />
</p>
<p><strong>subtitles-language</strong> - This option sets the specified language.  Every language has a standard code, which helps people describe a language, whatever their own language.  For example, in English the language spoken in Germany is called German, but in Germany, it's called Deutsch.  To prevent confusion, there is an international standard (ISO 639-1) that represents each language with a two letter code. In our example, the code for German is 'de'. <br />
<br />
<strong>subtitles-encoding</strong> - This option specifies the encoding standard for text, a complexity necessary given varying strategies for representing the wide range of characters used by all languages on earth.  For a long time, computers used 7-bit character sets of 127 characters to represent the alphabet and other writing symbols. For example, US-ASCII has 94 printing characters and 33 control codes. Numerous 8-bit character sets, with 256 codes, have appeared since then for alphabets and syllabaries, and several encoding systems using 16-bits for writing systems based on Chinese characters. However, 7 or even 8 bits is not enough space for all the typographical symbols in even one alphabet, much less for the dozens of writing systems in use today.  People created the Unicode Character Set to support all languages at once.  The UTF-8 encoding of Unicode is specified for use &quot;on the wire&quot;, that is, in all external communications between systems.<br />
</p>
<p>However, a lot of people still use old encodings. The bad thing about these is that they overlap, using the same set of codes for completely different characters. The usual result of rendering a text according to an incorrect encoding is gibberish.  So, by default, subtitles are expected to be in Unicode UTF-8 encoding. If they are not, you need to tell ffmpeg2theora.  If you're writing in English, chances are you'll be writing in ASCII, ISO-8859-1 (Latin-1), or possibly Windows code page 1252. By design, US-ASCII is a subset of UTF-8, so you'll be OK there, but you will get into trouble if you use any extension of ASCII in a Unicode context.</p>
<h2>Example commands for subtitle embedding<br />
</h2>
<p><br />
Here  are a few examples that take an existing mp4 video file (input.mp4) and output a ogg video file (output.ogg) with embedded subtitles :<br />
<br />
If you have a subtitles file in English (the language code for English is 'en'):<br />
</p>
<pre><code>ffmpeg2theora input.mp4 --subtitles english-subtitles.srt --subtitles-language en -o output.ogv</code></pre>
<p>If you have a subtitles file in Spanish, encoded in latin1 :<br />
</p>
<pre><code>ffmpeg2theora input.mp4  --subtitles spanish.srt --subtitles-language es --subtitles-encoding latin1 -o output.ogv</code></pre>
<p>There are other subtitles options for ffmpeg2theora, but these are the main ones.</p>
<h2>Adding subtitles to an existing video<br />
</h2>
<p>If you have a Theora video with no embedded subtitles, it's easy to add some too, without the need to encode the video again. Since each subtitles language is stored in the Ogg file separately, they can be manipulated separately.</p>
<p>Internally, subtitles embedded in an Ogg file are encoded as <strong>Kate streams</strong>. Such streams are created by ffmpeg2theora, but can also be created 'raw' from a SRT file. The kateenc tool does this. On Ubuntu kateenc is part of the kate-tools package. To install do this:</p>
<pre><code>sudo apt-get install libkate-tools</code></pre>
<p>For instance, the following creates a new English subtitles stream from a SRT file. Remember, the code for English is 'en':<br />
</p>
<pre><code>kateenc -t srt -o english-subtitles.ogg english.srt -c SUB -l en</code></pre>
<p>Now you've got a single subtitles stream, which you can add to your Theora video:</p>
<pre><code>oggz-merge -o video-with-subtitles.ogv original-video.ogv english-subtitles.og</code></pre>
<p>On Ubuntu oggz-merge is part of the oggz tools package, to install, do this:<br />
</p>
<pre><code>sudo apt-get install oggz-tools</code></pre>
<p>In fact, the oggz tools allow more more powerful manipulation of all the different tracks in the video, so you can add more audio languages too, etc. </p>
<p><span id="ch027_playing-subtitles.xhtml"></span></p>
<h1>Playing Subtitles<br />
</h1>
<p>There are several easy ways to play back subtitles with an Ogg Theora video.</p>
<h2>VLC</h2>
<p>First, install VLC from the website (<a href="http://videolan.org/vlc" class="uri">http://videolan.org/vlc</a>) if you haven't already.  These instructions assume you have a file or DVD with subtitles which you want to display while you are playing the Video.<br />
</p>
<p>There are three ways you may want to use VLC to display subtitles.</p>
<ol>
<li>From a DVD</li>
<li>From a Multilingual file (ie Matroska) </li>
<li>From a separate subtitle file which is distributed with the Video file.<br />
</li>
</ol>
<h2>Play subtitles on a DVD disk</h2>
<p>To do this put the DVD disk into your DVD drive. Open up VLC player and select <strong>File &gt; Open Disk</strong>.<br />
<br />
<img src="static/VideoDistribution-pvimages-vlc1-en.jpg" alt="open disk" /><br />
 <br />
Enter the DVD Drive letter. It may appear automatically. On Windows this may be drive D:, and on GNU/Linux something like /media/dvd.<br />
<br />
<img src="static/VideoDistribution-pvimages-vlc2-en.jpg" alt="chose drive" /><br />
<br />
Then click OK. The menu page of your DVD should appear. Click on the video you want to watch. Then when the video starts quickly right hand click the mouse on the Video image. Select the Subtitle track you wish to view.<br />
<br />
<img src="static/VideoDistribution-pvimages-vlc3_1-en.jpg" title="vlc3_1" alt="vlc3_1" width="600" height="588" /><br />
<br />
The subtitles should then appear on screen.<br />
</p>
<h2>Play subtitles in Matroska files</h2>
<p>The process for this is exactly the same as above except when starting the process you select <strong>File &gt; Open File</strong>. You then see this screen.<br />
<br />
<img src="static/VideoDistribution-pvimages-vlc_file1-en.jpg" alt="file open vile" /><br />
<br />
You should then click on the <strong>Browse</strong> button to select the video file you want to play. If this file is a matroska file with an *.mkv extension then you can click OK after browsing for the file as the file already has the subtitle infomation.</p>
<p>Then  Select the subtitle language stream by right clicking the video screen and selecting <strong>Subtitle Track &gt;</strong> and choose the language</p>
<p><img src="static/VideoDistribution-pvimages-vlc3_1-en.jpg" title="vlc3_1" alt="vlc3_1" width="600" height="588" /></p>
<h2>Play External Subtitles</h2>
<p>If you want to play an external subtitle file for example a srt file. Select <strong>File &gt; Open File</strong></p>
<p><img src="static/VideoDistribution-pvimages-vlc_file1-en.jpg" alt="file open vile" /></p>
<p>In the <strong>Open</strong> box click the <strong>Browse</strong> button and choose your video file.</p>
<p>Then put a tick in the box <strong>Use a subtitle file,</strong> and click Browse to locate your external subtitle file.</p>
<p><img src="static/VideoDistribution-pvimages-vlc3_1-en.jpg" title="vlc3_1" alt="vlc3_1" width="600" height="588" /></p>
<p>Then  Select the subtitle language stream by right clicking the video screen and selecting <strong>Subtitle Track &gt;</strong> and select the track of subtitles (for an external file like an srt file there will normally only be one track).</p>
<p><span id="ch028_publishing.xhtml"></span></p>
<h1>Publishing<br />
</h1>
<p>Depending on how you created the subtitles - embedded in the video or as a separate .srt file - you have different options to publish it online with your video.<br />
</p>
<h2>Hosting external subtitle files along with video on a web server</h2>
<p>We will assume you have one or more subtitles (in SRT format) and the video itself.</p>
<p><strong>HTML5 <em>video</em> tag and</strong> <strong>Javascript<br />
</strong></p>
<p>You can offer a web preview of Theora video alongside a given .srt with the help of jquery.srt. </p>
<p>Firstly, notice below that we will integrate JQuery, a popular GPL Javascript library (<a href="http://jquery.com/" class="uri">http://jquery.com/</a>), and an example Javascript implementation of displaying subtitles in a webpage from a SRT file available at: <a href="http://v2v.cc/~j/jquery.srt/jquery.srt.js" class="uri">http://v2v.cc/~j/jquery.srt/jquery.srt.js</a></p>
<p>A simple HTML document excerpt is shown below, which includes the modification to include the Javascript files and to reference to your subtitle file. Only one subtitle file can be referenced at a time, unless you start developing further with Javascript. <br />
</p>
<p>It is a small script that can load an srt file and display it inside a <em>div</em> on your page, under the video or as an overlay.<br />
</p>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;../jquery.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;../jquery.srt.js&quot;&gt;&lt;/script&gt;

&lt;video src=&quot;../http://example.com/video.ogv&quot; id=&quot;video&quot; controls&gt;
&lt;/video&gt;
&lt;div class=&quot;srt&quot;
     data-video=&quot;video&quot;
     data-srt=&quot;http://example.com/video.srt&quot; /&gt;</code></pre>
<p>this example could look like this on your page.<br />
</p>
<p><img src="static/TheoraCookbook-subtitles-jquert_srt-en.png" alt="jquert_srt.png" width="529" height="340" /></p>
<p> </p>
<p>For another example using subtitles in several languages, you can have a look at this demo from Mozilla <a href="http://people.mozilla.com/~prouget/demos/srt/index2.xhtml" class="uri">http://people.mozilla.com/~prouget/demos/srt/index2.xhtml</a><br />
</p>
<p>Another example using multiple subtitles and providing an interface to select them can be found at <a href="http://www.annodex.net/~silvia/itext/" class="uri">http://www.annodex.net/~silvia/itext/</a>.</p>
<h2>Hosting video with embedded subtitles on a web server<br />
</h2>
<p>If you have Ogg files with embedded subtitles and want to display those in the browser, you can use the <em>video</em> tag right now.  However, not all browsers support the video tag.  Cortado, a Java plugin that can play Theora videos, also has support for embedded subtitles, and it works in all browsers that have the Java installed.  You can get the latest version of Cortado from <a href="http://www.theora.org/cortado/" class="uri">http://www.theora.org/cortado/</a><br />
</p>
<pre><code>&lt;applet code=&quot;com.fluendo.player.Cortado.class&quot; archive=&quot;cortado.jar&quot;
        width=&quot;512&quot; height=&quot;288&quot;&gt;
    &lt;param name=&quot;url&quot; value=&quot;video.ogv&quot;/&gt;
    &lt;param name=&quot;kateLanguage&quot; value=&quot;en&quot;&gt;
&lt;/applet&gt;</code></pre>
<p>To use subtitles with Cortado. you pass it the url to the video with embedded subtitles and in the same way you pass a parameter for the subtitles track to use. The easiest way is to select the language you want via the kateLanguage parameter:<br />
</p>
<pre><code>  &lt;param name=&quot;kateLanguage&quot; value=&quot;en&quot;&gt;</code></pre>
<p>It is also possible to change or disable the subtitle via Javascript. If you want to switch to French subtitles, you could set the kateLanguage option from your script by calling:<br />
</p>
<pre id="ch028_publishing.xhtml#line1"><code>  document.applets[0].setParam(&quot;kateLanguage&quot;, &quot;fr&quot;);</code></pre>
<p><br />
</p>
<p><span id="ch030_accessibility.xhtml"></span></p>
<h1><strong>Web Video Accessibility</strong></h1>
<p>When we talk about Web video here, we explicitly refer to video published in Ogg Theora/Vorbis format inside a Web browser that supports the HTML5 video element.<br />
</p>
<p>Accessibility of video refers to several different aspects of usability of video, depending on what user group we are looking at. So, before diving into the different aspects and how they can be supported, we list the user groups and their specific requirements.</p>
<h2>Accessibility user groups<br />
</h2>
<ol>
<li><strong>Non-native speakers</strong>: when watching a video in a foreign language, it is impossible to follow. For this purpose, subtitles have been invented. <em>Subtitles</em> are time-aligned transcriptions of the spoken words in a video, which have been translated into different non-native languages. Alternatively, an audio track in the native language can also be created, which then replaces the original audio track. This is called <em>dubbing</em>.<br />
</li>
<li><strong>Deaf or hard-of-hearing (HoH)</strong>:when a HoH person is watching a video, it is impossible to follow because none of the sounds and spoken words are perceived. <em>Captions</em> are time-aligned transcriptions of the spoken words and the noises, sound effects, music and other sounds in a video.</li>
<li><strong>Blind or vision-impaired (VI)</strong>: when a VI person is trying to &quot;watch&quot; a video, without special help it is not possible to interact with the video player controls in the first place, and secondly it is impossible to follow the video because none of the visual displays are translated into signals that VI person can perceive. Firstly then it is important to make the <em>video controls accessible</em>. Secondly it is important to provide a time-aligned description of the visual channel. There are two senses that can be used to replace the visual channel: hearing and touch. In order to provide an aural representation of the visual content, we can either create a <em>spoken audio description (AD)</em> through an additional audio track for the video, or we can create a <em>textual audio description (TAD)</em> that a screen reader will read out in a time-aligned manner. Similarly, the TAD can also be output to a braille device, such that a VI person can perceive the visual channel through touch.</li>
</ol>
<h2>Accessible HTML5 video controls</h2>
<p>A key accessibility challenge for browser vendors with the HTML5 video element is to make the default controls accessible through the keyboard. The HTML5 video element provides an attribute called <em><a href="http://en.flossmanuals.net/TheoraCookbook/HTML5" title="HTML5 video element">controls</a></em> which requests the browser to create default controls on top of the video.</p>
<p>Here is what the current specification says:</p>
<p>“This user interface should include features to begin playback, pause playback, seek to an arbitrary position in the content (if the content supports arbitrary seeking), change the volume, and show the media content in manners more suitable to the user (e.g. full-screen video or in an independent resizable window).”</p>
<p>In Firefox 3.5, the controls attribute currently creates the following controls:</p>
<ul>
<li>play/pause button (toggles between the two)</li>
<li>slider for current playback position and seeking (also displays how much of the video has currently been downloaded)</li>
<li>duration display</li>
<li>roll-over button for volume on/off and to display slider for volume</li>
<li>FAIK fullscreen is not currently implemented</li>
</ul>
<p>Further, the HTML5 specification prescribes that if the <em>controls</em> attribute is not available, “user agents may provide controls to affect playback of the media resource (e.g. play, pause, seeking, and volume controls), but such features should not interfere with the page’s normal rendering. For example, such features could be exposed in the media element’s context menu.”</p>
<p>In Firefox 3.5, this has been implemented with a right-click context menu, which contains:</p>
<ul>
<li>play/pause toggle</li>
<li>mute/unmute toggle</li>
<li>show/hide controls toggle</li>
</ul>
<p>When the controls are being displayed, there are keyboard shortcuts to control them:</p>
<ul>
<li><em>space bar</em> toggles between play and pause</li>
<li><em>left/right arrow</em> winds video forward/back by 5 sec</li>
<li><em>CTRL+left/right arrow</em> winds video forward/back by 60sec</li>
<li><em>HOME+left/right</em> jumps to beginning/end of video</li>
<li>when focused on the volume button, <em>up/down arrow</em> increases/decreases volume.</li>
</ul>
<p>To make these controls accessible to VI users, Firefox exposes them to screen readers using MSAA or AT-SPI. It implies having to use focus mode for now. <a href="http://www.marcozehe.de/2009/06/11/exposure-of-audio-and-video-elements-to-assistive-technologies/" title="status of video controls accessibile in Firefox">Exposure through iSimpleDOM interfaces on Windows</a><a href="http://www.marcozehe.de/2009/06/11/exposure-of-audio-and-video-elements-to-assistive-technologies/)">(</a><a href="http://www.marcozehe.de/2009/06/11/exposure-of-audio-and-video-elements-to-assistive-technologies/" class="uri">http://www.marcozehe.de/2009/06/11/exposure-of-audio-and-video-elements-to-assistive-technologies/</a>)  are still in development. Once in focus mode, the keyboard shortcuts listed above make the video controls accessible.<br />
</p>
<h2>Providing video accessibility data</h2>
<p>As described above, accessibility for a particular video is provided through creating additional data that accompanies the original video. A fully accessible video may consist of all of the following:</p>
<ul>
<li>original video track</li>
<li>original audio track</li>
<li>audio tracks that contain dubs in foreign languages<br />
</li>
<li>captions in all languages (which also covers the need for subtitles)<br />
</li>
<li>audio tracks that contain spoken audio descriptions in all languages</li>
<li>textual audio descriptions in all languages<br />
</li>
</ul>
<p>All of the mentioned data that provides accessibility to video is time-aligned with the original video. It can be provided in two different ways:</p>
<ul>
<li><strong>out-of-band (external files)</strong>: as a separate text or audio file that relates to the original video. A typical example of out-of-band accessibility data are <a href="http://en.flossmanuals.net/TheoraCookbook/Subtitles" title="subtitles and Ogg">subtitles in srt files (see section on subtitles)</a>.<br />
</li>
<li><strong>in-line (embedded)</strong>: multiplexed together with the original video inside a single binary file. A typical example of in-line accessibility data are <a href="http://en.flossmanuals.net/TheoraCookbook/EmbeddingSubtitles" title="embedding subtitles in Ogg">srt subtitles encoded in Kate tracks in Ogg (see section on embedding subtitles)</a>.</li>
</ul>
<h2>Publishing accessible video on the Web<br />
</h2>
<p>The current HTML5 specification does not contain explicit means to publish, style, and position accessibility data for audio and video. The suggestion is to use in-line accessibility data and have the video decoder deal with it. Also, the suggestion is to use javascript where there is a necessity for out-of-band accessibility data. There is work in progress on improving this situation. The idea is to expose accessibility data to the Web browser in the same manner independent of whether the data originates resides in-line or out-of-band.<br />
</p>
<p>Several demos have been made with <strong>out-of-band</strong> subtitles, captions, and audio descriptions and the HTML5 video tag:</p>
<ul>
<li><a href="http://blog.mozbox.org/post/2009/03/10/video-tag-and-subtitles" title="Paul Rouget and subtitles">Raul Rouget's subtitle demo using srt (</a><a href="http://blog.mozbox.org/post/2009/03/10/video-tag-and-subtitles" class="uri">http://blog.mozbox.org/post/2009/03/10/video-tag-and-subtitles</a>)<br />
</li>
<li><a href="http://v2v.cc/~j/jquery.srt/" title="Jan Gerbers subtitles">Jan Gerber's subtitle demo using srt (</a><a href="http://v2v.cc/~j/jquery.srt/" class="uri">http://v2v.cc/~j/jquery.srt/</a>)<span></span></li>
<li><span><a href="http://www.w3.org/2008/12/dfxp-testsuite/web-framework/START.html" title="DFXP demo">Philippe Le Hegaret's caption demo using DFXP (select HTML5) (</a><a href="http://www.w3.org/2008/12/dfxp-testsuite/web-framework/START.html" class="uri">http://www.w3.org/2008/12/dfxp-testsuite/web-framework/START.html</a>)<br />
</span></li>
<li><span><a href="http://blog.gingertech.net/2009/07/29/first-experiments-with-itext/" title="Silvias subtitle demo">Silvia Pfeiffer's caption &amp; audio description demo using srt (</a><a href="http://blog.gingertech.net/2009/07/29/first-experiments-with-itext/" class="uri">http://blog.gingertech.net/2009/07/29/first-experiments-with-itext/</a>)<br />
</span></li>
</ul>
<p>These are all implemented using javascript, so you can learn from them. There is also a <a href="http://en.flossmanuals.net/TheoraCookbook/Publishing" title="publishing subtitles">more detailed introduction to Jan Gerber's javascript library</a> (see section on Publishing) for subtitle support in this Cookbook.</p>
<p>Silvia Pfeiffer's demo includes a proposal for how to associate out-of-band accessibility data through a new HTML5 tag with videos. This specification is continuing to evolve and is expected to eventually lead to native browser support of time-aligned accessibility data. A similar proposal has been made by <a href="http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2009-February/018600.html" title="Greg Millams caption proposal">Greg Millam</a> from Google (<a href="http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2009-February/018600.html" class="uri">http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2009-February/018600.html</a>). Such a specification may look as follows:</p>
<pre><code>&lt;video src=&quot;../elephant.ogv&quot; poster=&quot;elephant.png&quot; controls&gt;
  &lt;itext lang=&quot;fr&quot; type=&quot;text/srt&quot; src=&quot;../elephant.fr.srt&quot; category=&quot;SUB&quot;&gt;&lt;/itext&gt;
  &lt;itext lang=&quot;en&quot; type=&quot;text/srt&quot; src=&quot;../elephant.en.srt&quot; category=&quot;CC&quot;&gt;&lt;/itext&gt;
  &lt;itext lang=&quot;en&quot; type=&quot;text/srt&quot; src=&quot;../audiodesc.srt&quot; category=&quot;TAD&quot;&gt;&lt;/itext&gt;
&lt;/video&gt;</code></pre>
<p>Note: this is an example proposal only, which is not currently supported natively by any browsers.<br />
</p>
<p><span id="ch032_what-is-streaming.xhtml"></span></p>
<h1>What is streaming?</h1>
<p>Streaming Media is the term used to describe the <em>real-time delivery</em> of audio and video over the internet. Streaming Media allows for <em>live transmission</em> of audio or video over the internet, transforming the internet into a broadcasting medium.</p>
<p>The main difference between a streaming service and an online delivery (or archive) service is that  streamed data do not specify a start nor an end. A stream is a continous flow of video or audio data to which a viewer or listener can just connect. So a stream will continue even if no one is connected to that stream.<br />
</p>
<h2>Varieties of Streaming Services<br />
</h2>
<p>There are two types of delivery of audio and video data over the internet: Playlist Streaming and Live Streaming.</p>
<p><strong>Playlist Streaming</strong></p>
<blockquote>
The delivery of a stream of pre-recorded media files without any interaction over the internet can be called playlist streaming. This type of stream is build upon a list of files that should be streamed. Many players are able to stream files or list of files (e.g. VLC). Even if the files are acquired from an archive, this is a kind of streaming, as the audience does not read the complete file, but joins a stream. This delivery usually occurs using the http protocol.<br />

</blockquote>
<h3><span id="ch032_what-is-streaming.xhtml#Live_Streaming"></span> Live Streaming</h3>
<blockquote>
<p>The delivery of live audio and/or video over the internet. This allows the user to experience an event as it occurs in realtime. There are many examples of this, such as online radio or viewing live performances. Only True Streaming supports live streaming.</p>
<p>This manual will mainly deal with True Streaming of both live and archived content.</p>
</blockquote>
<blockquote>

</blockquote>
<h2>Delivery</h2>
<p>Providing video files (especially theora videos) is nearly as easy as providing pictures on a webpage. All that is needed for such a scenario is a web server. This is often the cheapest way to deliver content on a small scale. This method cannot be used for live streaming and does not enable advanced features such as multiple bitrate encoding. However, the streamed delivery of archived videos (such as archive.org or youtube) generates most webtraffic nowadays.<br />
</p>
<p>To enable live streaming, and to gain full functionality and efficiency, a streaming media server is required. This server is usually standard server hardware but with the necessary streaming server software installed. It is quite normal to install a streaming server <strong></strong> on the same machine as an existing web server.</p>
<blockquote>

</blockquote>
<h2>Streaming Servers</h2>
<p>Perhaps a good way to understand how streaming works is to imagine a radio station.</p>
<p>A radio station is comprised of three components - a <em>studio</em>, a <em>transmitter</em>, and your audience's <em>receivers</em>.</p>
<p><img src="static/Streaming-StreamingIntro-radio-en.gif" alt="radio.gif" width="350" height="225" /></p>
<p>The basic diagram above shows how a transmitting radio station works. The radio studio is the source of the audio. In this space there are usually mixing desks, cd-players, minidisc players, turntables etc. From the studio an audio signal is sent to the transmitter. This can be sent from the studio to the transmitter by either a cable (sometimes called a &quot;landline&quot;) or by a microwave link. Then the transmitter sends the audio via FM so that radio receivers (tuners) can pick it up and play it.</p>
<p>Radio works this way because it is trying to distribute the studio audio to as many people as possible. If you imagine the radio studio without the transmitter then the station would have a somewhat reduced audience! Essentially only those people who could get there (and fit into the studio!) would be able to listen. So the transmitter works as a distributor, allowing more people to connect via their radio receivers and hence enlarge the potential audience.</p>
<blockquote>
<p>This is a close analogy to why streaming exists and how it works. If you are just playing audio on a computer in your room then the audience isn't going to be so big... so, we utilise streaming to distribute this audio to more people.</p>
<p><img src="static/Streaming-StreamingIntro-transmit_server-en.gif" alt="transmit_server.gif" width="350" height="225" /></p>
<p>The analogy is obvious: the computer replaces the radio studio, the streaming server replaces the transmitter, and your listeners connect to the server using computers, just like radio receivers to the broadcast signal. The analogy can be taken quite a long way. Having a bigger radio transmitter is like having more bandwidth available at the streaming server - both allow more people to connect.</p>
</blockquote>
<p><span id="ch033_icecast.xhtml"></span></p>
<h1>Icecast</h1>
<p><img src="static/Icecast-icecast_cover_5-en.gif" alt="icecast_cover_5.gif" width="350" height="225" /><br />
</p>
<p>In the world of online audio and video there is a group of technologies and techniques refered to as <strong>streaming</strong>. Streaming, at its simplest, is the delivery of audio and video over the internet in <strong>realtime</strong>. Traditionally streaming has been used for delivering live internet radio, or for broadcasting events over the internet so you can watch them at home.</p>
<p>Streaming is often talked about using terms from the broadcasting industry as live internet audio and video are often seen as being analogous to broadcast television and radio. Hence you might talk about 'internet radio' to refer to live online audio. Sometimes people refer to sending live audio or video using streaming as 'broadcasting on the net' or as a 'internet broadcast'. These terms are helpful for helping us understand the intended purpose of streaming but don't take them too literally. However it is useful to refer to these models when explaining the role of Icecast.</p>
<p>With broadcast television or radio there is transmitter that distributes the signal sent from the studio, to your television or radio.</p>
<p><img src="static/Streaming-StreamingIntro-radio-en.gif" alt="radio.gif" width="350" height="225" /><br />
</p>
<p>With internet broadcasting (streaming) you replace the transmitter with a <strong>streaming server</strong>, which is really a kind of software.<br />
</p>
<p><img src="static/Streaming-StreamingIntro-transmit_server-en.gif" alt="transmit_server.gif" width="350" height="225" /> </p>
<p><strong>Icecast</strong> is this kind of software. It enables you to distribute live audio and video across the internet in realtime.<span></span> Note that this is only part of the equation. You also need a <strong>stream encoder</strong> that can send the original audio or video stream to Icecast. Icecast distributes the stream, it does not create the stream - that's the job of the encoder.</p>
<p>Icecast is a very mature technology and very robust. It supports the delivery of many different formats of streaming audio (including MP3 and Ogg Vorbis) and it supports the delivery of Ogg Theora for streaming video. Icecast runs on <strong>Linux</strong> and <strong>Windows</strong>. If you wish to install it on Linux you will need to have some experience with Linux; specifically you will need to know a bit about how to install software from the command line, and be comfortable editing text based configuration files. The Windows installation process is a little bit more straight forward but you still need to be comfortable editing text based configuration files.</p>
<p>Installing and running Icecast is not recommended for inexperienced users.<br />
</p>
<p><br />
</p>
<p><span id="ch034_tss.xhtml"></span></p>
<h1>TSS</h1>
<p><strong>TSS</strong> (<strong>Theora Streaming Studio</strong>) is an excellent encoder for sending <strong>Ogg Theora</strong> streams to an <strong>Icecast</strong> server. There is a home page for TSS that is worth reading for an overview of what it does and there are also installers available :</p>
<p><a href="http://gollum.artefacte.org/tss/" class="uri">http://gollum.artefacte.org/tss/</a></p>
<p><img src="static/TSS-tss01-en.png" title="tss01" alt="tss01" width="600" height="517" /></p>
<p>TSS is a <strong>GUI</strong> (graphic user interface) encoder, which means you don't have to do anything tricky on the <strong>command line</strong>. TSS can send out one or two streams with different settings, from the same video source. The video source can be digital video (DV) or analog video via a video capture device such as a webcam, USB video-in or video card with video-in. Bear in mind that a fast computer with at least 2gig ram will be required to stream to 2 targets without frame drops or loss of audio synchronisation.<br />
</p>
<p>TSS can also display a preview of the outgoing stream, and can simultaneously archive the streams to disk (but that depends a little on how good your computer is).</p>
<p>TSS actually manages the command line softwares :</p>
<ol>
<li><strong>dvgrab</strong> - grabs the video from a live video source such as a camera</li>
<li><strong>ffmpeg2theora</strong> - converts video files to Ogg Theora <strong></strong></li>
<li><strong>oggfwd</strong>  - sends the video to a streaming server<br />
</li>
</ol>
<p>TSS simply takes the configuration you set in the GUI and creates the appropriate command line using these three softwares so you don't need to enter in complex commands manually. </p>
<p>One can always copy the command line being used by TSS, it will be printed out on the status window, the small black space we can see above under the <strong>Execute</strong> and <strong>Stop</strong> buttons. Simply scroll your mouse pointer and select the text. You could then run this piped commands directly from command line, saving some resources by avoiding launch of the graphical system.<br />
</p>
<p>TSS main developer is Lluis Gómez i Bigordà, the current release (February 2009) is 0.2. The project status is active (always good to know!).</p>
<h2>Installing TSS</h2>
<p>TSS can only be installed on GNU/Linux. We will look at installing TSS on Ubuntu.</p>
<p>First visit the TSS download page :</p>
<p><a href="http://gollum.artefacte.org/tss/#download" class="uri">http://gollum.artefacte.org/tss/#download</a></p>
<p>Here you will see a section with two links. One link is marked '<span id="ch034_tss.xhtml#download">Debian / Ubuntu package'. We wish to install this version. Click on this link using FireFox and you will see a window appear like this :</span></p>
<p><span id="ch034_tss.xhtml#download"></span> <img src="static/TSS-installing-downloadtss-en.png" title="downloadtss" alt="downloadtss" width="454" height="322" /></p>
<p>The option selected by default is what we want to use. If we open the installer with <strong>GDebi Package Installer</strong>, then the installer will download and install automatically...sounds easy! So lets do this. Simply click 'OK' and it will install.</p>
<h3>Installing on 64 bit<br />
</h3>
<p>When installing TSS you might see an error like this :<br />
</p>
<p><img src="static/StreamingConferences-InstallTSS-error_arch-en.png" title="error_arch" alt="error_arch" width="560" height="429" /><br />
</p>
<p>This means you are trying to install the software on a computer with a different 'architecture' than allowed by the software. Actually you can bypass this but you have to do it on the command line.  First, instead of using GDebi you need to download the sources (.tar.gz file). Then from the same directory as where the installer is located you need to type this on the command line :</p>
<pre><code>  sudo apt-get install dvgrab ffmpeg ffmpeg2theora libtheora-bin oggfwd libvte-dev</code></pre>
<p>The above command might take a while as there is a lot to download and install. When the process is complete follow this with these commands :</p>
<pre><code>tar zxvf tss-0.2.tar.gz</code></pre>
<pre><code>cd tss-0.2</code></pre>
<pre><code>./autogen.sh</code></pre>
<p>Note : the name of the file to be installed will probably be different from that listed above.</p>
<p>Next execute the following commands :</p>
<pre><code> make</code></pre>
<pre><code>sudo make install</code></pre>
<p>Now try typing 'TSS' on the command line, if it doesn't work then try this :</p>
<pre><code>sudo cp src/tss /usr/bin/</code></pre>
<p>The try starting TSS again from the command line :</p>
<p><img src="static/StreamingConferences-InstallTSS-tss-en.png" title="tss" alt="tss" width="600" height="517" /></p>
<h2>Using TSS</h2>
<p>There are two main panels in TSS that you have to verify have the right settings in order to send a stream : the <strong>source</strong> and <strong>target</strong> tabs :</p>
<p><img src="static/StreamingConferences-InstallTSS-tss1_source-en.png" alt="tss1_source.png" width="600" height="455" /> </p>
<p>On the <strong>source</strong> tab one can choose the type of video input. When operating on a minimal setup there is a option to use a webcam via video for GNU/Linux (v4l). You can also choose a DV input - this is useful for streaming live video from a hand held video camera.<br />
</p>
<p>TSS also offers the possibility to stream an existing (archived) video file from your computer to an Icecast server.<br />
</p>
<p>The second tab is called <strong>target1</strong>, here we will define the stream settings for our main stream. Below is an example  :<br />
</p>
<p> <img src="static/StreamingConferences-InstallTSS-tss2_target1-en.png" alt="tss2_target1.png" width="601" height="451" /> </p>
<p>All fields in the <strong>ffmpeg2theroa encoding settings</strong> section must be completed.</p>
<p>It is important we keep in mind that any information we enter here will have a direct influence on the final output <strong>bitrate</strong> of our stream. You cannot simply nominate an outgoing bitrate, rather the outgoing bitrate is based upon the choices you make about frame size, audio quality etc.</p>
<p>Also, remember that the higher this bitrate is - the more bandwidth will be required to send it to the Icecast server, <em>and</em> the higher the bitrate the higher the bandwidth requirements of the audience connecting to your stream. So if some of our viewers are in Colombia where the average network connection is still around the 128kbps (<strong>kb/s</strong> or <strong>kbit/s</strong> is a unit of data transfer rate equal to 1,000 bits per second). This will mean that even though we have broadband connection sufficient to allow us to send a stream at a high resolution and high quality compression rate, we need to be careful to send a stream at a bitrate less than 128kpbs, otherwise few people in Colombia would be able to see it.</p>
<p>The following categories relate to the options in the TSS encoding setting for both <strong>target1</strong> and <strong>target2</strong> :<br />
</p>
<p><strong>Frame size:</strong> here we define the dimensions in pixels of the video stream. 320 by 240 has become a standard. For low bandwidth settings one might opt for 240 by 180.</p>
<p><strong>Frame rate:</strong> This setting defines the number of frames per second we want to transmit. Different events will require different frame rates. In the case of a conference, where the subjects don't move or change position too much, a 12fps (fps = frames per second) setting could be appropriate. In the example above we decided to sacrifice on the frame rate in favor for a bigger frame size. We selected 25:3 that will be around 8fps.<br />
</p>
<p><strong>Video Quality:</strong> This setting takes values in the range of <strong></strong> 0 to 10. The default encoding quality for video of ffmpeg2theora is 5, one should use higher values for better quality.<strong></strong></p>
<p><strong>Audio Quality:</strong>  This setting takes values in the range of -2 to 10. The encoding quality for audio defaults to: 1. Use higher values for better quality.</p>
<p><strong>Audio Channels:</strong> Sets the number of output audio channels. The choices are 0 (no sound), 1 (mono) or 2 (stereo).<br />
</p>
<p><strong>Audio samplerate:</strong> Expressed in Hz (Hertz) this box sets the output sample rate of the audio.</p>
<p>Below the boxes dealing with the technical specifications of the outgoing stream is where you enter information that you want the audience to know :</p>
<p><img src="static/TheoraCookbook-TSS-ffmpeg_meta-en.png" title="ffmpeg_meta" alt="ffmpeg_meta" width="307" height="207" /></p>
<p>The information in the <strong>ffmpeg2theora metadata</strong> boxes is potentially available to your audience. Whether they can see the information depends on how they are viewing the stream (what player/browser) and if they know how to access this information. You can enter any information here, it doesn't matter - ignore the categories (location, date etc) if you want to.<br />
</p>
<p>The <strong>icecast server settings</strong> and <strong>icecast metadata</strong> entry boxes are next.</p>
<p><img src="static/TheoraCookbook-TSS-tss_icecast-en.png" title="tss_icecast" alt="tss_icecast" width="324" height="243" /> </p>
<p>In the <strong>icecast server settings</strong> we have to define the address (<strong>URL</strong>) of the streaming server, the <strong>port</strong> this server is using (usually 8000), the name of our <strong>mountpoint</strong> (<strong>channel</strong>), and the <strong>password</strong>. If you lack access to an icecast server there are few free projects out there dedicated to assisting people to stream using free software, check on estudiolivre.org or GISS.tv to name a few. </p>
<p>The <strong>icecast metadata</strong> settings is simply where you put information about your stream that you want the audience to know. This information will be displayed on the servers webpage (each Icecast server installation has its own webpage). Although they have specific titles you can put any information in here, it doesn't matter.</p>
<p>The last tab has the title <strong>preview</strong>.<br />
</p>
<p><img src="static/StreamingConferences-InstallTSS-tss3_preview-en.png" alt="tss3_preview.png" width="598" height="447" /> </p>
<p>If you check <strong>enable preview window</strong> you will see a preview of the live stream as you encode it. This video is not the same as the video coming from the Icecast Server, so it <em>always</em> pays to monitor <em>both</em> the preview and the stream coming from the server (monitor the incoming stream on another computer).<br />
</p>
<p>If you wish to send <em>one</em> stream you need only pay attention to the settings in the Source and target1 tabs. If you wish to send <em>two</em> streams you have to pay attention to the settings in target2 as well.</p>
<p>Once you have specified all the required information for each of the outgoing streams <em>and</em> have connected the correct video source (or you have chosen a working video file to stream) then you just press 'Execute' and the streaming should begin!<br />
</p>
<p><span id="ch035_ffmpeg2theora.xhtml"></span></p>
<h1>Streaming with ffmpeg2theora</h1>
<p>This method focuses on streaming video from a <strong>DV</strong> or <strong>Firewire</strong> camera using GNU/Linux (e.g. Ubuntu). The video stream will be <strong>Ogg Theora</strong> which means your users will be able to watch using Theora enabled player, FireFox 3.5, or in a java applet such as Cortado. To follow this you need to know how to use the <strong>command line</strong> and you need <strong>sudo</strong> access. If you have no idea what these things are, then  you should consider reading a good book introducing you to the command line.<br />
</p>
<h2>Getting Ready</h2>
<p>Please note : A <strong>Firewire</strong> camera is not the same as a <strong>DV</strong> camera. However for our purposes here they work in the same way. <strong>Firewire</strong> is Apple's name for the interface standard known as <strong>IEEE 1394,</strong> other manufacturers use other names such as i.Link (Sony) or Lynx (Texas Instruments) - but it doesn't matter, they are all IEEE 1394.</p>
<p>You will need the following:</p>
<ul>
<li>DV cam</li>
<li>GNU/Linux machine with firewire inputs</li>
<li>firewire cable</li>
<li>internet connection</li>
<li>access to a 'theora-enabled' Icecast2 server (you need the <strong>IP address</strong> of the server, the <strong>port</strong> you should use, and the <strong>password</strong>)</li>
</ul>
<h2>Set-Up</h2>
<p>Lets start setting up the software you need. We will need to install the following applications:</p>
<ul>
<li>dvgrab</li>
<li>ffmpeg2theora</li>
<li>oggfwd</li>
</ul>
<p>With Ubuntu you can run this command line:</p>
<pre><code>sudo apt-get install dvgrab ffmpeg2theora oggfwd</code></pre>
<p>The above command should all appear on one line. You will be asked for your password, type this in and the installation process will begin. Now you have everything you need to get started. So first we need to plug the <strong>dv</strong> (or <strong>firewire</strong>) camera in to the computer. You need to attach the <strong>firewire</strong> camera to the <strong>firewire</strong> socket on the camera, and the other end of course goes into the <strong>firewire</strong> socket of your laptop or whatever computer you are using.</p>
<p>Now, turn on the camera. </p>
<p>Next you need to enter the following command line, which provides the streaming server details you have for the <strong>Icecast2</strong> (theora-enabled) server. The command is:</p>
<pre><code>sudo dvgrab --format raw - | ffmpeg2theora -a 0 -v 5 -f dv -x 320 -y 240 -o /dev/stdout - | oggfwd  icecastserver  8000 pwd /theora.ogv</code></pre>
<p>Remember the command will have to be all on one line (the above example is not). Also replace the details below with the information you have about your Icecast server:</p>
<ul>
<li><em>icecastserver</em></li>
<li><em>8000</em></li>
<li><em>pwd</em></li>
</ul>
<p><strong>icecastserver</strong> should be replaced with the <strong>hostname</strong> or <strong>IP address</strong> of the streaming server. <strong>8000</strong> is the port number and is probably the same. <strong>pwd</strong> should be replaced by the <strong>password</strong> of your server. Lastly, you can replace <strong>/theora.ogv</strong> with your mount point, this depends on the configuration of your icecast server, but can be anything as long as it starts with a forward slash (<strong>/</strong>) and ends in <strong>.ogg</strong> or <strong>.ogv</strong>.</p>
<p>Now, you should be streaming! To check the connection use <strong>VLC</strong> or <strong>Firefox 3.5</strong></p>
<p><span id="ch036_vlc.xhtml"></span></p>
<h1><span id="ch036_vlc.xhtml#Note:%20This%20topic%20does%20not%20exist"></span></h1>
<h1>Streaming with VLC</h1>
<p>VLC can stream theora files to an Icecast2 streaming server. This works with VLC 0.9.4 and above on Ubuntu, and also on earlier versions of VLC on Windows (although the process is different for earlier releases of VLC). It is possible to stream video files from your computer, a live webcam or hand held camera. If you have a laptop with a camera built-in then you can also send live streams using this.</p>
<p>If you are using Ubuntu it is better to upgrade your version of Ubuntu to Intrepid (8.10) or Jaunty (9.04) as they both come with a version of VLC which is easy to stream with. If you don't wish to upgrade the Operating System then you need to install the latest version of VLC from source files - be warned, upgrading VLC from sources is complex.<br />
</p>
<h2>Streaming Server Requirements</h2>
<p>We will examine streaming to an Icecast Server. You need access either to an Icecast Server or to someone who can create an account for you and provide the access details. You need to know the following information about the Icecast Server:</p>
<ul>
<li>Hostname or IP Number of the Icecast Server<br />
</li>
<li>Port (Default is 8000)<br />
</li>
<li>Password</li>
<li>Username (This may not be necessary depending on how Icecast is configured.)<br />
</li>
<li>Mountpoint (This may not be necessary depending on how Icecast is configured.)</li>
</ul>
<h2>Choosing Video File to Stream</h2>
<p>Lets look at streaming using the camera built into a laptop. The process is very similar for streaming from an external camera or archived video files.</p>
<p>The first thing you need to do is open VLC. Now from the Media menu choose Streaming... :</p>
<p><img src="http:/old.flossmanuals.net/floss/publish/TheoraCookbook/rsrc/TheoraCookbook/VLCStreaming/vlc_stream.png" title="vlc_stream" alt="vlc_stream" width="367" height="257" /></p>
<p>This will open a panel where you can choose the source for the video stream.</p>
<p><img src="http:/old.flossmanuals.net/floss/publish/TheoraCookbook/rsrc/TheoraCookbook/VLCStreaming/streamwindow.png" title="streamwindow" alt="streamwindow" width="520" height="490" /></p>
<p>We will choose the last tab - Capture Device, however here you could also choose any of the other tabs to stream video from a disc (a DVD for example), archived files, or relay an incoming video stream. The capture device window looks like this :</p>
<p><img src="http:/old.flossmanuals.net/floss/publish/TheoraCookbook/rsrc/TheoraCookbook/VLCStreaming/streampanel.png" title="streampanel" alt="streampanel" width="520" height="490" /><br />
</p>
<p>If all works well you might not need to change any settings in this section at all. Instead you just click on the button titled Stream.<br />
</p>
<h2>Stream Settings<br />
</h2>
<p>Under the Outputs section of the stream settings there is a section for configuring Icecast.</p>
<p><img src="http:/old.flossmanuals.net/floss/publish/TheoraCookbook/rsrc/TheoraCookbook/VLCStreaming/icecastconf.png" title="icecastconf" alt="icecastconf" width="599" height="70" /></p>
<p>You just need to check the box here and then fill in the details. There are a few things to remember here :</p>
<ol>
<li>The Mountpoint should always start with a '/'.</li>
<li>The address does not start with 'http://'.<br />
</li>
<li>Most often you do not get a username for Icecast. In this case use the username 'source'.</li>
<li>The port is almost always 8000.<br />
</li>
<li><p>The format for the Login:pass field is exactly as the title suggests - the login followed by a ':' and then the pass. All with no spaces. For example, a stream to a default install of Icecast2 (the default passord is always 'letmein') would be :<br />
</p>
<pre><code>source:letmein</code></pre></li>
</ol>
<p><img src="http:/old.flossmanuals.net/floss/publish/TheoraCookbook/rsrc/TheoraCookbook/VLCStreaming/icecastdetails.png" title="icecastdetails" alt="icecastdetails" width="599" height="69" /></p>
<p>As you enter the information you will see the text change in the 'Generated stream output field' at the bottom of the window.</p>
<p><img src="http:/old.flossmanuals.net/floss/publish/TheoraCookbook/rsrc/TheoraCookbook/VLCStreaming/mrl.png" title="mrl" alt="mrl" width="558" height="74" /></p>
<p>If you were experienced you might be able to directly type this information in without using the fields provided, but it's far easier to just to fill in the boxes as required.</p>
<p>Now all you have to do is press 'Stream' and the live stream will be sent to the Icecast2 server. However, VLC does not provide good error feedback, so it might sit their looking like it's happily streaming whereas in fact nothing is happening. VLC might even display 'Streaming' in the status bar, but this means nothing!</p>
<p><img src="http:/old.flossmanuals.net/floss/publish/TheoraCookbook/rsrc/TheoraCookbook/VLCStreaming/notstreaming.png" title="notstreaming" alt="notstreaming" width="353" height="137" /></p>
<p>The only way to know it is actually working is to look at the status page on your Icecast server, or use a video player to playback the stream live from the server.</p>
<p><span id="ch037_stream-ripping.xhtml"></span></p>
<h1>Saving a Theora Stream<br />
</h1>
<p>If you are running GNU/Linux it is easy to rip an Ogg Theora stream. This is because Theora uses HTTP to stream, hence you can use the <strong>wget</strong> software, which is usually included in linux distributions. You direct <strong>wget</strong> to capture the stream like so:</p>
<pre><code>wget http://streamingserver:8000/streamname</code></pre>
<p>For example, if the server was <strong>icecast.streamingsuitcase.com</strong> and the stream name was <strong>theora.ogg</strong>, you would use the following command for archiving:</p>
<pre><code>wget http://icecast.streaminguitcase.com:8000/theora.ogg</code></pre>
<p>This is good but if <strong>wget</strong> buffers, it will quit the archiving. However you can try this:</p>
<pre><code>while true; do wget http://icecast.streaminguitcase.com:8000/theora.ogg;done</code></pre>
<p>This can be run as a command on one line of a shell, or you can make it into a handy little script.<br />
</p>
<p>Another bonus from using <strong>wget</strong> to archive is that it will increment the file names. So if you archive the stream in the example above the file would be saved as <strong>theora.ogg</strong> if you stopped <strong>wget</strong> and started it again the next file would be called <strong>theora.ogg.1</strong> etc. This means you don't overwrite the existing archive file.</p>
<h2>Extracting parts of a video</h2>
<p>For non live videos, it is sometimes possible to extract parts of the video as well. This only works if the hosting provider has <strong>oggz-chop</strong> installed to allow server-side seeking. If it is installed you can specify an 'in' and 'out' point. So if you just want to download the video from second 23 to second 42, you add ?t=23/42 at the end of the URL:</p>
<pre><code>wget http://example.org/theora.ogv?t=23.0/42.0</code></pre>
<p>With Firefox 3.5 you can also open the URL in the browser and save it with right click Save Video As...</p>
<p><span id="ch039_introduction.xhtml"></span></p>
<h1>Introduction</h1>
<p><strong>Ogg Theora</strong> is not only an excellent distribution format, but it can also be edited. If you have a GNU/Linux machine with enough memory and computational power, you can explore editing software like <strong>LiVES</strong> <a href="http://lives.sourceforge.net">(</a><a href="http://lives.sourceforge.net" class="uri">http://lives.sourceforge.net</a>),  <strong>PiTiVi</strong> (<a href="http://www.pitivi.org/" class="uri">http://www.pitivi.org/</a>), <strong>Kdenlive</strong> (<a href="http://www.kdenlive.org/" class="uri">http://www.kdenlive.org/</a>), and <strong>Cinelerra</strong> (<a href="http://cinelerra.org/" class="uri">http://cinelerra.org/</a>).</p>
<p>At this point in time, for simple editing of Theora files, PiTivi and LiVES are the best options. Kdenlive often crashes when exporting to Theora (and the output file is incorrectly formatted), and Cinelerra is difficult both to install and to use.</p>
<p>If you use Ubuntu then PiTiVi is an even better choice since installation is very simple. In addition PiTiVi is built on the <strong>GStreamer</strong> multimedia framework (used by Ubuntu), so you can import and edit pretty much any media file supported by GStreamer (which is a lot), and export to Theora.</p>
<p><strong>LiVES</strong> and <strong>PiTiVi</strong> work like most editing software: they decompress the video files in the process of importing the video data into the editing software, so you can view and browse through all the images and sounds, rearrange them and do all kinds of cool stuff. When you finish, you re-compress the new edit by exporting the resulting arrangement. This process of de- and re-compressing comes at a cost, as you lose a little quality with each de- or recompressing process that you run. That's why you call this editing process <strong>lossy editing</strong>.<br />
</p>
<p><span id="ch040_pitivi.xhtml"></span></p>
<h1>PiTiVi<br />
</h1>
<p><strong>PiTiVi</strong> is a video editor for GNU/Linux that supports importing and exporting Ogg Theora videos. Right now it supports basic editing, cropping clips, arranging on a timeline and adjusting of audio levels.</p>
<p>PiTiVi has its own documentation that you might also wish to read located online at<a href="http://en.flossmanuals.net/bin/view/TheoraCookbook/%20http://www.pitivi.org/wiki/Manual#Proposed"></a><a href="http://www.pitivi.org/wiki/Manual#Proposed" class="uri">http://www.pitivi.org/wiki/Manual#Proposed</a></p>
<p>There is also a very good manual available in PDF format that you can find online at <a href="http://jeff.ecchi.ca/blog/?p=897%20">http://jeff.ecchi.ca/blog/?p=897</a><br />
</p>
<h2>Installing<br />
</h2>
<p>PiTiVi only works with GNU/Linux. If you have Ubuntu Jaunty (9.04) you can install a very useful version of PiTiVi from the command line (terminal) with the command :</p>
<pre><code>sudo apt-get install pitivi</code></pre>
<p>You will be asked for your password, when you enter it the installation will proceed automatically.</p>
<p>When the installation is complete you can open PiTiVi from the Applications menu (listed under <strong>Sound &amp; Video</strong>).</p>
<p><img src="static/TheoraCookbook-PiTiVi-pitivi-en.png" title="pitivi" alt="pitivi" width="600" height="360" /><br />
</p>
<p>You can also  check <a href="http://pitivi.org/wiki/Downloads" class="uri">http://pitivi.org/wiki/Downloads</a> for instructions to install newer versions. PiTiVi is actively developed right now and there are new releases coming out regularly.</p>
<h2>Importing Video<br />
</h2>
<p>Once you opened PiTiVi you can press the plus (+) button in the interface to Import clips.</p>
<p><img src="static/TheoraCookbook-PiTiVi-plus-en.png" title="plus" alt="plus" width="292" height="103" /> </p>
<p>Imported clips are added to your <strong>Clip Library</strong>. You can use all formats that <strong>GStreamer</strong> accepts. If you don't know what this means then the easiest way to know what files work with PiTiVi is to play them in Totem (found in the Sound and Video Applications menu and titled 'Movie Player'). If a file can play in Movie Player then it can also be used as a clip in PiTiVi.</p>
<p>You can continue adding as many clips as you like to the Clip Library (the video of the Digital Clock is created by Riccardo Iaconelli).</p>
<p><img src="static/TheoraCookbook-PiTiVi-cliplibrary-en.png" title="cliplibrary" alt="cliplibrary" width="387" height="202" /><br />
</p>
<h2>Adding Clips<br />
</h2>
<p>Once you imported the clips you want to use, you can drag them from the Clip Library on the timeline below.</p>
<p><img src="static/TheoraCookbook-PiTiVi-drag-en.png" title="drag" alt="drag" width="321" height="501" /> </p>
<p>If you add multiple clips to the time line they will appear as slightly different colors and with the filesnames displayed :</p>
<p><img src="static/TheoraCookbook-PiTiVi-twovids-en.png" title="twovids" alt="twovids" width="600" height="360" /></p>
<p>If you can't see this kind of detail then use the zoom tools to zoom in and out of the time line :</p>
<p><img src="static/TheoraCookbook-PiTiVi-zoom-en.png" title="zoom" alt="zoom" width="242" height="118" /><br />
</p>
<h2>Playback<br />
</h2>
<p>When the clip is on the timeline you do not see the individual frames, but you can drag the slider backwards and forwards in the player area to see the video.</p>
<p><img src="static/TheoraCookbook-PiTiVi-timeline-en.png" title="timeline" alt="timeline" width="600" height="360" /><br />
</p>
<p>When you play back video like this you can see the position (time) of the playback displayed by a red tracker on the time line :</p>
<p><img src="static/TheoraCookbook-PiTiVi-slider-en.png" title="slider" alt="slider" width="542" height="302" /></p>
<h2>Moving Clips<br />
</h2>
<p>You can move the clips around by dragging them around the time line.</p>
<h2>Cutting Clips</h2>
<p>To cut a clip in two you need to click on the scissors icon :</p>
<p><img src="static/TheoraCookbook-PiTiVi-scissors-en.png" title="scissors" alt="scissors" width="257" height="117" /></p>
<p>Then move the cursor around the time line. You will see an orange line appear showing the potential position of the cut :</p>
<p><img src="static/TheoraCookbook-PiTiVi-scis2-en.png" title="scis2" alt="scis2" width="219" height="164" /></p>
<p>When you have the orange line at the right place click on the timeline and the selected video file will be cut in two at that point.</p>
<h2>Deleting Clips</h2>
<p>To delete a clip, click on it with the cursor so that it is selected and then press the Trash Can icon :</p>
<p><img src="static/TheoraCookbook-PiTiVi-trash-en.png" title="trash" alt="trash" width="250" height="91" /><br />
</p>
<h2>Export to Ogg Theora<br />
</h2>
<p>Once your project is ready to be exported, you can click the <strong>Render Project</strong> button :</p>
<p><img src="static/TheoraCookbook-PiTiVi-render-en.png" title="render" alt="render" width="191" height="72" /> </p>
<p>You will now see the Render settings window :</p>
<p><img src="static/TheoraCookbook-PiTiVi-renderwin-en.png" title="renderwin" alt="renderwin" width="294" height="213" /><br />
</p>
<p>Click <strong>Choose File</strong> to and choose where to save the exported file to. You could also adjust the encoding settings pressing <strong>Modify</strong>, once the settings fit your needs, press Render and get a coffee.<br />
</p>
<p><span id="ch042_introduction.xhtml"></span></p>
<h1>Introduction</h1>
<p>If you want to play around with your Ogg files you do not need to launch a full-blown editing software. A number of useful tools exist that help you perform simple tasks with Ogg files on the command-line. The <strong>Ogg Video Tools</strong> is a toolbox for Theora video files, that includes a number of handy command line tools for creating an manipulating Theora files. Use them for cutting and splicing or to create thumbnails, preview or slideshow videos without having to engage into a complex editing process.</p>
<h2>Installing the Ogg Video Tools<br />
</h2>
<p>Many GNU/Linux distributions provide the Ogg Video Tools within their repositories (e.g. Fedora, openSuSE). If the tools are not available for your preferred distribution, or you want to upgrade to the most recent version, continue reading the <em>Installing from Source</em> section below. This also applies to BSD and Mac OS users.<br />
</p>
<p>Windows users can download a ZIP file, containing the executable command line tools from <a href="http://sourceforge.net/projects/oggvideotools/files/" class="uri" title="Get Ogg Video Tools for Windows">http://sourceforge.net/projects/oggvideotools/files/</a>.</p>
<h3>Installing from Source</h3>
<h3></h3>
<h3></h3>
<p>Visit <a href="http://sourceforge.net/projects/oggvideotools%20">http://sourceforge.net/projects/oggvideotools</a> and click on <em>Download Now</em> to get a copy of the source code.<br />
</p>
<p>Before continuing installation, make sure that you have all required development packages installed. The Ogg Video Tools depend on the following other packages:</p>
<ul>
<li>theora and theora-dev</li>
<li>vorbis and vorbis-dev</li>
<li>ogg and ogg-dev</li>
<li>GD-lib with its development parts</li>
<li>SDL and SDL-dev (in case you want to compile oggScroll)</li>
</ul>
<p>The Ogg Video Tools will successfully compile even with all of these libraries missing, but in that case only a subset (the editing tools) are going to be compiled. The other tools will not be available at all after installation.<br />
</p>
<p>After making sure that the required packages are present, open a terminal and enter the following command (without the initial dollar sign):</p>
<pre><code>$ tar xzvf oggvideotools*.tar.gz
$ cd oggvideotools*
$ ./configure
$ make
$ su
&lt;type root password&gt;
$ make install</code></pre>
<p>Where the <em>./configure</em> command on the third line should output something similar to:</p>
<pre><code>[ ... ]
checking for bzero... yes
checking for memset... yes
configure: creating ./config.status

Creating the following tools:

oggJoin
oggSplit
oggCut
oggCat
oggDump

oggSlideshow
oggThumb
oggResize
oggSilence

oggScroll</code></pre>
<p><span id="ch043_create-thumbnails.xhtml"></span></p>
<h1>Create Thumbnails</h1>
<p>The Ogg Video Tools (<a href="http://sourceforge.net/projects/oggvideotools">http://sourceforge.net/projects/oggvideotools)</a> come with a tool called oggThumb that extracts thumbnails from Theora video files.</p>
<p>Example command:</p>
<pre><code>$ oggThumb -t1,2,3,4 -s320x240 my_theora_video.ogv</code></pre>
<p>Here we create four thumbnails from a video file called &quot;my_theora_video.ogv&quot;, taken at 1, 2, 3 and 4 seconds into the video. In this example the thumbnail images are stored with the following file names:<br />
</p>
<pre><code>my_theora_video_0.jpg
my_theora_video_1.jpg
my_theora_video_2.jpg
my_theora_video_3.jpg</code></pre>
<h2>Creating a Series of Thumbnails<br />
</h2>
<p>If you need to extract thumbnails at fixed intervals throughout the full video, without knowing the length of the video in advance, use the following shell script to do the job:<br />
</p>
<pre><code>#!/bin/sh
length=$(oggLength &quot;$1&quot;)
timestring=&quot;0&quot;
div=$(($2*1000))
for((i=1; i&lt;$2; i++)) do
  value=$(echo &quot;scale=3; $i*$length/$div&quot; | bc -q 2&gt;/dev/null)
  timestring=&quot;$timestring,$value&quot;
done
oggThumb &quot;$3&quot; -t$timestring &quot;$1&quot;</code></pre>
<p>The script is then called as:<br />
</p>
<pre><code> $ ./mkThumb my_theora_video.ogv 15</code></pre>
<p>This script invocation extracts 15 pictures from start to end of the video file, at equidistant intervals. The pictures are output as files, using the same naming convention as previously described. Replace <em>my_theora_video.ogv</em> with the name of the video you want to work on. The number of thumbnails to generate is given by the last argument.  Change it to suit your needs.<br />
</p>
<h2>Creating Thumbnails with Fixed Height or Fixed Width</h2>
<p>You can request thumbnails of a certain size by adding option <em>-s</em> to the command line:<br />
</p>
<pre><code>$ oggThumb -t1,2,3,4 -s320x240 my_theora_video.ogv </code></pre>
<p>Here we generate thumbnails sized 320x240. You can omit one either width or height, by setting it to 0:</p>
<pre><code>$ oggThumb -t1,2,3,4 -s120x0 my_theora_video.ogv</code></pre>
<p>Here the height of the video is set to match a width of 120. oggThumb computes the height so as to preserve the aspect ratio of the video frames.</p>
<h3>Advanced Functionality<br />
</h3>
<p>Use option <em>-f</em> instead of <em>-t</em> to select the thumbnail time positions by frame number instead of a number of seconds. Another option worth mentioning is <em>-o png</em> which generates thumbnails as PNG images, which have a higher quality than the JPG files generated by default.</p>
<p>The full documentation of the oggThumb command line utility can be accessed by typing:</p>
<pre><code>$ man oggThumb</code></pre>
<p>on the command line. Note that the windows version comes with a set of HTML files instead, containing a manual that can be read in your web browser.</p>
<h2></h2>
<p><span id="ch044_create-slideshows.xhtml"></span></p>
<h1>Creating a Slideshow</h1>
<p>The Ogg Video Tools provide a command line tool called <strong>oggSlideshow</strong> to create slideshows from a series of pictures in JEPG or PNG format with different effects for the changeover and presentation.<br />
</p>
<p>Synopsis: <strong>oggSlideshow [ Options ] picture1 picture2 picture3</strong> <br />
</p>
<p>Each picture is read in from the file system and resized as neccessary to match the video frame size, which can be given by the <em>-s</em> option. If a picture's aspect ratio does not match the video frame, black borders are added.</p>
<p>The following effects for the picture changeover are supported:</p>
<dl>
<p><strong>plain:</strong> Pictures are presented one after another.</p>
<p><strong>crossfade:</strong> The first image fades out while the next one gradually appears. The crossfade duration is 1 second.</p>
<p><strong>blurring:</strong> The picture is blurred before it disappears.The next picture appears blurred, then comes into focus.<br />
</p>
<p>Another special effect is the <strong>Ken Burns</strong> effect, named after the famous documentary film maker. This effect slides and zooms through the picture during presentation. The changeover in this effect is set to crossfade. ⁞⁞<br />
</p>
<p>There exist options to set bit-rate, the length of the per-picture presentation time, output file name and more, summarized below:</p>
<h2>Command Line Options<br />
</h2>
<p><em><strong>-s</strong></em></p>
<blockquote>
<p>Set the size of the video frame. The size is given as &lt;width&gt;x&lt;height&gt;. The default size is 480x320.</p>
<p><em>Example: -s 320x240</em></p>
</blockquote>
<p><em><strong>-f</strong></em></p>
<blockquote>
<p>Set the frame rate of the video, given as the number of frames per second. The default frame rate is 24 frames per second.</p>
<p><em>Example: -f 16</em></p>
</blockquote>
<p><em><strong>-o</strong></em></p>
<blockquote>
<p>Set the output file name of the created video. The default name is slideshow.ogv.</p>
<p><em>Example: -o myShow.ogv</em></p>
</blockquote>
<p><em><strong>-l</strong></em></p>
<blockquote>
<p>Set the presentation time (length) per picture. If your have 10 pictures and specify a length of 10 seconds, the overall video length will be 1:40 (i.e. 100 seconds).</p>
<p><em>Example: -l 10</em></p>
</blockquote>
<p><em><strong>-d</strong></em></p>
<blockquote>
<p>Set the datarate measured used for the video, measured as bit per seconds. This is intended more as an upper threshold. The resulting Theora file may be smaller than expected.</p>
</blockquote>
<blockquote>
<p><em>Example: -d 1024000</em></p>
</blockquote>
<p><em><strong>-t</strong></em></p>
<blockquote>
<p>Set the picture changeover effect type, as described above. Supported types are:</p>
<ul>
<li>kb: Ken Burns effect (default)</li>
<li>cf: picture crossfade for changeover</li>
<li>p: plain picture presentation</li>
<li>b: blurring as changeover</li>
</ul>
<p><em>Example: -t p</em></p>
</blockquote>
<p><em><strong>-e</strong></em></p>
<blockquote>
<p>Enable reframing. In case a picture does not match the aspect ratio of the video frame, it can be &quot;reframed&quot; by adding black borders. This option is only useful with the Ken Burns effect (option <em>-t kb</em>). With the other changeover effects, pictures are automatically reframed even without option <em>-e</em>.</p>
<p><em>Example: -t kb -e</em></p>
</blockquote>
<h2>Adding Sound to a Slideshow<br />
</h2>
<p>Using oggSlideshow you can create silent video files only. But adding audio afterwards is merely a matter of using a few more tools.<br />
</p>
<p>Let us assume you created a slideshow using all images from your directory <em>somePics</em>, as shown in the following example command line:<br />
</p>
<pre><code>$ oggSlideshow -s 320x240 -f 24 -o slideshow.ogv -d 512000 somePics/*.jpg</code></pre>
<p>Before adding audio, we first need to create an audio track that has the same length as the slide show. The slideshow duration is printed at the end of the slideshow creation process. Alternatively it can be read out using the following command:</p>
<pre><code>$ oggLength slideshow.ogv</code></pre>
<p>This returns the length of the video in milliseconds. Using that information we can cut an Ogg/Vorbis audio stream to the same length.  5.6 seconds in this example::</p>
<pre><code>$ oggCut -l 5600 myAudioTrack.ogg myAudioTrackAdjusted.ogg</code></pre>
<p>To multiplex both streams to one media file (<em>newSlideshow.ogm</em>), we use oggJoin:</p>
<pre><code>$ oggJoin newSlideshow.ogv myAudioTrackAdjusted.ogg slideshow.ogv</code></pre>
<p>Now you are done!<br />
</p>
<h2>Adding a Fixed Starting Picture</h2>
<p>The first picture in a slideshow often needs to be a title picture giving some details about the slideshow. Create a short and plain slideshow to use as title sequence, using only one picture:</p>
<pre><code>$ oggSlideshow -s 320x240 -f 24 -tp -o startPicture.ogv -l 10 -d 512000 \ startPicture.jpg</code></pre>
<p>Here the slideshow type is set to <em>plain</em> (<em>-tp</em>), making the picture just appear as it is. The duration is set to 10 seconds (in contrast to the default settingn of 8 seconds).</p>
<p>We prepend the title picture to our <em>slideshow.ogv</em> using oggCat:<br />
</p>
<pre><code>$ oggCat overallSlideshow.ogv startPicture.ogv slideshow.ogv</code></pre>
<p>Of course we can also add an audio track as described above:<br />
</p>
<pre><code>oggJoin newSlideshow.ogv myAudioTrackAdjusted.ogg overallSlideshow.ogv</code></pre>
<h2>A Script for Everything<br />
</h2>
<p>The following shell script creates combines everything described in this chapter, creating a slideshow with title sequence and audio.<br />
</p>
<pre><code>#!/bin/sh
#
# usage: ./mkSlideshow ~/mypicDir/ audiofile.oga outputFile.ogm
#
# Variables to be changed
#
# video frame size
SIZE=&quot;640x360&quot;
#
# data rate of the outgoing slideshow stream in bit/s
DATARATE=&quot;1024000&quot;
#
# presentation time of one picture in seconds
PR_TIME=&quot;10&quot;
#
# frame rate in pictures/s
FRAMERATE=&quot;24&quot;
#
# reframe picture
# This adds black borders to picture to meet the aspect ratio
# of the video frame size specified earlier.
# With the Ken Burns effect, this is not strictly necessary,
# but the sliding may be smoother
#REFRAME=&quot;-e&quot;
REFRAME=&quot;&quot;
#
# resample
# This option says, how the picture should be loaded (by gdlib)
# As the resize mechanism of gdlib is really good, it is used to
# bring it do a value &quot;near&quot; the video frame size (usually a bit
# bigger). You usually do not see a big difference, if you change
# this value :-), so keep it as it is (default = 1.2)
RESAMPLE=&quot;1.2&quot;
#
# slideshow type
# kb - Ken Burns Effect (sliding and zooming)
# p  - plain (picture display only, no crossfade between pictures)
# cf - crossfade (picture display, crossfading between pictures)
TYPE=&quot;kb&quot;
#
#
# Temporal file name
TMP_VIDEOFILE=&quot;slideshow_tmp.ogv&quot;
TMP_AUDIOFILE=&quot;audio_tmp.oga&quot;

# creating the slideshow
oggSlideshow -s $SIZE -d $DATARATE -l $PR_TIME -f $FRAMERATE \
 $REFRAME -r $RESAMPLE -t $TYPE -o $TMP_VIDEOFILE $1/*.jpg

# what is the length of this
LENGTHVIDEO=`oggLength $TMP_VIDEOFILE`

#
# cut the audio file
LENGTHAUDIO=`oggLength $2`

#
# is the audio file to short?
if [ $LENGTHVIDEO -gt $LENGTHAUDIO ]
then
  echo &quot;warning slideshow ($LENGTHVIDEO) is longer than your audio file ($LENGTHAUDIO)&quot;
  exit -1
fi

# cutting the audiofile
oggCut -l$LENGTHVIDEO -i$2 -o$TMP_AUDIOFILE

#
# Join audio and video file
oggJoin $3 $TMP_VIDEOFILE $TMP_AUDIOFILE

#
# remove old files
rm -f $TMP_VIDEOFILE $TMP_AUDIOFILE</code></pre>
</dl>
<p><span id="ch045_create-preview.xhtml"></span></p>
<h1>Creating a Video Preview</h1>
<p>Hosting online video, it is often preferable to embed a short preview clip of a film into the main webpage, which is linked it to the original video. Use the command line tool <strong>oggResize</strong> from the Ogg Video Tools (<a href="http://sourceforge.net/projects/oggvideotools" class="uri">http://sourceforge.net/projects/oggvideotools</a>) to create such a preview.</p>
<p>A typical command line calling oggResize looks as follows:<br />
</p>
<pre><code>$ oggResize -s256x144 -d64000 -f1 -p24 bigBuckBunny.ogv bigbuckbunnyPreview.ogv</code></pre>
<p>Here we create the Theora video file <em>bigbuckbunnyPreview.ogv</em> from the original file <em>bigBuckBunny.ogv</em> scaled to a small frame size of 256x144 pixels.<br />
</p>
<p>The -p option makes oggResize include only every 24th picture from the original, reducing duration to 1/24 of the original length, usually creating a fast-forward version of the video. Since it does not make much sense to fast-forward the audio stream of the video, audio is removed.</p>
<p>But here we also added option <em>-f1</em> thereby adjusting the frame rate of the created video to one frame per second. This prevents the video from being fast-forwarded, and is much easier to watch, looking similar to an animated GIF image.<br />
</p>
<h2>Adding a Play Button</h2>
<p>First we need a PNG picture of the button, with a transparency mask that allows us to overlay it over our video content.  The transparency mask is called an alpha channel, nowadays most image editing programs allow you to create one. Try for example the free software image editor <em>GIMP.</em><br />
</p>
<p>With the <em>-A</em> and <em>-a</em> options you overlay a picture over the output video before and after the video is rescaled respectively, to the size given by <em>-s</em>.<br />
</p>
<pre><code>$ oggResize -s256x144 -d64000 -f1 -p24 -A Play-256x144.png bigBuckBunny.ogv \ bigbuckbunnyPreview.ogv</code></pre>
<p>So that's it! Now you got a nice preview of the <em>bigBuckBunny.ogv</em> video, with a play button on top inviting users to click on.</p>
<p><span id="ch047_introduction.xhtml"></span></p>
<h1>Introduction</h1>
<p>The command line is a text-based method of calling utility programs and others in a shell command interpreter session in a terminal program. Most GNU/Linux systems have a program called Terminal on the main application menu. In most cases, it offers the user the Bourne-Again Shell, 'bash', a successor to the original Bourne shell, 'sh', but there are several others in use.<br />
</p>
<p>Every user should know how to use simple text commands such as 'df -h', which says to get a 'disk fullness' report in 'human'-readable units (MB rather than disk sectors). The basic features and many of the intermediate concepts of the command line are documented in the Floss Manuals book <em>Introduction to the Gnu/Linux Command Line</em>, available at no charge at <a href="http://en.flossmanuals.net/gnulinux.">http://en.flossmanuals.net/gnulinux</a>. Readers of that book who try out the examples given will be well prepared for anything described in this chapter. That is, they will have passed the beginner stage, and be ready to enter the threshold of the advanced user stage. Advanced command line use in GNU/Linux basically means two things: using the full range of options available in a command (as listed by the man command--try 'man man'), and writing scripts of more than a few lines using more than just simple commands.<br />
</p>
<p>Many video editing tools come in both a command line version and a full-screen text or GUI version that accepts a set of selections from the user, and composes a command line to execute. For example, installing packages from the command line in Debian, Ubuntu, and related GNU/Linux distributions uses the apt-get utility. (In Red Hat, use yum.) The full-screen text package installer in these systems is aptitude, and the GUI installer is synaptic. A well-written GUI tool can make it much easier to create, save, and reuse command options than selecting commands in text, or can help in navigating large file systems or databases. On the other hand, many GUI tools do not give control of all command options, so that more advanced use requires the command line, or alternatively saving complex commands in text files, and making them into executable script files with the chmod command.</p>
<h2>Lossless Video Editing<br />
</h2>
<p>Video editing is a very expensive venture in terms of your computer's computational power and memory consumption. This is because complex video editing tools must enable you to work with every frame of a video and every sample of an audio stream.</p>
<p>However, handling every single frame is not always necessary. In some cases, people only want to extract the video or the audio stream from a file, or merge ('multiplex') a file from video and audio streams, or they don't care about frame-accurate video cutting.</p>
<p>In these cases the video and audio streams don't need to be re-encoded and this makes the handling of video less costly in terms of your computer's resources. It also means the editing tools are very fast.</p>
<p>This editing process is called <strong>lossless</strong>, as there is no re-encoding involved. Re-encoding video always causes a loss in quality and editing video without re-encoding is therefore lossless. The encoded packets (chunks of data), either video or audio, are not touched. They are kept as they are, so they are decoded with the same quality they had before the editing process.</p>
<h2>Tools</h2>
<p>There are two main tool boxes for lossless video editing: The <strong>Ogg Video Tools</strong> and the <strong>Oggz Tools</strong>. They are both collections of command line tools. Ogg Video Tools and Oggz Tools works on GNU/Linux, OSX, and Windows.</p>
<p>Oggz can be found here: <a href="http://www.xiph.org/oggz/" class="uri">http://www.xiph.org/oggz/</a></p>
<p>Ogg Video Tools can be found here : <a href="http://oggvideotools.sourceforge.net">http://sourceforge.net/projects/oggvideotools</a>. If you are a Ubuntu user, you can directily install Ogg Video Tools by adding a Personal Package Archove to your system's Software Sources : <a href="https://launchpad.net/ubuntu/+ppas?name_filter=oggvideotools" class="uri">https://launchpad.net/ubuntu/+ppas?name_filter=oggvideotools</a><br />
</p>
<p>In some cases the two tool sets overlap in their functionality. Oggz Tools is a bit more focused on developers, while the Ogg Video Tools is more focused on end users. Ogg Video Tools provides a lot more tools for creating and handling ogg video files, while Oggz Tools provides a number of other tools, especially for analysing ogg files.</p>
<p>Ogg Video Tools can handle video streams created by the Theora encoder and audio streams created by the Vorbis encoder. Oggz can handle additional stream formats, like FLAC, Speex, CELT etc.</p>
<p><strong>Ogg Video Tools</strong> command line tools include:</p>
<ul>
<li><strong>oggSplit:</strong> demultiplexes a multiplexed ogg file into several files with one stream in each.</li>
<li><strong>oggJoin</strong>: multiplexes Ogg audio (vorbis) and Ogg video (theora) files into a single Ogg file.</li>
<li><strong>oggCut</strong>: creates a new Ogg file as a subpart of an original input Ogg file.</li>
<li><strong>oggCat</strong>: concatenates two or more Ogg files.</li>
<li><strong>oggResize</strong>: changes Theora and/or Vorbis streams in multiple ways. </li>
<li><strong>oggDump</strong>: prints a dump of packets or pages within a given Ogg file.</li>
<li><strong>oggLength</strong>: returns the length of a given Ogg file.</li>
<li><strong>oggSilence</strong>: creates a vorbis audio file of a given length and filled with silence.<br />
</li>
</ul>
<p><strong>Oggz Tools</strong> command line tools include:</p>
<ul>
<li><strong>oggz-chop</strong>: extracts part of an Ogg file between given start and/or end times.</li>
<li><strong>oggz-merge</strong>: merges ogg files together, interleaving pages in order of presentation time.</li>
<li><strong>oggz-sort</strong>: sorts the pages of an Ogg file in order of presentation time.</li>
<li><strong>oggz-rip</strong>: extracts one or more logical bitstreams from an Ogg file.</li>
<li><strong>oggz-info</strong>: displays info on the codecs used by an Ogg file.<br />
</li>
<li><strong>oggz-comment</strong>: lists or edits comments within the Ogg stream headers.<br />
</li>
<li><strong>oggz-validate</strong>: checks an Ogg file for common problems.</li>
<li><strong>oggz-dump</strong>: prints a dump of the packet streams within a given Ogg file.<br />
</li>
</ul>
<p><span id="ch048_theora-theory.xhtml"></span></p>
<h1>A Bit of Theory</h1>
<p>Editing Theora videos using command line tools like Oggz Tools and Ogg Video Tools does not require knowledge about the intricate details of how Theora works. However, as these command line tools process Theora files at a very low level, some side effects are going to show up that can not be explained without going into some of the details of the Theora format.<br />
</p>
<p>If you think you can live with minor inaccuracies caused by editing, feel free to skip reading this chapter.<br />
</p>
<h2>Anatomy of a Theora Video<br />
</h2>
<p>A video file normally consists of a video stream and an audio stream. To store both streams into one file, a so-called container format is used. The container used with Theora video is the Ogg container, holding a Theora video stream and one or more Vorbis audio streams.  Audio and video streams are stored interleaved. That means that every stream is segmented into several blocks of data with nearly equal size. These blocks are called <em>pages</em>.</p>
<p>Every page has a time stamp that gives information about where the page is placed within the stream. </p>
<p>Video and the audio streams are interleaved by concatenating the pages of both streams in  ascending order of their timestamps.  <br />
</p>
<h2>Demultiplexing<br />
</h2>
<p>Technically, splitting a video file into its video and audio streams is easy. This is due to the fact that the two streams can be separated by collecting the video and audio pages into different files. The process of splitting a video file into its streams is called <em>demultiplexing</em>.<br />
</p>
<p>As all necessary information required for playback is contained within the streams, without the Ogg container adding any further information, each of the split files itself constitutes a standard compliant Ogg contained stream and can be read by any Theora/Vorbis aware video or audio player.</p>
<h2>Page Timestamps</h2>
<p>As mentioned earlier, streams are stored segmented into several pages. A page has a <em>header that holds so-</em>called <em>meta data</em> describing this part of the video/audio stream. The header includes timing information, a unique stream identification number, a page number and some other information. </p>
<p>According to the Ogg standard, timing information for every page is given by the <em>granule position</em>, a 64 bit value contained in the header. How granule position relates to an actual time position like the number of milliseconds from the start of the video is entirely defined by the stream, and not covered by the Ogg container specification. For that reason a software handling Ogg files needs a granule position interpreter to correctly handle the file. This interpreter needs to be aware of the codec and stream specific information to produce timing information that can be compared across different streams.   </p>
<p>While not defining how to interpret granule positions, the Ogg Standard specifies that all pages within an Ogg file must be stored in ascending order of the corresponding time position. So any tool that cuts or concatenates streams needs working granule position interpreters for every contained stream in order to correctly interleave the pages.</p>
<h2>Encapsulating Codec Data<br />
</h2>
<p>Pages are of nearly equal size by default (around 4096 Bytes). However, audio and video packets created by a specific codec, usually do not fit exactly fit into a page.  Audio packets are usually much smaller. Video packets can be of a very different sizes, smaller or larger, depending on various factors.<br />
</p>
<p>Data that is produced by the video and audio codecs are firstly encapsulated into an <em>Ogg packet</em>. These packets are then placed into the <em>Ogg pages</em>. A packet can either be split over multiple pages, or combined with othe packets to fill up an otherwise underfull page, as required.<br />
</p>
<h3>Encapsulating Theora Video Data</h3>
<p>Theora video data created by the encoder consists of two types of <em>Ogg packets</em>: so called key frames (often also called I-Frames), which are full pictures, and P-Frames, which carry only the differences between the last and the current picture.</p>
<p>In order to display a given frame at a given time, the decoder must know the previous key frame and must decode every frame (including the key frame) up to the actual time position of the given frame.</p>
<p>To be able to decode a video at all, the decoder needs information about the stream itself, such as the video frame size. This information is placed into the header packets at the beginning of the stream.</p>
<h3>Encapsulating Vorbis Audio Data</h3>
<p>Vorbis audio data created by the encoder carries a certain number of audio <em>samples</em>. A sample is a unit of audio data. The number of samples per Ogg packet is fixed and can only vary between two possible sizes, defined in the stream header.<br />
</p>
<p>Similar to video data, audio data packets depend on each other.  To decode one audio packet, the previous packet is needed .<br />
</p>
<p>The audio decoder, depends on the stream parameters such as sample rate, bitrate etc, which are stored in stream header packets at the stream's beginning.<br />
</p>
<h2>Ogg Skeleton</h2>
<p>As was stated before, a video stream can not start at arbitrary time position due to its nature of having key frames (I-Frames) and delta frames (P-Frames). In addition audio is stored in packets, which have a given timing granularity.</p>
<p>To ensure synchronization and a correct starting point, <em>Ogg Skeleton</em> pages carry information about the starting position of a each stream. A decoder, that reads the Ogg Skeleton information, can then seek to the correct audio and video position and start playing from this position.</p>
<p><span id="ch049_split-a-file.xhtml"></span></p>
<h1><strong></strong>Splitting a Video File</h1>
<p>Splitting a video file into its constituent streams is often called <em>demultiplexing</em>. The command line tool oggSplit from the Ogg Video Tools performs demultiplexing.</p>
<blockquote>
Synopsis: <strong>oggSplit originalFile.ogv</strong>
</blockquote>
<p>This command extracts all streams in <em>originalFile.ogv</em> into separate files. It uses the following naming scheme for the created files:</p>
<p><strong>&lt;codecName&gt;_&lt;ID&gt;.&lt;extension&gt;</strong></p>
<p>The <em>codecName</em> is set to <em>theora</em>, <em>vorbis</em> or <em>unknown</em>, depending on the codec type of the stream in question.</p>
<p>Every stream has a specific <em>Identification Number (ID)</em>, set by the encoder. This ID is a 32 Bit number that is unique for every stream within a single Ogg file. As there can be more than one audio or video stream within a file (e.g. different audio streams for different languages), this ID is needed to distinguish among them.</p>
<p>The <em>extension</em> is set to match the contents of the stream. <em>ogv</em> is used for video files, <em>oga</em> for audio files and unknown streams get the extension <em>ogg</em>.</p>
<p><em>Example:</em></p>
<pre><code># oggSplit myFile.ogv
# ls
theora_a1bb23c1.ogv     vorbis_a316522.oga</code></pre>
<p><span id="ch050_cut-a-file.xhtml"></span></p>
<h1>Cutting an Ogg File</h1>
<p>Cutting an Ogg file consisting of video and audio streams into sections by time, while preserving synchronization between streams in the output files, is a bit tricky. Because there are several ways to do so, this section gives you an idea of the possiblities and their advantages and drawbacks.</p>
<p>Tools to edit video files can be divided between lossless and lossy tools. Lossless tools only handle the ogg stream (ogg pages and ogg packets). So the quality of the data is preserved. Lossy tools must first decode the data to allow editing and then re-encode, thus losing quality. This type of editing provides greater flexibility (e.g. it allows overlaying of images) at the expense of quality. Beyond that, the decoding and encoding process requires much more time than just handling Ogg stream packets.</p>
<p>This chapter only deals with tools that losslessy cut video files.</p>
<h2>Using oggCut</h2>
<p>The command line tool oggCut is a tool that can cut Ogg files on a keyframe basis. Use it like:</p>
<pre><code>oggCut -s &lt;StartTime&gt; -e &lt;EndTime&gt; originalFile.ogv createdFile.ogv</code></pre>
<p>where <em>&lt;StarTime&gt;</em> and <em>&lt;EndTime&gt;</em> are given in milliseconds. Alternatively you can cut using a start time and length using option <em>-s</em>:</p>
<pre><code>oggCut -s &lt;StartTime&gt; -l &lt;Length&gt; originalFile.ogv createdFile.ogv</code></pre>
<p>Here, too <em>&lt;Length&gt;</em> is measured in milliseconds.</p>
<p>When oggCut is executed, it searches for the first Ogg Theora packet with a timestamp greater than or equal to the time given by the <em>-s</em> option. If this packet is found, the program seeks to the next keyframe and creates the new file with that keyframe as the first frame.</p>
<p>When the program finds a packet with a timestamp greater than the end time, it closes the newly created file and stops.</p>
<p>As the start time is likely not the position of a keyframe, the created file may be smaller than expected.</p>
<h3>Video/Audio synchronization issues with oggCut</h3>
<p>Because oggCut only operates only on packet boundaries, and because Vorbis and Theora stream packets are not synchronous, the audio and video packets usually start at different time positions.</p>
<p>Therefore when oggCut creates a new file that starts at time <strong>t</strong>, the next audio packet will likely start at a position <strong>t+x</strong>, where x is the time offset between the keyframe video and the next audio packet.</p>
<p>When these two streams are written to the new file, this time offset information is lost. Therefore the player must assume that both files start at time 0. For that reason, the audio stream always plays a bit too early. However, as an audio block is quite short, the difference is usually only a few milliseconds and is hardly noticeable.</p>
<h2>Using oggz-chop</h2>
<p>The program oggz-chop from oggz-tools cuts Theora videos at any position requested. If neccessary it cuts at non-keyframes or even in the middle of a frame's presentation time.</p>
<p>Technically this kind of fine-granularity cutting is not possible with Theora video technology. It is achieved by a trick: instead of really cutting the video at the requested position, it is cut at the closest point, making the resulting video file longer than requested. Then a so-called Ogg Skeleton header is added to the video that instructs the player to only play the actually requested range of the video.</p>
<p>The superfluous video frames that could not be cut from the video are still present, they will just be hidden on playback.</p>
<p>The disadvantages of this approach are obvious: on the one hand, disk space is wasted by storing unnecessary amounts of data, on the other hand, the newly cut file will only play back correctly in video players that understand the Ogg Skeleton information. Another not so obvious disadvantage is that files that were created this way can not be concatenated without the hidden part reappearing. This is due to the fact that the Ogg Skeleton can only hide frames at the start and end of a video. Concatenating two videos of this kind, will leave hidden frames in the middle -- something Ogg Skeleton does not support.</p>
<p>Now that you understand the implications of using oggz-chop, let's look at how it is used:</p>
<pre><code>oggz-chop -s &lt;StartTime&gt; -e &lt;EndTime&gt; originalFile.ogv createdFile.ogv</code></pre>
<p>Here <em>&lt;StartTime&gt;</em> and <em>&lt;EndTime&gt;</em> are specified as <em>&lt;Hour&gt;:&lt;Minute&gt;:&lt;Second&gt;</em>. <em>&lt;Second&gt;</em> can contain a fractional part so you are free to specify time at any resolution.</p>
<p>We should mention another option: you can run oggz-chop with <em>-k</em> to force it to omit any Ogg Skeleton information. This way granularity of the cutting process is limited to keyframes and you can be sure that the generated file will play back correctly even in older players that do not support the Skeleton.</p>
<p><span id="ch051_join-files.xhtml"></span></p>
<h1>Join Streams</h1>
<p>Ogg Video Tools provides the command line tool <strong>oggJoin</strong> to interleave two or more streams into one Theora video file. It is able to interpret the page granule position and interleave the streams in case they contain Theora video or Vorbis audio.</p>
<p>This process is also called multiplexing.</p>
<blockquote>
Synopsis: <strong>oggJoin newFile.ogv stream1.ogv stream2.oga [ stream3.oga [...] ]</strong>
</blockquote>
<p><strong>Note:</strong> The video stream (.ogv) <em>must</em> come first.</p>
<p>Although oggJoin allows arranging the streams in any possible order, the Theora standard demands that the video stream be the first stream. Correctly stated: the Theora header must be the first header within a multiplexed file, in order to allow players to differentiate between audio only and video files. This is achieved by placing the video stream first stream in the list, as shown in the synopsis.</p>
<p><span id="ch052_cat-files.xhtml"></span></p>
<h1>Ogg File Concatenation</h1>
<p>To concatenate two or more Ogg files with audio and video streams into a single video file without reencoding is easy, but can lead to the same synchronization problems as using oggCut.</p>
<p>The command line tool oggCat creates a new Ogg file from a number of other Ogg files.</p>
<blockquote>
Synopsis: <strong>oggCat outputFile.ogv inputfile1.ogv inputfile2.ogv [ inputfile3.ogv [ .. ] ]</strong>
</blockquote>
<p>To create an Ogg file, the parameters for all streams must match. If one or more parameters in an input file do not match, that file will be ignored, but the process of creating the output file will continue. The output file is a valid ogg file. It is just not the ogg file desired.</p>
<h2>The Process</h2>
<p>oggCat reads in the first file mostly as it is. However, it does not handle any unkown streams and does not integrate them into the output file.</p>
<p>To find a corresponding stream within the succeeding Ogg files, oggCat creates a parameter table with all necessary information about the streams of the first file (inputfile1.ogv), so that the first file serves as a &quot;reference&quot;.</p>
<p>The streams in the following files (inputfile2.ogv inputfile3.ogv ...) are tested against the parameters of the reference table, so they do not have to be in the same order as the reference file.</p>
<p><strong>Example:</strong></p>
<pre><code>The first Ogg file consists of one theora and one vorbis stream. The theora stream video has a frame size of 320x240 pixel and the vorbis audio stream has a sample rate of 32 kHz.

The next file consists of three streams: two theora streams and one vorbis stream. oggCat can handle the concatenation as long as there is at least one theora stream available with matching parameters (320x240 pixel framesize) and the audio stream parameter matches, too. The second theora stream can have whatever parameters.</code></pre>
<p>If there are no matching parameters in any of the streams, oggCat prints a line suggesting how the file might be reencoded:</p>
<pre><code>vorbis parameter compare: data rate not matching 32000 != 64000
You may try to reencode with the datarate of the other file

Please try to resample with the following command
oggResize -D 32000 &lt;file see below&gt;</code></pre>
<h2>Using cat</h2>
<p>Another way to concatenate two videos is by adding one file after another with the command line tool <strong>cat</strong>. This method triggers the player to setup a new decoding session for the next stream.</p>
<p>The Ogg Standard allows opening a stream after another stream has ended, but most players do not implement this method of re-opening a decoder session. Therefore this method should always be tested with the players that should be used after this session.</p>
<h2>oggCat and oggz-chop</h2>
<p>When a file has been created with oggz-chop, concatenation is not possible because of the way oggCat works.</p>
<p>The reason is that files with a skeleton and different time offsets defined in this skeleton for every stream (as is the case for most files created with oggz-chop) can not be concatenated to one continuous stream. This behavior is caused by the fact that two ogg streams would overlap. The presented frames would overlap the ones that are not presented, as they are only needed for the decoding of the first video frame. This is not possibile in one Ogg stream.</p>
<h2>Syncronizing issues with oggCat</h2>
<p>Different streams in one Ogg file may not have the (exact) same length. During the concatenation process the streams of the next Ogg file in the concatenation list are placed directly after the corresponding streams of the starting file without any time gaps. Therefore synchronization of the second file will suffer from an inaccurate stream ending of the first file.</p>
<p><span id="ch053_resizing.xhtml"></span></p>
<h1>OggResize</h1>
<p>The command line tool <strong>oggResize</strong> can resize the height and width of an ogg file (ogg, oga or ogv) in various ways. However, it does only handle Ogg Theora and Vorbis streams. The advantage of oggResize over other tools is that it converts only the streams that need to be changed. Streams that need no conversion will not be effected.</p>
<p>oggResize can change the <strong>video frame size</strong>, video or audio <strong>datarate</strong> and the video <strong>frame rate</strong> or audio <strong>sample rate</strong>.</p>
<p>It can also add <strong>comments</strong> to any stream and can include <strong>PNG images</strong> with an alpha channel, which are rendered into the video at any time period before or after the resizing process.</p>
<blockquote>
Synopsis: <strong>oggResize [options] inputfile.ogv outputfile.ogv</strong>
</blockquote>
<p>The available options are:</p>
<p><em>-s</em>   sets the size of the video frame. The size is given as <em>&lt;width&gt;x&lt;height&gt;</em>. The default size is 480x320.<br />
By default the aspect ratio of the original video frame is kept as it is, so if the size of the new video frame does not match in aspect ratio, oggResize adds black borders at the top and bottom or right and left, to fit the new aspect ratio.<br />
If you want to stretch the video frames to the new size, use the <em>-t</em> option.<br />
</p>
<p><em>Example: -s 320x240</em></p>
<p><em>-d</em>   sets the datarate in <strong>bits per second</strong> for the video encoder (theora). This is meant to be an upper threshold. So the file may be smaller than assumed. If not set, the datarate of the original stream is used.</p>
<p><em>Example: -d 1024000</em></p>
<p><em>-D</em>   sets the datarate in <strong>bits per second</strong> for the audio encoder (vorbis). If not set, the datarate of the original stream is used.</p>
<p><em>Example: -D 64000</em></p>
<p><em>-f</em>   sets the frame rate of the video with numerator and denominator and is the frames per second. If only one number is given, the denominator is set to 1. If not set, the frame rate of the original video is used.</p>
<p><em>Example: -f 25:2</em></p>
<p><em>-F</em>   sets the sample frequency (sample rate) of the audio data in Hertz. If the sample frequency does not match the original file, resampling is invoked.</p>
<p><em>Example: -F 32000</em></p>
<p>-t   if this option is set, the picture will be stretched to the output size. In this case, the aspect ratio of the output video may not match the original video frame aspect ratio. This option help omitting the black borders, that appear if the aspect ratio of the original and the new video do not match.<br />
</p>
<p><em>Example: -t</em><br />
</p>
<p>-c   adds comments to the video (theora) stream. Comments are in the form 'type=value'. More than one comment can be concatenated with a semicolon. It is recommended that apostrophes (single quote) be used, as the command line may use the semicolon as a separator.</p>
<p><em>Example: -c 'AUTHOR=yorn;DATE=03.07.09'</em></p>
<p>-C   adds comments to the audio (vorbis) stream. Comments are in the form 'type=value'. More than one comment can be concatenated with a semicolon. It is recommended that apostrophes (single quote) be used, as the command line may use the semicolon as a separator.</p>
<p><em>Example: -C 'AUTHOR=yorn;DATE=03.07.09'</em></p>
<p>-q   specifies the quality for the resizing process. Values can be chosen between 1 (best quality, with slight bluring) and 6 (worst quality). The default value is 2.</p>
<p><em>Example: -q1</em></p>
<p>-p   creates a preview film. The number given with this option specifies the interval between the frames selected, e.g. <em>-p24</em> means that every 24th frame is selected/shown. Thus the newly created video plays 24 times faster. This option can be combined with the <em>-f</em> option to control the frame rate. With both options nice video previews can be created. If -p is used, the audio stream is ignored.</p>
<p><em>Example: -p 24</em></p>
<p>-a   adds a picture to the video frame before it is resized. The picture does not have to fit into the video frame. It is always placed in the upper left corner of the video frame.</p>
<p><em>Expression: &lt;picture1.png&gt;[,&lt;startTime&gt;[,&lt;endTime&gt;[,s]]]</em></p>
<p><em>The default start time is 0. The default end time is -1. By default <strong>s</strong> is not set. In this case the picture does not fade in. If <strong>s</strong> is set then the picture does fade in.</em></p>
<p><em>It is possible to superimpose more than one picture on a video frame. To concatenate the expressions use the colon. If the timelines overlap, the pictures are superimposed on one another, so the last picture is the foreground layer.</em></p>
<p><em><em>Example: -a etwas.png,2,7,s:etwasneues.png,5,10</em></em></p>
<p><em>-A   adds a picture to the video frame after it is resized.</em></p>
<p><em>The syntax is the same expression as with <em>-a</em> option</em></p>
<h2><em>Examples</em></h2>
<p><em><em>Changing the video frame size and the datarate</em>:</em></p>
<pre><code> oggResize -s320x240 -d512000 orig.ogv new.ogv</code></pre>
<p><em>This command converts the video file orig.ogv to the new video file new.ogv. The frame size of the newly created video is set to 320x240 pixels and the data rate is set to 512 kByte/s. If the parameters of the original file fit the new parameters, the video stream is just copied, without changing the data. If the video frame size is different, it is changed to the new size by some appropriate algorithms.</em></p>
<p><em>If there was an audio stream within the orig.ogv file, it is copied into the new file.</em></p>
<p><em><em>Changing the audio data rate, sample rate and numbers of channels:</em></em></p>
<pre><code>oggResize -D64000 -F16000 -N1 orig.ogv new.ogv</code></pre>
<p><em>This command line converts only the audio stream of file orig.ogv to a sample rate of 16kHz, a datarate of 64 kBytes/s and a mono channel. As with video, the audio stream is only reencoded, if the given parameters do not match that ones in the vorbis audio stream. The video stream is copied as is.</em></p>
<p><em>This is a very fast method of reencoding only the audio stream, without any other procedures such as splitting and rejoining the streams of an ogg file.</em></p>
<p><em><em>Changing the video frame size, the audio data rate, the video data rate and adding two pictures on top of the video for a period of time:</em></em></p>
<pre><code>oggResize -s300x200 -D32000 -d1024000 -A etwas.png,2,7,s:etwasneues.png,5,10 \ orig.ogv new.ogv</code></pre>
<p><em>This command line converts the audio and video stream as described in the before mentioned examples.</em></p>
<p><em>Additionally it adds a picture in PNG format and an alpha channel <strong>etwas.png</strong> to the video from second 2 to second 7 with a smooth fade in and fade out and the picture <strong>etwasneues.png</strong> is placed on top of the video frame from second 5 to second 10 without any fading.</em></p>
<p><span id="ch054_analysing-ogg.xhtml"></span></p>
<h1>Analysing Ogg Files</h1>
<p>There are a number of tools available to analyse ogg files from the packages <strong>Vorbis tools</strong>, <strong>oggz tools</strong> and <strong>Ogg Video Tools</strong>. As with editing, the tools may overlapping in functionality, however here we will focus on the usual usage of the available tools and the fields where they could be used.</p>
<p>The tools that are discussed here are :</p>
<p>From <strong>Vorbis tools</strong>:<br />
</p>
<ul>
<li>ogginfo</li>
</ul>
<p>From <strong>oggz tools</strong>:<br />
</p>
<ul>
<li>oggz-info</li>
<li>oggz-comment<br />
</li>
<li>oggz-validate</li>
<li>oggz-sort<br />
</li>
<li>oggz-dump</li>
<li>oggz-sort<br />
</li>
</ul>
<p>From <strong>Ogg Video Tools</strong>:<br />
</p>
<ul>
<li>oggDump</li>
<li>oggLength<br />
</li>
</ul>
<h2>Information about an Ogg file</h2>
<p>If you want to get some information about what streams are available within a file and what nature these streams have, you use <strong>ogginfo</strong> or <strong>oggz-info</strong>.</p>
<pre><code>$ oggz-info big_buck_bunny_480p_stereo-small.ogv
Content-Duration: 00:09:56.384

Theora: serialno 0000020573
	9546 packets in 6797 pages, 1.4 packets/page, 1.037% Ogg overhead
	Video-Framerate: 16.000 fps
	Video-Width: 320
	Video-Height: 240

Vorbis: serialno 0000003594
	18641 packets in 576 pages, 32.4 packets/page, 1.412% Ogg overhead
	Audio-Samplerate: 16000 Hz
	Audio-Channels: 2</code></pre>
<p>The printed output here is about which streams are available within the Ogg file and the parameters the streams have (e.g. for theora the video frame size and the frame rate and for vorbis the sample rate and the channel number).</p>
<p><strong>ogginfo</strong> even prints out more detailed information, e.g. version information and all information available from the video and audio header packets, e.g. aspect ratio or colour spaces.  <br />
</p>
<p><strong>oggz-info</strong> can tell you more about an Ogg file. In particular, the <strong>-a</strong> option will tell you even more detailed information on your file. However, these information are mostly from the statistical area.</p>
<p>To read or edit the comments fields, that are delivered with every stream within the Ogg file. To do so, the oggz tools provide the <strong>oggz-comment</strong> command line tool.</p>
<p>Example for printing the comments.</p>
<pre><code>$ oggz-comment -l big_buck_bunny_480p_stereo-small.ogg
Theora: serialno 0000020573
	Vendor: Xiph.Org libTheora I 20081020 3 2 1
	ENCODER: oggvideotools-0.8-win32
Vorbis: serialno 0000003594
	Vendor: Xiph.Org libVorbis I 20090514
	ENCODER: oggvideotools-0.8</code></pre>
<p>To add a comment, your add a &quot;Tag=Value&quot; pair to the end of your command line.</p>
<pre><code>$ oggz-comment big_buck_bunny_480p_stereo-small.ogg -o bigbuck_comment.ogv \ &quot;LICENCE=Creative Commons CC-BY-SA&quot;

$ oggz-comment -l bigbuck_comment.ogv
Theora: serialno 0000020573
	Vendor: Xiph.Org libTheora I 20081020 3 2 1
	ENCODER: oggvideotools-0.8-win32
	LICENCE: Creative Commons CC-BY-SA
Vorbis: serialno 0000003594
	Vendor: Xiph.Org libVorbis I 20090514
	ENCODER: oggVideoTools 0.8
	LICENCE: Creative Commons CC-BY-SA</code></pre>
<p>Your can also add a comment only to one of the available streams or delete comments. Please refer to the help page for these more advanced options.</p>
<h2>Analysing an Ogg file in detail<br />
</h2>
<p>Mainly for developers, it is often useful to have a look into the stream itself and to analyse if an Ogg file is compliant with the Ogg Standard.</p>
<p>For validating a file you use the command line tool <strong>oggz-validate</strong>:<br />
</p>
<pre><code>$ oggz-validate input.ogv
input.ogv: Error:
serialno 1101839243: Terminal header page has non-zero granulepos
serialno 1101839243: Terminal header page contains non-header segment</code></pre>
<p>A rather common problem that <strong>oggz-validate</strong> might report, is badly sorted Ogg files. These will usually play, but may cause issues such as intermittent stuttering, or increased memory usage. The <strong>oggz-sort</strong> tool may be used to correct these sorting issues:</p>
<pre><code>$ oggz-sort -o output.ogv input.ogv</code></pre>
<p>A more detailed view can be given by the tools <strong>oggz-dump</strong> and <strong>oggDump</strong>. Both of these tools write detailed output data to the console.</p>
<p><strong>oggz-dump</strong> can output the packets of all or some specific streams within a given Ogg file.</p>
<pre><code>$ oggz-dump myfile.ogv
[ ... ]
    0b40: 6f13 abc9 f3ac 9dc2 cec5 9c62 0e70 1fab  o..........b.p..
    0b50: f891 01a8 0633 430e 308a 6f8c 86c3 131a  .....3C.0.o.....
    0b60: 3ab6 840d edab e79f fe24 a4              :.. .....$.

00:00:32.104: serialno 0938763527, calc. gpos 513664, packetno 1022: 269 bytes
    0000: 3eb7 e92b 50b4 0028 a93c 8bc4 0039 0948  &gt;..+P..(.&lt;...9 H
    0010: 1d58 0000 0080 5f03 db01 ee92 2482 48dd  .X...._.....$.H.
    0020: d73f 2562 feeb de81 94fe 75fb b7ff decf  .?%b......u.....
    0030: 18c0 b830 619f b6c5 cf0d 00f3 b5f5 bbbd  ...0a.... ......
[ ... ]</code></pre>
<p>With <strong>oggDump</strong> you can decide if you like to see the pages or the packet information of an Ogg file by setting the <strong>-p</strong> (packet) or <strong>-g</strong> (page) option. Further more you can specify the detail level of the stream information output by using -l (detail). The detail can be set from 1 (not detailed) to 5 (most details):<br />
</p>
<pre><code>$ oggDump -l3 -g myVideo.ogv
[ ... ]
Ogg Page: header length = 42 and body length = 3600
Header Information:
        Ogg Version      : 0
        Serial No        : 0x37f46507
        Packet Type      : fresh packet
        Page Type        : normal page
        Last Page        : normal page
        Granule Position : 0(0x0)
        Page Number      : 1
        Checksum         : 0x5ced317c
        Table Segments   : 15

Segments:
 67 ff ff ff ff ff ff ff ff ff ff ff ff ff b6

Header Hex dump:
 4f 67 67 53 00 00 00 00 00 00 00 00 00 00 07 65
 f4 37 01 00 00 00 7c 31

[ ... ]
</code></pre>
<h2>Tips and tricks</h2>
<p>This subsection lists some useful ways to use several of the tools described above.<br />
</p>
<h3>Getting the Duration of a Stream</h3>
<p>To figure out the duration of a video file you can use <strong>oggz-info</strong> or <strong>ogginfo</strong>, but here you need to extract the information via script from the output. <strong>oggLength</strong> gives you another way to receive the length directly, so you can use it more easily.</p>
<p><strong>Create an Ogg Vorbis file filled with silence that fits exactly to a video</strong> <em></em><br />
</p>
<pre><code>$ oggSilence -l`oggLength videoFile.ogv` -o audioSilence.oga</code></pre>
<h3>Creating a sound byte from a portion of a video</h3>
<p>These two commands save a short 5 second audio clip from 40 seconds into a video: </p>
<pre><code>$ oggz-rip -c vorbis video.ogv -o temp.ogg
$ oggz-chop -s 40 -e 45 -o soundbyte.ogg temp.og</code></pre>
<h3>Adding an embedded text subtitles stream</h3>
<p>You've written German subtitles for an English language video you found on the web ?</p>
<pre><code>$ kateenc -t srt -l de -c SUB -o subtitles.ogg subtitles.srt
$ oggz-merge -o video-with-german-subtitles.ogv original-video.ogv subtitles.ogg</code></pre>
<h3>Getting a list of all packets in a stream in a very compressed way</h3>
<pre><code>$ oggz-dump video.ogv | grep packetno | less
00:00:00.437: serialno 0000020573, calc. gpos 0|7, packetno 10: 414 bytes
00:00:00.500: serialno 0000020573, calc. gpos 0|8, packetno 11: 692 bytes
00:00:00.562: serialno 0000020573, calc. gpos 0|9, packetno 12: 600 bytes
00:00:00.625: serialno 0000020573, granulepos 0|10, packetno 13: 859 bytes
00:00:00.687: serialno 0000020573, calc. gpos 0|11, packetno 14: 700 bytes
00:00:00.750: serialno 0000020573, calc. gpos 0|12, packetno 15: 1.154 kB
00:00:00.812: serialno 0000020573, calc. gpos 0|13, packetno 16: 878 bytes
00:00:00.875: serialno 0000020573, granulepos 0|14, packetno 17: 1.342 kB
00:00:00.000: serialno 0000003594, calc. gpos 0, packetno 3: 118 bytes
00:00:00.032: serialno 0000003594, calc. gpos 512, packetno 4: 115 bytes
00:00:00.064: serialno 0000003594, calc. gpos 1024, packetno 5: 127 bytes</code></pre>
<p><br />
</p>
<p> </p>
<p><br />
</p>
<p><span id="ch056_interesting-extras.xhtml"></span></p>
<h1>Other Interesting Things</h1>
<p>Here are some additional projects you might find interesting. You will need Firefox 3.5 to view most of these.<br />
</p>
<h2>Video and SVG</h2>
<p>http://www.double.co.nz/video_test/video.svg</p>
<h2>Video and CSS Transforms</h2>
<p>http://www.zachstronaut.com/lab/isocube.html<br />
http://hacks.mozilla.org/2009/06/tristan-washing-machine/<br />
http://hacks.mozilla.org/2009/07/video-more-than-just-a-tag/</p>
<h2>Video and Subtitles</h2>
<p>http://people.mozilla.com/~prouget/demos/srt/index2.xhtml<br />
http://people.mozilla.com/~prouget/demos/DynamicContentInjection/play.xhtml<br />
http://www.annodex.net/~silvia/itext/<br />
http://www.annodex.net/~silvia/itext/elephant_no_skin.html<br />
</p>
<h2>Replace background with image</h2>
<p>http://people.mozilla.com/~prouget/demos/green/green.xhtml</p>
<p><span id="ch057_glossary.xhtml"></span></p>
<h1>Glossary</h1>
<p><strong>absolute URL</strong> Link specifying the complete path to a file. Contrast with <em>relative URL</em>.<br />
</p>
<p><strong>codec</strong> Short for '<em>coder</em>-<em>decoder</em>'; a device or computer program capable of encoding and/or decoding a digital data stream or analog signal.</p>
<p><strong>compression</strong> A method for generating smaller files for transmission or storage, with the capability of regenerating the original data exactly (<em>lossless</em> compression) or approximately (<em>lossy</em> compression).</p>
<p><strong>container</strong> A file format that specifies how different streams of data or files (such as encoded audio and video) can be stored or sent over a network together. Also called a wrapper. A particular container format can include video data in many encodings.  The .ogg format combines Ogg Vorbis audio and Ogg Theora video, plus <em>metadata</em>. Matroska (.mkv), .mp4, and .avi containers can also contain Ogg Theora video.<br />
</p>
<p><strong>decoder</strong> A device or computer program for converting a compressed or otherwise encoded file or data stream back to the original format and either the exact original data (<em>lossless</em> compression), or some approximation of it (<em>lossy</em> compression).</p>
<p><strong>demultiplex</strong> Convert a file or <em>stream</em> containing multiple data streams to separate files or streams containing one stream each.<br />
</p>
<p><strong>distribution</strong> In GNU/Linux and BSD, a set of software selected, maintained, and distributed under Free license by some organization or individual, including the operating system, essential utilities and data, and applications. For example, Ubuntu Linux or FreeBSD.<br />
</p>
<p><strong>encoder</strong> A device or computer program for converting a source file or data <em>stream</em> to another format, usually compressed.</p>
<p><strong>Firefogg</strong> Firefox add-on for encoding video in Ogg Theora while it is uploading to a Web site. Requires specific software in the Web server.<br />
</p>
<p><strong>GUI</strong> Graphical User Interface<br />
</p>
<p><strong>H.264</strong> A patent-encumbered <em>codec</em> used by Apple, Youtube, and others.</p>
<p><strong>HTML5</strong> Version 5 of Hyper Text Markup Language, which includes new functions for managing video.</p>
<p><strong>jar file</strong> Java archive file containing software written in Java.<br />
</p>
<p><strong>key frame</strong> In video <em>compression</em>, a frame that is described in full, usually at the start of a scene or cut. Succeeding frames can be described by their differences from a preceding frame.<br />
</p>
<p><strong>lossy</strong> In data compression and encoding, an irreversible algorithm that enables recovery of an approximate copy of the original data. Some lossy algorithms permit the user to set the degree of accuracy in the encoding step.<br />
</p>
<p><strong>lossless</strong> In data compression and encoding, a reversible algorithm that enables recovery of a bit-perfect copy of the original data.</p>
<p><strong>metadata</strong> Information about the contents of a file, such as title, author, and so on.<br />
</p>
<p><strong>NGO</strong> Non-Governmental Organization, usually but not always a non-profit corporation.<br />
</p>
<p><strong>patent, software</strong> A licensed monopoly on an idea or algorithm. The legality and desirability of software patents are hotly debated, and a good deal of ingenuity is put into circumventing them.</p>
<p><strong>relative URL</strong> Link to a file starting from the current location in the file system. Contrast with <em>absolute URL</em>.<br />
</p>
<p><strong>split</strong> <em>Demultiplex</em>.<br />
</p>
<p><strong>stream</strong> A continuous data transmission without a predefined size, as opposed to a file of some specific size.</p>
<p><strong>streaming</strong> Real-time delivery of multimedia content, in contrast with downloading followed by playing.<br />
</p>
<p><strong>torrent</strong> 1) Distributed download software such as BitTorrent, and its method of operation, in which pieces of a file are assembled from multiple sites. Users who have downloaded a file, and have more upload bandwidth than they need, offer to let others get part of the file from them. 2) Download software using a torrent client. 3) The tiny file that specifies how to torrent a much larger file.</p>
<p><strong>transcode</strong> Change content from one encoding to another. When transcoding, best results are attained when starting from the originals, as successive lossy encodings lose quality with each step.<br />
</p>
<p><strong>wrapper</strong> A <em>container</em>.<br />
</p>
<p><span id="ch058_credits.xhtml"></span></p>
<h1><span id="ch058_credits.xhtml#License"></span> License</h1>
<p>All chapters copyright of the authors (see below). Unless otherwise stated all chapters in this manual licensed with <strong>GNU General Public License version 2</strong></p>
<p>This documentation is free documentation; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.</p>
<p>This documentation is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License along with this documentation; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.</p>
<h2><span id="ch058_credits.xhtml#Authors"></span> Authors</h2>
<p><em>ABOUT THIS MANUAL</em><br />
© adam hyde 2009<br />
Modifications:<br />
David Kühling 2009<br />
William Merriam 2009<br />
</p>
<hr />
<p><em>ACCESSIBILITY</em><br />
© TWikiGuest 2009<br />
Modifications:<br />
adam hyde 2009<br />
Silvia Pfeiffer 2009<br />
</p>
<hr />
<p><em>ANALYSING OGG</em><br />
© Mark Hancock 2009<br />
Modifications:<br />
adam hyde 2009<br />
Jan Gerber 2009<br />
ogg k 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>STREAM RIPPING</em><br />
© adam hyde 2007, 2009<br />
Modifications:<br />
Alan Toner 2009<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
ogg k 2009<br />
TWikiGuest 2010<br />
Thomas Middleton 2008<br />
Jörn Seger 2009<br />
douglas 2010<br />
</p>
<hr />
<p><em>CAT FILES</em><br />
© adam hyde 2009<br />
Modifications:<br />
Robert Valliant 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>CODECS</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
Holmes Wilson 2009<br />
Jaap Hoetmer 2009<br />
Jan Gerber 2009<br />
ogg k 2009<br />
Robert Valliant 2009<br />
susanne lang 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>CONTAINERS</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
ogg k 2009<br />
susanne lang 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>DISTRIBUTION</em><br />
© adam hyde 2007, 2009<br />
Modifications:<br />
Holmes Wilson 2009<br />
ogg k 2009<br />
susanne lang 2009<br />
TWikiGuest 2010<br />
Thomas Middleton 2008<br />
douglas 2010<br />
</p>
<hr />
<p><em>CREATE PREVIEW</em><br />
© Jörn Seger 2009<br />
Modifications:<br />
adam hyde 2009<br />
Alan Toner 2009<br />
David Kühling 2009<br />
</p>
<hr />
<p><em>CREATE SLIDESHOWS</em><br />
© Jörn Seger 2009<br />
Modifications:<br />
adam hyde 2009<br />
Alan Toner 2009<br />
David Kühling 2009<br />
Edward Cherlin 2009<br />
</p>
<hr />
<p><em>CREATE THUMBNAILS</em><br />
© Jörn Seger 2009<br />
Modifications:<br />
adam hyde 2009<br />
Alan Toner 2009<br />
David Kühling 2009<br />
Mark Hancock 2009<br />
</p>
<hr />
<p><em>CREDITS</em><br />
© adam hyde 2006, 2007, 2009</p>
<hr />
<p><em>CUT A FILE</em><br />
© adam hyde 2009<br />
Modifications:<br />
David Kühling 2009<br />
Edward Cherlin 2009<br />
Robert Valliant 2009<br />
</p>
<hr />
<p><em>INTRODUCTION</em><br />
© adam hyde 2007, 2009<br />
Modifications:<br />
Alan Toner 2009<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
salsa man 2009<br />
susanne lang 2009<br />
Thomas Middleton 2008<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>EMBEDDING SUBTITLES</em><br />
© adam hyde 2009<br />
Modifications:<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
susanne lang 2009<br />
</p>
<hr />
<p><em>INTRODUCTION</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
David Kühling 2009<br />
Jan Gerber 2009<br />
jay maechtlen 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>FFMPEG2THEORA</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
David Kühling 2009<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
ogg k 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>FFMPEG2THEORA</em><br />
© adam hyde 2007, 2009<br />
Modifications:<br />
Alan Toner 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
TWikiGuest 2010<br />
Thomas Middleton 2008<br />
Jörn Seger 2009<br />
douglas 2010<br />
</p>
<hr />
<p><em>FIREFOGG</em><br />
© maxigas maxigas 2007<br />
Modifications:<br />
adam hyde 2009<br />
David Kühling 2009<br />
Jan Gerber 2009<br />
Peter W 2009<br />
Thomas Middleton 2008<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>GLOSSARY</em><br />
© adam hyde 2006, 2009<br />
Modifications:<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
ogg k 2009<br />
Thomas Middleton 2008<br />
</p>
<hr />
<p><em>HTML5</em><br />
© Jörn Seger 2009<br />
Modifications:<br />
adam hyde 2009<br />
Ali Gunduz 2009<br />
Andrew Nicholson 2009<br />
Jan Gerber 2009<br />
Michael Dale 2009<br />
ogg k 2009<br />
Robert Valliant 2009<br />
Silvia Pfeiffer 2009<br />
</p>
<hr />
<p><em>HOSTING SITES</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
Andrew Nicholson 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009, 2010<br />
</p>
<hr />
<p><em>ICECAST</em><br />
© adam hyde 2006, 2007, 2008<br />
Modifications:<br />
Zita Joyce 2008<br />
</p>
<hr />
<p><em>INTERESTING EXTRAS</em><br />
© TWikiGuest 2009<br />
Modifications:<br />
adam hyde 2009<br />
Jan Gerber 2009<br />
Silvia Pfeiffer 2009<br />
</p>
<hr />
<p><em>INTRODUCTION</em><br />
© adam hyde 2006, 2007, 2009<br />
Modifications:<br />
Brylie Oxley 2009<br />
David Kühling 2009<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
Maik Merten 2009<br />
ogg k 2009<br />
susanne lang 2009<br />
Thomas Middleton 2008<br />
</p>
<hr />
<p><em>JOIN FILES</em><br />
© adam hyde 2009<br />
Modifications:<br />
David Kühling 2009<br />
Robert Valliant 2009<br />
</p>
<hr />
<p><em>INTRODUCTION</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
David Kühling 2009<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
Laurent Pointecouteau 2010<br />
ogg k 2009<br />
Robert Valliant 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>MIRO</em><br />
© Jörn Seger 2008<br />
Modifications:<br />
adam hyde 2009<br />
Holmes Wilson 2009<br />
TWikiGuest 2008<br />
Thom Hastings 2009<br />
</p>
<hr />
<p><em>HOSTING THEORA YOURSELF</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
Chris Double 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
susanne lang 2009<br />
</p>
<hr />
<p><em>RESIZING</em><br />
© Jan Gerber 2009<br />
Modifications:<br />
adam hyde 2009<br />
Robert Valliant 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>INTRODUCTION</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009, 2010<br />
Jan Gerber 2009<br />
ogg k 2009<br />
susanne lang 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>PITIVI</em><br />
© adam hyde 2006, 2009<br />
Modifications:<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
Thomas Middleton 2008<br />
</p>
<hr />
<p><em>HOW TO PLAY THEORA</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
Gergely Máté 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
ogg k 2009<br />
Robert Valliant 2009<br />
Silvia Pfeiffer 2009<br />
Stjepan Rajko 2009<br />
susanne lang 2009<br />
</p>
<hr />
<p><em>PLAYING SUBTITLES</em><br />
© adam hyde 2009<br />
Modifications:<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
susanne lang 2009<br />
</p>
<hr />
<p><em>PUBLISHING</em><br />
© adam hyde 2007, 2009<br />
Modifications:<br />
another sam 2009<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
Mark Grandi 2009<br />
susanne lang 2009<br />
Thomas Middleton 2008<br />
</p>
<hr />
<p><em>SPLIT A FILE</em><br />
© adam hyde 2009<br />
Modifications:<br />
David Kühling 2009<br />
ogg k 2009<br />
Robert Valliant 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>INTRODUCTION</em><br />
© ogg k 2009<br />
Modifications:<br />
adam hyde 2009<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
susanne lang 2009<br />
</p>
<hr />
<p><em>TSS</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
Alan Toner 2009<br />
alejo duque 2009<br />
Holmes Wilson 2009<br />
</p>
<hr />
<p><em>THEORA THEORY</em><br />
© Jörn Seger 2008, 2009<br />
Modifications:<br />
adam hyde 2008, 2009<br />
Alan Toner 2009<br />
David Kühling 2009<br />
Robert Valliant 2009<br />
</p>
<hr />
<p><em>THOGGEN</em><br />
© adam hyde 2007, 2009<br />
Modifications:<br />
David Kühling 2009<br />
Edward Cherlin 2009<br />
Jan Gerber 2009<br />
ogg k 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>VLC</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
David Kühling 2009<br />
Dennis J 2009<br />
Mark Hancock 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>VLC</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
Holmes Wilson 2009<br />
Jan Gerber 2009<br />
</p>
<hr />
<p><em>VLC</em><br />
© TWikiGuest 1970</p>
<hr />
<p><em>WHAT IS STREAMING?</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
Alan Toner 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p><em>WHAT IS THEORA?</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
jay maechtlen 2009<br />
Joshua Gay 2009<br />
Lachlan Musicman 2009<br />
susanne lang 2009<br />
</p>
<hr />
<p><em>WHAT IS VIDEO?</em><br />
© TWikiGuest 2008<br />
Modifications:<br />
adam hyde 2009<br />
Brylie Oxley 2009<br />
Edward Cherlin 2009<br />
Holmes Wilson 2009<br />
Lachlan Musicman 2009<br />
susanne lang 2009<br />
</p>
<hr />
<p><em>INTRODUCTION</em><br />
© Mark Hancock 2009<br />
Modifications:<br />
adam hyde 2009<br />
Alan Toner 2009<br />
David Kühling 2009<br />
susanne lang 2009<br />
Jörn Seger 2009<br />
</p>
<hr />
<p> </p>
<p><a href="http://www.flossmanuals.net/"><img src="static/Floss-100-en.gif" alt="100.gif" width="110" height="54" /></a><br />
<strong></strong></p>
<p><sub>Free manuals for free software</sub></p>
<p> </p>
<p> </p>
<h2><span id="ch058_credits.xhtml#General%20Public%20License"></span> General Public License</h2>
<p>Version 2, June 1991</p>
<p>Copyright (C) 1989, 1991 Free Software Foundation, Inc.<br />
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA<br />
<br />
Everyone is permitted to copy and distribute verbatim copies<br />
of this license document, but changing it is not allowed.<br />
</p>
<p><strong>Preamble</strong></p>
<p>The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too.</p>
<p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.</p>
<p>To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.</p>
<p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p>
<p>We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.</p>
<p>Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.</p>
<p>Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.</p>
<p>The precise terms and conditions for copying, distribution and modification follow.</p>
<p><strong>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</strong></p>
<p><strong>0.</strong> This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The &quot;Program&quot;, below, refers to any such program or work, and a &quot;work based on the Program&quot; means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term &quot;modification&quot;.) Each licensee is addressed as &quot;you&quot;.</p>
<p>Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.</p>
<p><strong>1.</strong> You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.</p>
<p>You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.</p>
<p><strong>2.</strong> You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:</p>
<dl>
<dt>
<p><br />
</p>
</dt>
<dd>
<p><strong>a)</strong> You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.</p>
</dd>
<dt>
<p><br />
</p>
</dt>
<dd>
<p><strong>b)</strong> You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.</p>
</dd>
<dt>
<p><br />
</p>
</dt>
<dd>
<p><strong>c)</strong> If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)</p>
</dd>
</dl>
<p>These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.</p>
<p>Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.</p>
<p>In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.</p>
<p><strong>3.</strong> You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:</p>
<dl>
<dt>
<p><br />
</p>
</dt>
<dd>
<p><strong>a)</strong> Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</p>
</dd>
<dt>
<p><br />
</p>
</dt>
<dd>
<p><strong>b)</strong> Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</p>
</dd>
<dt>
<p><br />
</p>
</dt>
<dd>
<p><strong>c)</strong> Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)</p>
</dd>
</dl>
<p>The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.</p>
<p>If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.</p>
<p><strong>4.</strong> You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.</p>
<p><strong>5.</strong> You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.</p>
<p><strong>6.</strong> Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.</p>
<p><strong>7.</strong> If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.</p>
<p>If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.</p>
<p>It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.</p>
<p>This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.</p>
<p><strong>8.</strong> If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.</p>
<p><strong>9.</strong> The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p>
<p>Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and &quot;any later version&quot;, you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.</p>
<p><strong>10.</strong> If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.</p>
<p><strong>NO WARRANTY</strong></p>
<p><strong>11.</strong> BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM &quot;AS IS&quot; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>
<p><strong>12.</strong> IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>
<p><strong>END OF TERMS AND CONDITIONS</strong></p>
</body>
</html>
