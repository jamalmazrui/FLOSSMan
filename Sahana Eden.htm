<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <meta name="author" content="The Contributors" />
  <title>Sahana Eden</title>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<header>
<h1 class="title">Sahana Eden</h1>
<p class="author">The Contributors</p>
<p class="date">2014.06.09-00.18</p>
</header>
<p><span id="ch001_about-this-book-target-audience-etc.xhtml"></span></p>
<h1>About This Book</h1>
<p>Everyone can be affected by disasters whether personally or indirectly. Disaster Management professionals are kept busy responding to events of all scales, yet find time to explore the use of more sophisticated toolsets. The Sahana Project was conceived by people on the front lines of the 2004 Sri Lanka tsunami in order to coordinate the rescue efforts. The word &quot;sahana&quot; means &quot;relief&quot; in Sinhala. This has evolved to provide solutions to both prepare for and respond to disasters no matter where they happen.</p>
<p>Sahana Eden is an open source software platform which provides a range of solutions for Disaster Management practioners to help them reduce the impact disasters have on our communities through tracking the needs of the affected populations &amp; coordinating the responding agencies &amp; their resources.</p>
<p>The latest version of this book is available to either read online or order a printed copy from <a href="http://eden.sahanafoundation.org/wiki/Book">http://bit.ly/sahanaedenbook</a><br />
</p>
<h2>Who is this book for ?</h2>
<p><span>This book has been imagined to meet the needs of three kinds of persons: 1) Decision Makers looking for an appropriate solution for disaster management; 2) Deployers who are ready to deploy Sahana Eden; and 3) Developers who are extending Sahana Eden for more specialized solutions or want to contribute to the project.</span> <br />
</p>
<h3>Decision Makers</h3>
<p>Preparing and planning for crisis and disaster scenarios is an important part of every community. Whether it is at a global, national, regional or local level, leaders who understand the complexities of disaster response make better decisions and can quickly respond to changing situations. Decision Makers should read the &quot;Introduction&quot; section. This content covers the Sahana Eden platform overview, capabilities and selected case studies. This material will help decision makers in strategic planning and give them important insight into the deployment process.</p>
<h3>Deployers</h3>
<p>Those who are thinking about or who are ready to deploy Sahana Eden should read the &quot;Introduction&quot;, &quot;Getting Started&quot; and &quot;Administration&quot; sections.</p>
<p>In order to deploy Sahana Eden, a deployer should be comfortable with the following system administration processes:</p>
<ul>
<li>Installation of an operating system (such as Debian Linux)</li>
<li>Command line usage (for package installation)</li>
<li>System configuration involving editing of text files </li>
</ul>
<h3>Developers</h3>
<p>Developers should read the entire book as they should have an overview of how the software can be used and will need to maintain their local deployment.</p>
<p>Basic customization doesn't require any more skills than those required for a Deployer, however, more advanced development will require being familiar with or learning the following skills:</p>
<ul>
<li>Python</li>
<li>JavaScript</li>
<li>Cascading Style Sheets (CSS)</li>
</ul>
<p><span id="ch002_why-sahana-eden.xhtml"></span></p>
<h1>Why Should You Use Sahana Eden?</h1>
<p>Sahana Eden is an open source software platform which has been built specifically for Disaster Management. It is highly configurable so that it can be used in a wide variety of different contexts and is easy to modify to build custom solutions. Different levels of support are available from both the voluntary Sahana Eden community and professional companies.</p>
<p><img src="static/600px-Training_of_Teachers_of_Pune_University_on_Disaster_Management.JPG" /></p>
<p><em>Training of Teachers of Pune University on Disaster Management</em></p>
<h2>Built for Disaster Management</h2>
<p>Sahana Software was initially developed by members of the information technology (IT) community in Sri Lanka to provide solutions for the relief effort following the 2004 Indian Ocean Tsunami. Sahana Eden is the latest evolution of this software and provides a solution to manage organizations, people, projects, inventory and assets as well as collecting information through assessments and providing situational awareness through maps.</p>
<p>Sahana Eden can be accessed from the web or locally from a flash drive, allowing it to be used in environments with poor internet. Local &amp; Web versions can be configured to synchronize to allow data to be shared between them.</p>
<p>These features are designed to help Disaster Management practitioners to better mitigate, prepare for, respond to and recover from disasters more effectively and efficiently. Sahana Eden can provide valuable solutions for practitioners in Emergency Management, Humanitarian Relief and Social Development domains.</p>
<h2>Community and Professional Support</h2>
<p>Sahana Eden is a project of the Sahana Software Foundation, whose mission is:</p>
<p><em>To help alleviate human suffering by giving emergency managers, disaster response professionals and communities access to the information that they need to better prepare for and respond to disasters through the development and promotion of free and open source software and open standards.</em></p>
<p>The project is supported by a voluntary community of Disaster Management practitioners, students, academics and companies. This community is able to provide a basic level of support to help you deploy and configure Sahana Eden. There are also companies, such as AidIQ, who provide professional services to customize and support Sahana Eden.</p>
<h2>Highly Configurable and Easy To Modify</h2>
<p>Sahana Eden is designed to be rapidly configured and customized to support the diverse business processes used within Disaster Management. Sahana Eden's modular design allows different pieces of functionality to be enabled and disabled as required providing flexible solutions for changing contexts.</p>
<p>The application can be configured to secure sensitive information, while also making data which needs to be shared available in a variety of different formats including Microsoft Excel and PDF. To ensure that Sahana Eden is accessible to every country, it can be translated into multiple languages.</p>
<p>Finally, Sahana Eden is licensed under the Open Source MIT License (<a href="http://www.opensource.org/licenses/mit-license.php" class="uri">http://www.opensource.org/licenses/mit-license.php</a>), making it free to download, customize and modify without any restriction or reliance on any single vendor. The MIT License also places no restriction on the commercial or closed deployments of the software, giving the greatest flexibility for the use of Sahana Eden in sensitive environments.</p>
<p><span id="ch003_what-is-sahana-eden.xhtml"></span></p>
<h1>What Does Sahana Eden Do?</h1>
<p>Sahana Eden contains a number of different modules which can be configured to provide a wide range of functionality. This chapter gives a brief summary of the core modules and outlines how Sahana Eden can meet some of your needs.</p>
<h2>Organization Registry</h2>
<p>Many diverse organizations are involved in Disaster Management, from responding to disasters to strengthening communities to providing support to people in need. Sahana Eden’s Organization Registry can track what organizations are active in different contexts, providing opportunities for collaboration and coordination. After the 2010 earthquake in Haiti, Sahana Eden managed a list of 696 organizations who were all providing assistance to the affected population. This included Government Departments, Non-Governmental Organizations (NGOs), United Nations (UN) Agencies and Corporations.</p>
<p>The Organization Registry also allows organizations to record their Offices, Warehouse and Field Sites including their locations so they can be mapped as well as links to other modules such as Human Resources, Assets and Inventory.</p>
<p><img src="static/Sahana%20Eden%20-%20org-organisation.png" width="575" height="350" /></p>
<h2>Project Tracking</h2>
<p>By telling you <em>Who’s Doing What, Where, and When,</em> Sahana Eden provides a valuable tool to help organizations responding to disasters know where the greatest needs are and coordinate with others who are engaged in similar work. </p>
<p>The Disaster Risk Reduction (DRR) DRR Project Portal <a href="http://www.drrprojects.net">(www.drrprojects.net)</a> uses Sahana Eden to provide a coalition of organizations a platform to share information on what projects they are engaged in within the Asia Pacific region. There is information on at least 1250 projects which is publicly available to communities, stakeholders and decision makers to facilitate cooperation and planning and to identify gaps and overlaps.</p>
<p><img src="static/DRRPP%203W%20Report.png" width="574" height="278" /><br />
</p>
<h2>Human Resources</h2>
<p>The most important part of Disaster Management is the people. Whether they are community volunteers or staff working for different organizations, the Human Resources module can help manage the people involved. It will track where they are, what skills they have and help ensure that everyone is effectively engaged with the work that needs to be done.</p>
<p>Sahana Eden can also be used to provide a contact list to ensure that the right people can be contacted at the right time. </p>
<p>The Associação Portuguesa dos Bombeiros Voluntários (APBV) - the Portuguese National Volunteer Fighting Association - use Sahana Eden to help manage their various teams including tracking their experience, training and evaluations as a solution for managing credentialing of their volunteers.</p>
<p><img src="static/Sahana%20Eden%20-%20hrm-index%20search%20on%20Amy%20(crop).png" width="440" height="296" /><br />
</p>
<h2>Inventory</h2>
<p>Whether organizations are supplying basic essentials of life to people affected by natural disasters or giving communities the tools they need to restore their livelihoods, Sahana Eden can be used to manage inventories of items and match requests for items with warehouses and other facilities which have them available. Operationally, Sahana Eden can be used to record and automate transactions for sending and receiving shipments. Sahana Eden can support multiple Catalogs of Items as well as providing alternative items to ensure more effective use of supplies. Sahana Eden can be configured to load multiple catalogs including a generic list of items and/or the IFRC Emergency Item Catalog. </p>
<p>The HELIOS Foundation is utilizing Sahana Eden to allow different Humanitarian NGOs to share inventory information to improve operational efficiency by facilitating the utilization of surplus items and coordinating procurement of new items.</p>
<p><img src="static/Sahana%20Eden%20irg-office%20Inventory%20tab.png" width="575" height="363" /></p>
<h2>Assets</h2>
<p>A wide range of assets are needed to respond to disasters, including vehicles to transport people and relief items, radio equipment to provide communication where telecommunication infrastructure has been destroyed, and generators to provide backup power. Sahana Eden is able to manage assets, track where they are, who they have been assigned to, and what condition they are in. This ensures that assets are used effectively and efficiently.</p>
<p>The Resource Management System is a Sahana Eden instance deployed by the International Federation of Red Cross and Red Crescent Societies (IFRC) to provide visibility on the assets of national Red Cross and Red Crescent Societies. This prepares the Red Cross movement to respond more effectively to disasters with the assets they need. </p>
<p><img src="static/Screen%20Shot%20Asset.png" width="575" height="386" /><br />
</p>
<h2>Assessments</h2>
<p>Sahana Eden can be used to collect and analyze information from assessments to help organizations more effectively plan their disaster management activities. Different assessment templates can easily be designed and imported into Sahana Eden to support assessments for different organizations in different contexts. Data can either be entered into an interactive web form or imported via an Excel template. </p>
<p>In order to help decision makers effectively use the information collected in assessments, Sahana Eden provides a range of analysis including custom reports, graphs and maps.</p>
<p><img src="static/Screen%20Shot%20ADAT%20Graph.png" width="558" height="416" /></p>
<h2>Scenarios &amp; Events</h2>
<p>To help organizations better plan for disasters, Sahana Eden can be used to plan for different scenarios, including recording what human resources, assets, facilities and tasks will be needed to effectively respond.</p>
<p>When an incident occurs events can be created from a scenario template to allocate the resources and alert people of the need to respond.</p>
<h2>Map</h2>
<p><em>“Some people need to see a map before they can even start having a conversation about the data.”-</em> Sahana Eden User</p>
<p>Sahana Eden has fully integrated mapping functionality which allows any location-based data to be visualized on a map. This information can also be searched using a map-based boundary selection. Maps provide situational awareness which is essential when either planning to prepare for or respond to a disaster. Sahana Eden supports many standard formats for overlaying data on maps from other sources and Geographical Information Systems (GIS), for example natural hazard risks, population or weather.</p>
<p><img src="static/Sahana%20Eden%20-%20gis-index%20all%20overlays.png" width="576" height="385" /><br />
</p>
<h2>Shelter Management</h2>
<p>When disasters are widespread and result in population displacement, understanding and tracking the landscape of shelters - and the people in them - is a critical activity. The Shelter Registry provides functionality to list and track information on shelters and on the people arriving and departing. Shelter details include location, services provided, responsible organization and contacts, demographics, and needs. In addition, individual person data includes name, age, relatives, status, health, and many other details to provide a clear understanding of population demographics within the site.</p>
<h2>Messaging</h2>
<p>In the complex domain of Disaster Management, communication is critical. Sahana Eden provides support for messages to be sent by Email, SMS, Twitter and Google Talk. Distribution Groups can be set up to allow messages to be easily sent to many people at once. Users are able to search for specific information and subscribe to receive update messages when new information is added. </p>
<p>Interactive messages can also be set up to allow people to send short message queries to Sahana Eden and receive automatic responses.</p>
<p><span id="ch004_user-stories.xhtml"></span></p>
<h1>Who Uses Sahana Eden?</h1>
<p>Sahana Eden is used by many diverse organizations throughout the world to assist  the response to traumatic events such as natural disasters. From hosted deployments by Foundation Team members to on-site deployments within organizations, Sahana Eden's versatility is demonstrated in some of the following case studies and use cases for the software. While some first responders are coming to assist after an earthquake, others are attempting to reduce risk by gathering information and helping to network and raise awareness prior to a disaster. Coordination of resources, understanding the inventory of available resources, raising awareness, and providing early warning all reduce risk and empower responses that can literally save lives. Here are some stories about deployers and responders using Sahana Eden.</p>
<h2>APBV - Portuguese Volunteer Firefighters</h2>
<p>With little to no budget, the president of the Associação Portuguesa dos Bombeiros Voluntários (APBV), was seeking better solutions to manage their limited resources.  In the past they had tried proprietary software based solutions which were not maintainable and did not address their needs.  These solutions were costly and did not offer a sustainable method for data management or migration.</p>
<p>After seeing a demonstration of Sahana Eden at the Information Systems for Crisis Response and Management (ISCRAM) conference in Lisbon, APBV deployed the Human Resources module to help manage personnel and are planning to deploy the vehicle management system and connecting their GPS-enabled Tetra radios to Sahana Eden's mapping capabilities. They hope that this will become the national standard for disaster planning and crisis management for all of Portugal.</p>
<h2>Disaster Risk Reduction Project Portal</h2>
<p><a href="http://www.drrprojects.net">www.drrprojects.net</a></p>
<p>The Disaster Risk Reduction (DRR) Project Portal collects information on all multi-country and national level DRR projects and initiatives in the Asia Pacific region implemented since 2005. By facilitating information sharing across the region, the Portal aims to advance the<a href="http://www.preventionweb.net/files/1217_HFAbrochureEnglish.pdf">Hyogo Framework for Action (HFA)</a> goals in building the resilience of nations and communities to disasters. This includes making disaster risk reduction a high priority on local and national levels. There are many priorities for action, such as knowing the risks, enhancing early warning systems to reduce vulnerabilities, and building a culture of safety and resilience for all people by strengthening networks and working with the media.<br />
</p>
<p>This Sahana Eden-powered portal was deployed at the Asian Disaster Preparedness Center.</p>
<p>The Project Portal:</p>
<ul>
<li>Helps effective planning, programming, cooperation, and collaboration of DRR projects and programs in the region by facilitating project analysis to identify gaps and overlaps.</li>
<li>Is essential for governments, organizations and donors involved in implementing and supporting DRR projects and program in the region.</li>
<li>Is a useful resource for academics, students and the media for obtaining an overview of DRR projects being implemented in the region. </li>
</ul>
<h2>Haiti 2010 Earthquake Response</h2>
<p>We all recall the awful event in early 2010 when an earthquake hit the town of Léogâne, near Port of Prince, Haiti. The loss of life, building, and damage estimates were shocking but trained response organizations went into action immediately.</p>
<p>Anticipating the need for overall organization coordination, the Sahana Software Foundation deployed a public emergency response portal site using the Sahana Eden software. The site was hosted at<a href="http://haiti.sahanafoundation.org/">http://haiti.sahanafoundation.org</a> and the community managed access for registered users - those from charitable organizations, government agencies and educational institutions were given create/edit permissions to the site; while most of the data remained publicly available (read access) excluding sensitive information (such as personal contact information for agency staff). The site went live the day of the disaster.</p>
<p>In the first 48 hours after the earthquake, responders wanted to know was who else was responding, what organizations already had staff in Haiti that could assist, where were they located, and what assets and resources they had available to them. To meet this need, Sahana's Organization Registry (OR) tracked organizations and offices working on the ground in Haiti. The Organization Registry provided a searchable database of organizations responding to the disaster, the sector where they are providing services, their office locations, activities and their contact details. The Sahana database became one of the primary repositories of organization, office and contact information for the relief operation during the first couple of weeks of the response. Organizations were encouraged to self-register and report their office locations or to simply send the Sahana team an e-mail indicating their office locations. Volunteers entered data from pre-disaster lists of organizations working in Haiti available from United Nations Office for the Coordination of Humanitarian Affairs (UN OCHA), as well as active contact lists used by United Nations Disaster Assessment Coordination (UNDAC), InterAction and other sources with official and accurate points of contact.</p>
<p>During the second week of the relief operation, requests came from all directions seeking to identify the location and operating status of hospitals and medical facilities within Haiti. Sahana Eden's Hospital Registry organized a volunteer effort to geo-locate approximately 100 hospitals with names and known coordinates over a 24-hour period. The results of this effort added over 160 hospitals to the Sahana Hospital Registry that had been set up to manage medical and health facility capacity and needs assessment. Because avoiding overcrowding and ensuring medical personnel and equipment availability is crucial to its success, this registry was designed to be compliant with the OASIS EDXL-HAVE interoperability standard that provides a schema for tracking hospital capacity and bed availability data during emergencies. A KML feed built from Sahana’s hospital location data provided a visual<span class="st"> customizable display of geographic data in Google Earth. This feed</span> remained the most accurate and complete source of operating hospital facilities throughout the first two months of the relief operation and was accessed by thousands of users world-wide.</p>
<p>The technology community's response to the Haitian earthquake was an unprecedented collaborative and cooperative effort on the part of different organizations to come together and to help each other and to not replicate efforts. The Sahana Software Foundation team worked from outside Haiti to deploy and manage the infrastructure being used by local and international responders and contributors.</p>
<h2>International Federation of Red Cross and Red Crescent Societies</h2>
<p>The International Federation of Red Cross and Red Crescent Societies (IFRC) developed a Resource Management System using Sahana Eden. This allows their National Societies to share information on their Inventory, Assets, Staff and Volunteers. Neighboring National Societies and the IFRC can quickly see what is available in the event of a major disaster. This information is blended with data from other Geographic Information Systems (GIS), such as Population Density, Rainfall and Topography to allow for a more informed planning of the response.</p>
<p>The solution allowed agencies to share a common server, yet retain full control over their data and who can have access to it (i.e. a multi-tenancy system). The open source nature of the software was important because it meant there was no vendor lock-in and the software was easy to maintain. For this deployment the Sahana team deployed using Amazon Web Services in the regional data center to guarantee low latency.</p>
<h2>HELIOS Supply Chain and Inventory Sharing</h2>
<p>The HELIOS foundation (helios-foundation.org) in the United Kingdom wanted to create a portal to allow Humanitarian Non-Governmental Organizations (NGOs) working in the field to be able to track and share information on their inventory of relief items. The system is planned to allow them to use up surplus items, avoid items expiring and avoid duplicate procurement. Data can be automatically uploaded from HELIOS instances or via manual data entry or uploading of spreadsheets.</p>
<p>Sahana Eden was chosen to allow various methods of data entry as well as to scale for use by other NGOs. Future iterations will include sharing of information on planned procurements to allow bulk discounts shared freight movement and import costs.</p>
<p>This work was done for the Consortium of British Humanitarian Agencies and funded by the Department for International Development (DfID), part of the UK government.</p>
<p><span id="ch005_technical-overview.xhtml"></span></p>
<h1>Technical Overview</h1>
<p>Because Sahana Eden needs to be accessible to users at remote locations, including the public, a browser-based solution was essential. The system also needs to be able to be used on offline laptops, so it needs to run on a lightweight stack.</p>
<p>Python was selected as a suitable high level language allowing the rapid customization of code required for each individual circumstance yet has a large number of powerful libraries available including for Geospatial Information Systems (GIS).</p>
<p>Sahana Eden includes tools for synchronization between multiple instances, allowing for responders or district offices to capture data on victims in the field and exchange the data with other offices, headquarters or responders in the field.</p>
<h2>Sahana Eden Framework</h2>
<p>The Sahana Eden Software Platform has been built around a Rapid Application Development (RAD) Framework. This provides a high level of automation to ensure that new solutions can be quickly and effectively developed. Once a database table is defined, the Sahana Eden Framework automatically generates HTML pages to handle CRUD (Create, Read, Update, Delete) as well as Search, Map and Pivot Reports. Web Services are available to import and export in XML, CSV, JSON and EXtensible Stylesheet Language (XSL) transforms are supported to produce other data standards.</p>
<p>The Sahana Eden Framework has flexible authorization policies which can be configured to grant permissions for different modules, tables as well as the ability to have multiple Organizations control their own data on a single Sahana Eden installation.</p>
<p>Sahana Eden can be downloaded and run locally from a flash drive. Synchronization functionality allows data to be entered then keep up to date between different installations, including online servers and local flash drive installations. The Sahana Eden Framework also includes a scheduler for running tasks at a specific time, in regular intervals or as asynchronous tasks which are triggered by users.</p>
<h2>Sahana Eden Architecture</h2>
<p>The basic Sahana Eden architecture is as follows:</p>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td><strong>Web Server</strong></td>
<td>Apache</td>
<td>Other web servers can also be used, such as Cherokee.</td>
</tr>
<tr class="even">
<td><strong>Application</strong></td>
<td>Sahana Eden</td>
<td></td>
</tr>
<tr class="odd">
<td><strong>Web Application Framework</strong></td>
<td>Web2Py</td>
<td></td>
</tr>
<tr class="even">
<td><strong>Programming Language</strong></td>
<td>Python &amp; Java Script</td>
<td></td>
</tr>
<tr class="odd">
<td><strong>Database</strong></td>
<td>MySQL, PostgreSQL, or SQLite</td>
<td><p>MySQL, PostgreSQL, and SQLite are supported.</p>
<p>Other databases should be usable without major additional work since Web2Py supplies many connectors.</p></td>
</tr>
<tr class="even">
<td><strong>Operating System</strong></td>
<td>Linux (Debian recommended)</td>
<td>Windows and Mac OS X are possible, but only recommended for single-user environments.</td>
</tr>
</tbody>
</table>
<p><span id="ch006_project-planning.xhtml"></span></p>
<h1>Planning a Deployment</h1>
<p>A successful deployment of Sahana Eden must consider the people and business processes involved as well as the technology. This chapter will provide guidance on how to engage with the necessary people and analyze the business processes to ensure that you deploy a successful solution.  This planning will help to guide you through the Configuration and Customization that your deployment will require and may also help you to develop the requirements for new modules you may need to develop.</p>
<h2>Who Are Your Users?</h2>
<ul>
</ul>
<p>Your deployment of Sahana Eden should be beneficial to its users. To ensure that you achieve this you may need to spend some time consulting your users to find out what their needs are and how Sahana Eden can help them. Identifying key stakeholders and &quot;champions&quot; who will promote the use of Sahana Eden to others can greatly support your deployment.</p>
<p>To effectively deploy Sahana Eden you need to know who the users will be. Some important questions to ask about your deployment are:</p>
<ul>
<li>Is it going to be accessible to the public? Is ALL of the data accessible?</li>
<li>How many users will be accessing the system at once?</li>
<li>Will it be used only internally within a single organization or across multiple organisations?</li>
<li>Will there be different types of users? What different data will they be able to access and modify?</li>
<li>Will new users need to be approved? By who? </li>
<li>What languages will your users need to access Sahana Eden in? </li>
<li>Will users need training to effectively use Sahana Eden?</li>
<li>What support will your users need? How will this support be provided?</li>
</ul>
<p>Sahana Eden can be easily configured to support a wide range of different answers to these questions.</p>
<h2>What Solution Is Appropriate?</h2>
<p><span class="Apple-style-span">It is important to consider how Sahana Eden aligns with existing </span>business processes<span class="Apple-style-span"> and what new workflows will need to be performed by your users. If you are introducing new </span>business processes<span class="Apple-style-span"> in Sahana Eden, this may require more explanation and training for your users. Sahana Eden can be configured to provide a wide range of solutions from simple tools to complex systems. It is important to ensure that the solution that you deploy is appropriate for your context.</span> </p>
<p><span class="Apple-style-span">As outlined in the chapter 'What is Sahana Eden', there are a number of different modules available which can be enabled and disabled to provide different types of solutions. The </span>business <span class="Apple-style-span">processes that Sahana Eden is used for will determine which modules are needed. Enabling more modules will increase the complexity and workload of the deployment. Therefore for a successful deployment, it may be recommended to start by supporting a limited number of </span>business processes and ensure they are being used effectively before enabling additional modules. </p>
<ul>
</ul>
<h2>What's In A Name?</h2>
<p>Although you are deploying a solution using Sahana Eden, you are free to give it a name that is appropriate for your context. We do like it if you can leave the &quot;Powered By Sahana Eden&quot; badge within your solution's pages!</p>
<h2>Configuration vs. Customization</h2>
<p>Sahana Eden offers a great deal of flexibility through configuration, however, if you require specific functionality or features which are not already supported you will need to customize the Python code which Sahana Eden is written in. Fortunately Sahana Eden's Framework has been designed to make it easy for you to relabel fields, add new fields, hide existing fields and make fields required. More advanced customization may also be required to add new database tables or even build new Sahana Eden modules.</p>
<p>When Customizing the code, it is recommended to set up a testing and release process to manage this development, especially if you have already deployed a live instance.</p>
<h2>Where Will It Be Installed?</h2>
<p>Sahana Eden can be installed on a variety of different infrastructures depending on the needs and resources you have for your deployment. </p>
<h3>Local Box/Server</h3>
<p>To support multi-user access, it is usual to install Sahana Eden on a server accessible through a Network. This could be using physical hardware in your office, either a server or a computer that can be set up as one. Although specialized server hardware is more expensive it will provide better and more reliable performance.</p>
<h3>Hosted Server</h3>
<p>One of the more cost effective solutions for installing Sahana Eden is to use a Hosted Service. This allows you to make monthly payments for the use of of a Server without having to provide the infrastructure to support a server (location, power back up, air conditioning) and without having to worry about redundancy and maintenance.</p>
<p>Sahana Eden has been effectively installed on Amazon's Cloud service, EC2 (http://aws.amazon.com/ec2/). </p>
<h3>Flash Drive </h3>
<p>Sahana Eden can easily be downloaded and run locally from a flash drive on a Windows computer. it can be configured to be accessed on a local network but for more than 4 users the performance will not be optimal. For instruction on installing a Flash Drive instance, please see <a href="http://eden.sahanafoundation.org/wiki/InstallationGuidelines/FlashDrive" class="uri" title="Flash Drive install">http://eden.sahanafoundation.org/wiki/InstallationGuidelines/FlashDrive</a> </p>
<h2>Going Live!</h2>
<p>Once you have installed Sahana Eden there are a number of steps that may be required to make the deployment successful. You may need to train users or, if the deployment is public, promote it to encourage new users. You should also consider operational requirements like user support and backups.</p>
<p><span id="ch008_installation.xhtml"></span></p>
<h1>Installation</h1>
<p>Sahana Eden can be installed on any environment which can run Python, including Linux, Windows and OSX. The system supports a number of different databases and has been widely tested on MySQL, PostgreSQL and SQLite. A webserver is optional, but for production installations we have experience of both Apache/mod_wsgi and Cherokee/uwsgi.</p>
<p>For production installations, we would recommend Debian Linux v7 &quot;Wheezy&quot; as this is the environment for which the most support is available. If you don't have a ready server for this, then we'd recommend installing on Amazon's EC2 cloud as this can provide scalable performance with a low setup cost.</p>
<p>Installation scripts and detailed instructions are available on the Wiki:</p>
<p><a href="http://eden.sahanafoundation.org/wiki/InstallationGuidelines" class="uri" title="http://eden.sahanafoundation.org/wiki/InstallationGuidelines">http://eden.sahanafoundation.org/wiki/InstallationGuidelines</a></p>
<p>Note that the first user to register gets administrator privileges for the system.</p>
<p>If you need to customize the code, it is recommended to set up a release process. Ideally, this would include a separate development instance and a User Acceptance Testing (UAT) instance, which can be run on the same server.</p>
<h2>Directory Structure</h2>
<p>After the installation, the typical directory structure of the instance looks like: </p>
<p> <img src="static/File%20System%20Layout.png" /></p>
<h3>Troubleshooting Installation</h3>
<p>Initial installation issues are generally due to missed installation steps or a non-standard site configuration. Typical issues are:</p>
<h3>Obsolete release packages:</h3>
<p>The latest functionality will not be available in packaged releases which are available for download. Currently we advise users to install the latest development version from source instead.</p>
<h3>Folder names:</h3>
<p>Web2Py does not support hyphens in the application folder name. If you specify a target folder name when cloning, be sure to specify a target folder name without a hyphen in.<br />
</p>
<h3>Linux permissions:</h3>
<p>Web2py needs to be able to write in several Sahana Eden directories: cache, databases, errors, sessions, and uploads. The installation instructions and scripts should set the correct permissions. If you encounter permission errors, refer to the installation instructions and run the commands that set permissions and ownership of the Eden directories. </p>
<h3>Apache configuration:</h3>
<p>Apache with mod_wsgi does not support underscores in hostnames. (Underscores are not a legal hostname character according to the formal W3 URI specification.)</p>
<p>If there are multiple mod_wsgi sites enabled, each must have its own WSGIDaemonProcess name.</p>
<p>It is possible to run multiple Web2py applications under the same hostname and the same mod_wsgi site. However, be careful when setting up routes.py or Apache rewrite rules, as these will be shared by the applications.<br />
</p>
<p><span id="ch009_configuration.xhtml"></span></p>
<h1>Configuration</h1>
<p>Sahana Eden is a highly configurable system that can be adapted to many different needs and situations. If you've taken the time planning your project and have answered the questions posed in the &quot;Planning a Deployment&quot; section, you are now simply looking for where to enter the answers.</p>
<h2>Configuration through the web interface<br />
</h2>
<p>At the moment only some settings, like SMS, email inbox and Twitter, are editable through the Web UI. Future plans are to add more configuration settings through the Web UI but for now most configuration options require editing text files.</p>
<h2>Configuration through text files</h2>
<p>Many configuration options can be changed by editing models/000_config.py. This consists of sections of Python code where settings for a particular component of the system can be changed. Most of the changes take effect immediately after saving the file. For a production environment then the system would need to be recompiled.</p>
<p>models/000_config.py has to be edited before using Sahana Eden. Once you have edited models/000_config.py, change the FINISHED_EDITING_CONFIG_FILE variable  to True.</p>
<p>There are comments placed next to the options which are generally self-explanatory in nature. Users <strong>must not</strong> change the variables (or their names), they just need to change their values to configure the instance.</p>
<p>The following sections of models/000_config.py are explained in more detail:<br />
</p>
<h3>Database Settings</h3>
<p>It is recommend that production systems use PostgreSQL or MySQL rather than the default SQLite. For these databases it is more secure to provide the application with a database account with minimal privileges.</p>
<p>This section of the models/000_config.py file can be used to configure settings like:</p>
<ul>
<li>Database Host: The server where your database is hosted</li>
<li>Database Name: The name of the database being used</li>
<li>Username: The username that has been assigned to the user for use with Eden</li>
<li>Password: Password assigned to the user</li>
<li>Port: Port at which the database service is available. Set to None to use the default setting</li>
</ul>
<h3><strong>Authentication Settings</strong></h3>
<p>Administrators can use these settings to implement security policies and to make sure that there is no unauthorized access or data manipulation in the system. These settings are related to creating the first user account of the system and determining how users register and access the system.</p>
<h3><strong>Base Settings</strong></h3>
<p>Users can configure the system name, the public URL of the system and data pre-population in this section of models/000_config.py.</p>
<p>One of the most important system settings would be the selection of the template as this can completely alter how Sahana operates as well as it's look &amp; feel. A list of available templates is in the folder private/templates. Any template setting can be over-ridden within 000_config.py for further fine-tuning as-required.</p>
<p>One of these settings is database pre-population. Users can determine if the database will be pre-populated with sample data or not.</p>
<p>Changing the database migration setting to False in production will lead to a performance gain. Migration tries to alter the SQL database schema to match that expected in the code. This works very well for simple cases, but may result in loss of existing data for complex cases, so should be applied with care to Production servers.<br />
</p>
<p>Web2Py supports automatic migration, but having this enabled all the time does lead to reduced performance, so enable migration only when necessary.</p>
<h3>Mail Settings</h3>
<p>Sahana Eden can be configured to use a email service for messaging. This section can help you to set up things like the outbound email server and sender address. Note: Until the Sender address is specified, the system will be unable to send emails!</p>
<h3><strong>Front Page Settings</strong></h3>
<p>Sahana Eden has a dynamic front page with a capability to display RSS or Twitter feeds. You can change certain aspects of the landing page of the application in the frontpage settings section of the code.</p>
<p>Settings in this section can be used to change which RSS and Twitter feeds are subscribed to and displayed on the front page of the application.</p>
<h3>Module-specific Settings</h3>
<p>Some settings for the Request Management, Inventory Management and Human Resource Management modules can be accessed here. These settings would generally be very specific to the needs of a certain deployment.</p>
<h3><strong>Enabling/Disabling Modules</strong></h3>
<h3></h3>
<p>Sahana Eden supports a range of modules that can be enabled or disabled to support different deployments. The default template (private/templates/default/) has all the main modules enabled as standard (you may notice that some other modules are disabled as standard; these tend to be under development or experimental).</p>
<p>Disabling a module has the effect of removing it from the main menu of the application. All modules can be disabled except core modules: Home (default), Administration (admin), Map (gis), Person Registry (pr) and Organization Registry (org).</p>
<p>There are three ways to disable modules. The most direct way to do this is to comment out the revelevant lines of code in the configuration file of the default template: private/templates/default/config.py. To turn a line into a comment, simply make sure it begins with a # symbol.</p>
<p>For instance, consider the Shelter Registry (named &quot;cr&quot;). The following code section in private/templates/default/config.py applies to the Shelter Registry:</p>
<pre><code>(&quot;cr&quot;,
Storage(
    name_nice = T(&quot;Shelters&quot;),
    #description = &quot;Tracks the location, capacity and breakdown of victims in Shelters&quot;,
    restricted = False,
    module_type = 10,
    )),</code></pre>
<p>To disable this module, just make sure that each line in this section starts with a hash (#) symbol:</p>
<pre><code>#(&quot;cr&quot;,
#Storage(
#    name_nice = T(&quot;Shelters&quot;),
#    #description = &quot;Tracks the location, capacity and breakdown of victims in Shelters&quot;,
#    restricted = False,
#    module_type = 10,
#    )),</code></pre>
<p>The module is now disabled and will no longer show up in the application menu.</p>
<p>The drawback of this approach, however, is that the default template will be updated whenever you update your code, and any changes you have made risk being lost. For a long-term solution, it is recommended that you create a new template for your implementation.</p>
<p>Most implementations of Sahana Eden involve the creation of a template folder specific for that project. This will be placed within private/templates, as an alternative to the default. The settings.base.template = “default” line within models/000_config.py will then be changed to reflect the name of the new template folder. Eden will initially look within this folder for a config.py file, and if one is present, it will use the module list defined there rather than the one within the default template. To disable unwanted functionality, create a custom version of config.py within your template folder, with unwanted modules commented out as described above.</p>
<p>There is a third option for disabling modules that can be useful in some cases. When testing, for example, or when demonstrating a sub-set of functionality, for example, it may be useful to disable modules without altering the templates. For this, models/000_config.py can be used, and a section of that file is provided for adding in overrides to the template. Add to this section a new line of code for each unwanted module:</p>
<pre><code>settings.modules.pop(&quot;unwanted-module-name&quot;, None)</code></pre>
<p>This will remove the module from the list that was created by the template. For example:</p>
<pre><code>settings.modules.pop(&quot;cr&quot;, None)</code></pre>
<p>While the above line is present, the Shelter Registry will be disabled, just like in the previous example. Because updates to the code do not touch models/000_config.py, this change will also be safe from unwanted modification.</p>
<p>For more information on templates, see the <a href="http://en.flossmanuals.net/sahana-eden/customisation/">Customisation</a> section of this book.</p>
<h3>Updates to 000_config.py</h3>
<p>So that your configuration settings are not changed when you update the code for your implementation, your local copy of models/000_config.py is not updated with the rest of the code. Very occasionally, however, updates to 000_config.py are necessary. If you do experience problems following an update, it is worth checking your copy of 000_config.py in the models folder with the current version. The current version can be found on your system in private/templates/000_config.py.</p>
<p>Further information on configuring Sahana Eden can also be found at <a href="http://eden.sahanafoundation.org/wiki/ConfigurationGuidelines" class="uri" title="Wiki page on configuring Sahana Eden">http://eden.sahanafoundation.org/wiki/ConfigurationGuidelines</a></p>
<p><span id="ch010_importing-data.xhtml"></span></p>
<h1>Importing Data</h1>
<p>Adding data is a common activity and Sahana Eden offers a variety of ways to do both batch imports and manual data entry. This section covers importing data from CSV files and some basic troubleshooting.</p>
<h2>Import from Spreadsheets</h2>
<p>If you have existing data available in a spreadsheet format it can be imported into Sahana Eden to populate the database.</p>
<p>Resources which support spreadsheet import, have an &quot;Import&quot; menu item in the module menu:</p>
<p><img src="static/import_menu_items.png" /> <br />
</p>
<h3>Step-by-step</h3>
<h4>1. Download a CSV Template</h4>
<p>Go to the module (e.g. Inventory management), and find the <em>Import</em> menu item for the resource you want to import data to (e.g. Warehouses):<br />
</p>
<p>By clicking <em>Import</em> you get to the upload page which contains a form to upload a new CSV file, and a list of prior imports (this list may be empty):<br />
</p>
<p><img src="static/upload1.png" /><br />
</p>
<p>If you click on the <em>Download Template</em> link in the upload form, you can download an empty CSV file for this data resource in the required format (this CSV file will just have column headers):</p>
<p><img src="static/csv_template_1.png" /><br />
</p>
<h4>2. Fill in the CSV template<br />
</h4>
<p>Fill in the CSV template with your data or re-format your existing spreadsheet data to match this template:<br />
</p>
<p><img src="static/csv_filled_1.png" /></p>
<p>Note that you may change the order of the columns, but do not rename or change the column headers!</p>
<h4>3. Upload the CSV file</h4>
<p>After you filled in the CSV file with your data, go back to the upload page in Sahana Eden,<br />
choose your CSV file and click <em>Upload Data File</em>.<br />
</p>
<h4>4. Review the records and confirm the Import</h4>
<p>After uploading the CSV file, Sahana Eden will show a list of records to import (&quot;Import Items&quot;) from your CSV file, along with any validation errors:</p>
<p><img src="static/review_import_items.png" /><br />
</p>
<p>Review the records displayed on the list. You can expand the record details by clicking on <em>Display Details</em>.<br />
</p>
<p>Records can be selected for import or de-selected by clicking into the <em>Element</em> column of the respective row.  Selected rows turn green and de-selected rows turn gray, while rows with errors are shown in red (those cannot be selected for import).<br />
</p>
<p>Once you have selected which rows shall be imported, then click <em>Submit</em> to import the selected rows into the database</p>
<h3>Troubleshooting<br />
</h3>
<h4> Sahana Eden reporting validation errors:</h4>
<ul>
<li>Correct any red colored rows (invalid data) according to the error message displayed in the error column by making the corrections in the CSV file.<br />
</li>
<li>From the review page choose the <em>Import</em> menu item and re-upload the CSV file with the corrected data.<br />
</li>
</ul>
<h4>Data not being imported as expected:</h4>
<p>Note:  This refers to data which passed Sahana Eden's validation but does not correspond to the user's expectation of correctness (e.g. <em>latitude</em> ending up in a <em>name</em> column). Here are some common things to check or try to address the errors:<br />
</p>
<ul>
<li>You may change the order of the columns, but not rename the column headers</li>
<li>Data must use UTF-8 character encoding<br />
</li>
<li>Export/Save as CSV file (.xls and .xlsx are also supported although require an up to date version of the python xlwt library. Using CSV is the safest method)<br />
</li>
<li>CSV must use comma as value separator and double quotes (i.e. &quot;) as quoting character.<br />
</li>
<li>A common problem is that cells containing whitespace or commas aren't enclosed in quotes<br />
</li>
<li>All data must be in a single worksheet</li>
<li>Duplicates will be resolved automatically. Where this fails you might need to check spelling, remove any leading or trailing whitespace in your cells, and make sure the CSV is using UTF-8 character encoding</li>
</ul>
<p><span id="ch011_localisation.xhtml"></span></p>
<h1>Localization</h1>
<p>By default Sahana Eden displays all information in US English. However, the system is fully internationalized, which means that all text elements of the user interface can be displayed in any language, including right-to-left languages.</p>
<p>The process of &quot;localizing&quot; Sahana Eden (adapting it to specific language and locale) involves translating the text elements of the user interface into whatever language is needed.</p>
<p>Many translations are already available for Sahana Eden, although they may not be complete or not up-to-date. These include:</p>
<ul>
<li>Arabic</li>
<li>Bosnian</li>
<li>Chinese (Simplified)</li>
<li>Chinese (Traditional)</li>
<li>Dari</li>
<li>English (UK)</li>
<li>French</li>
<li>German</li>
<li>Italian</li>
<li>Japanese</li>
<li>Khmer</li>
<li>Korean</li>
<li>Nepali</li>
<li>Pashto</li>
<li>Portuguese (Brazil)</li>
<li>Portuguese (Portugal)</li>
<li>Spanish</li>
<li>Russian</li>
<li>Tagalog</li>
<li>Tetum</li>
<li>Vietnamese</li>
</ul>
<h2>Updating an Existing Translation</h2>
<p>If you need to update an existing translation, either because it is incomplete or to add customized strings specific to your installation, then you need to update a text file in the languages folder (e.g. languages/<em>de</em>.py for the German translation). This file contains a Python dictionary to map the original US English strings to their translated counterparts.</p>
<p>There are 2 approaches that you can take to generate an empty language file for translation:<br />
</p>
<ol>
<li>If you have just a small number of modules that you wish to translate quickly then you can remove all untranslated strings from an existing language file. Then navigate through these modules - this will add any untranslated strings that the system encounters to the language file (assuming the relevant file permissions allow this).</li>
<li>If you wish to translate the entire application as part of a Preparedness project then you can update all the language files in languages by doing the following:</li>
</ol>
<pre><code>cd web2py
python web2py.py -S eden -R applications/eden/static/scripts/tools/languages.py</code></pre>
<p>There are 3 approaches you can take to do the translations:</p>
<div class="tip">
<p>Note: Inform all translators to not translate the variables within strings (e.g. %(name)s), but just move around the surrounding text to ensure that the word order makes sense.</p>
</div>
<ol>
<li>If you have a small number of strings to translate then it is possible to do this using the Web2Py Admin Interface (this assumes that you have a local branch on your machine to work on):</li>
<li>If you want to send these strings to be translated by a professional translation company, then they will typically expect the strings in spreadsheet format. You can create a CSV of strings using the Translate Toolkit:</li>
<li>If you want to use a community of translators then you can use Pootle (see below).</li>
</ol>
<h2>Adding a New Translation</h2>
<p>This can be done via the Web2Py admin interface:</p>
<p><a href="http://127.0.0.1:8000/admin/default/design/eden#languages" class="uri">http://127.0.0.1:8000/admin/default/design/eden#languages</a></p>
<p>Create a new file using the <a href="http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" class="ext-link"><span class="icon"></span>ISO 639-1 Code</a> of the Language plus &quot;.py&quot; as the filename. If it is a national variation of a language, eg. New Zealand English, add a suffix to the language code: &quot;en_nz.py&quot;.</p>
<p>The same process then applies as for updating an existing language.</p>
<h2>Using Pootle to Manage Translations</h2>
<p><a href="http://en.wikipedia.org/wiki/Pootle" title="Pootle">Pootle</a> is a web-based tool to manage translations by a group of translators which includes the ability to have alternate suggestions reviewed before being selected.</p>
<p>There is a Sahana instance at <a href="http://pootle.sahanafoundation.org" class="uri">http://pootle.sahanafoundation.org</a>  which is available for you to manage the translation for your language.</p>
<p>To use Pootle you need to convert the .py version of your translation to/from the PO format, which can be done using web2py2po from the <a href="http://translate.sourceforge.net/wiki/toolkit/py2web2po">Translate Toolkit</a>.</p>
<p><span id="ch013_maintenance.xhtml"></span></p>
<h1>Maintenance</h1>
<p>When Sahana Eden has been deployed, then you need to ensure that the system Availability is maintained through any upgrades and that the Data Integrity isn't compromised by ensuring regular Backups are taken.</p>
<h2>Backups</h2>
<p>Backups are generally done by dumping the SQL to the filesystem &amp; then copying to tape from there. Also remember to backup the contents of the uploads/ folder</p>
<pre><code># Schedule backups for 02:01 daily
echo &quot;1 2   * * * * root    /usr/local/bin/backup&quot; &gt;&gt; &quot;/etc/crontab&quot;</code></pre>
<h2>Scripts</h2>
<p>There are a number of useful maintenance scripts which are added to /usr/local/bin by the installation scripts.</p>
<p>(Examples shown are for Apache/MySQL, variants are available for Cherokee and/or PostgreSQL. Check the Installation Guidelines section of the Wiki for the latest versions of these scripts.)</p>
<h3>clean</h3>
<p>This script is used to reset an instance to default values, which may include 'prepopulated' data specific to this deployment.</p>
<pre><code>#!/bin/sh
/usr/local/bin/maintenance
cd ~web2py/applications/eden
rm -f databases/*
rm -f errors/*
rm -f sessions/*
rm -f uploads/*
sed -i &#39;s/deployment_settings.base.migrate = False/deployment_settings.base.migrate = True/g&#39; models/000_config.py
sed -i &#39;s/deployment_settings.base.prepopulate = 0/deployment_settings.base.prepopulate = 1/g&#39; models/000_config.py
rm -rf compiled
mysqladmin -f drop sahana
mysqladmin create sahana
cd ~web2py
sudo -H -u web2py python web2py.py -S eden -M -R applications/eden/static/scripts/tools/noop.py
cd ~web2py/applications/eden
sed -i &#39;s/deployment_settings.base.migrate = True/deployment_settings.base.migrate = False/g&#39; models/000_config.py
sed -i &#39;s/deployment_settings.base.prepopulate = 1/deployment_settings.base.prepopulate = 0/g&#39; models/000_config.py
/usr/local/bin/maintenance off
/usr/local/bin/compile
  </code></pre>
<h3><span class="Apple-style-span">w2p</span></h3>
<ul>
</ul>
<p>This script is used to open a Python shell in the web2py environment. This allows database migration scripts to be developed interactively.</p>
<pre><code>#!/bin/sh
cd ~web2py
python web2py.py -S eden -M</code></pre>
<h3><span class="Apple-style-span">compile</span></h3>
<ul>
</ul>
<p>This script is used to compile the Python code so that changes are visible to users (until this time, chages to .py files aren't seen by users). It is called automatically from the 'pull' and 'clean' scripts.</p>
<pre><code>#!/bin/sh
cd ~web2py
python web2py.py -S eden -R applications/eden/static/scripts/tools/compile.py
apache2ctl restart</code></pre>
<h3><span class="Apple-style-span">maintenance</span></h3>
<ul>
</ul>
<p>This script is used to put the site into 'maintenance' mode &amp; restore it to normal operations. It is usually called from the clean &amp; compile  scripts.</p>
<pre><code>#!/bin/sh
if [ &quot;$1&quot; != &quot;off&quot; ]
then
    a2dissite maintenance
    a2ensite production
    cd ~web2py &amp;&amp; sudo -H -u web2py python web2py.py -K eden -Q &gt;/dev/null 2&gt;&amp;1 &amp;
else
    killall -u web2py python
    a2ensite maintenance
    a2dissite production
fi
apache2ctl restart</code></pre>
<h3>backup</h3>
<ul>
</ul>
<p>This does a dump of the SQL database so that it can be backed-up to tape. It is usually called from Cron.</p>
<pre><code>#!/bin/sh
NOW=$(date +&quot;%Y-%m-%d&quot;)
mysqldump sahana &gt; /root/backup-$NOW.sql
OLD=$(date --date=&#39;7 day ago&#39; +&quot;%Y-%m-%d&quot;)
rm -f /root/backup-$OLD.sql</code></pre>
<h2>Maintenance Site</h2>
<p>This is an alternate Webserver configuration which blocks user access to the application so that upgrades can be done safely. Users see a simple holding page which asks them to try again later. This is (de-)activated by the 'maintenance' script, which is usually called from the 'pull' script.</p>
<div class="tip">
<p>Tip: It is still possible for administrators to access phpMyAdmin for MySQL database administration whilst the application is offline.</p>
</div>
<h2>Upgrades</h2>
<p>Simple upgrades can be done by running<br />
</p>
<pre class="wiki"><code>git pull upstream</code></pre>
<p>If there is a database migration required then this will require extra work. It is highly recommended that Production instances use a Development (and ideally a User Acceptance Testing) instance to practice data migration scripts on. This migration should be done using a copy of the Production database.</p>
<p>When making code customizations, it is best to do this in a branch of the code and then pull that code to the server, rather than editing files directly on the server:</p>
<p><img src="static/SahanaEden-Git-ServerUpdates_2.png" /></p>
<h2>Troubleshooting Upgrades</h2>
<p>Upgrading the version of Sahana Eden or enabling more modules may require updating configuration settings or installing/upgrading library dependencies.<br />
</p>
<h3>Update configuration settings file</h3>
<p>A new version of Sahana Eden may have new settings in 000_config.py that need to be merged with your current choices. After updating Sahana Eden, compare the copy of 000_config.py in deployment-templates with the site's copy in models. Merge in added and modified lines.<br />
</p>
<h3>Missing software packages</h3>
<p>A new version of Sahana Eden or a newly-enabled module may require software packages that were not included in the original installation. Optional packages may be needed to make use of new features. The latest list of required and optional packages is on the wiki:</p>
<p><a href="http://eden.sahanafoundation.org/wiki/InstallationGuidelines/Windows/Developer/Manual" class="uri">http://eden.sahanafoundation.org/wiki/InstallationGuidelines/Windows/Developer/Manual</a></p>
<p>For optional features that require missing packages, warnings will be printed when the Web2py server is started that list the features and the packages they need. If you don't need this functionality, then these can be safely ignored.</p>
<p>If missing packages are required then attempting to run the application will result in an error ticket with a message saying that this package was not found.</p>
<h3>Web2py version</h3>
<p>Since Sahana Eden extends Web2Py, and the two are both undergoing rapid development, the revision of Web2Py can be critical. Whilst the latest 'bleeding edge' version of Web2Py is usually stable, some Web2Py revisions have bugs which break a part of Sahana Eden. You can try upgrading to the latest revision of Web2Py or else downgrading to an older version which does not exhibit this bug.</p>
<p>Sometimes a new version of Sahana Eden may use features from a more recent Web2py than the currently installed version.  This typically leads to an error ticket with a message indicating that some item was not found.  Update to either the latest Web2py, or the latest known-stable Web2py revision, the version number for which can be found in private/update_check/eden_update_check.py</p>
<p>It is also sometimes posted in the #sahana-eden IRC channel topic (see the Community chapter for connecting to IRC).</p>
<p><span id="ch014_data-export.xhtml"></span></p>
<h1>Data Export</h1>
<p>There are many reasons why there may be a need to export data.  Whether it is for sharing data with another application or organization, or whether it involves physically moving data to another Sahana Eden installation such as from a Test to a Production environment. <br />
</p>
<p>Sahana Eden can export data in a variety of data formats, e.g. as spreadsheet (XLS, CSV), PDF, KML and a variety of XML formats. <br />
</p>
<p>Some export formats are limited to specific resources.  For example, hospital records would support EDXL-HAVE export whereas person records would support PFIF export.<br />
</p>
<p>Common export formats can be accessed from the icon buttons above the list view. Export the data by clicking on the respective icon.</p>
<p><img src="static/export_formats.png" /></p>
<p> Other export formats can be accessed by appending the extension to the URL, e.g.:</p>
<p>For an EDXL-HAVE feed:</p>
<pre><code>/eden/hms/hospital.have</code></pre>
<p>For a PFIF feed:</p>
<pre><code>/eden/pr/person.pfif</code></pre>
<p>For more details see: Appendix &quot;Web Services&quot;.<br />
</p>
<p><span id="ch016_installing-a-developer-environment.xhtml"></span></p>
<h1>Installing a Developer Environment</h1>
<p>When making code customizations, it is best to do this in a local copy of the code, test thoroughly, and then pull that code to the server, rather than editing files directly on the server. Keeping the code modifications under revision control greatly eases the process of upgrading the software while keeping your customizations intact.</p>
<p>A development environment can be installed on Windows, Linux or Mac - we have active developers using all three platforms. Detailed instructions can be found on the Sahana Eden wiki:</p>
<p><a href="http://eden.sahanafoundation.org/wiki/InstallationGuidelinesDeveloper" title="http://eden.sahanafoundation.org/wiki/InstallationGuidelines">http://eden.sahanafoundation.org/wiki/InstallationGuidelines</a></p>
<p>To keep the setup simple, we recommended using the default SQLite database and the default Web2py internal web server.</p>
<div class="tip">
<p>Note: Unless using a set of prepopulate data which includes an Admin user, the first user to register on a new Sahana Eden installation gets administrator rights. You will need this to be able to view any error tickets that are generated, and to examine the database using Web2py's interface.</p>
</div>
<h2>GitHub</h2>
<p>In order to contribute code you should have your own repository on <a href="http://github.com/">GitHub</a>, a community collaboration platform based on the Git distributed version control system.</p>
<p>Start by registering here:</p>
<p><a href="https://github.com/signup/free" class="uri">https://github.com/signup/free</a></p>
<p>Add your SSH Keys:</p>
<p><a href="http://help.github.com/win-set-up-git/" class="uri">http://help.github.com/win-set-up-git/</a></p>
<p>You can then fork the Eden trunk:</p>
<p><a href="https://github.com/flavour/eden/fork_select" class="uri">https://github.com/flavour/eden/fork_select</a></p>
<p>You can then clone this branch down locally to work on: </p>
<pre><code>cd web2py/applications
git clone git@github.com:mygitusername/eden.git</code></pre>
<div class="tip">
<p>Note: If you already have a local clone of trunk, then you can use this instead of requiring a fresh clone by modifying the source URL in eden/.git/config:</p>
<pre><code>[remote &quot;origin&quot;]
    url = git@github.com:mygitusername/eden.git</code></pre>
</div>
<p>Then set the Trunk branch as the 'upstream' remote:</p>
<pre><code>cd eden
git remote add upstream git://github.com/flavour/eden.git</code></pre>
<p>This allows you to pull the latest changes to trunk using:</p>
<pre><code>git pull upstream master</code></pre>
<p><img src="static/SahanaEden-Git-SetUp_1.png" /></p>
<h2>Recommended Development Tools</h2>
<p>For easy inspection and debugging of both CSS and JavaScript when working on UI improvements, use the <a href="https://getfirebug.com/downloads">Firebug</a> plugin for Firefox.</p>
<p>For serious developers, we recommend <a href="http://eden.sahanafoundation.org/wiki/DeveloperGuidelinesEclipse">Eclipse</a> as a graphical debugger because of the enhanced visibility gained by setting breakpoints and stepping through the server-side Python code.</p>
<h2>Virtual Machine</h2>
<p>A pre-configured Virtual Machine is available to allow a developer to get operational quickly, which is great for training events to both reduce time on installation and it also gives all participants a consistent environment. The Virtual Machine instructions can be found here:</p>
<p><a href="http://eden.sahanafoundation.org/wiki/InstallationGuidelinesVirtualMachine" class="uri" title="Virtual Machine information">http://eden.sahanafoundation.org/wiki/InstallationGuidelinesVirtualMachine</a> </p>
<p><span id="ch017_customisation.xhtml"></span></p>
<h1>Customization</h1>
<p>Sahana Eden is developed using Python and JavaScript. However, amazing as it may sound, simple customization can be done without any knowledge of either programming language. In fact there is just a single concept which is essential to understand before diving in: whitespace matters.</p>
<h2>Why Whitespace Matters</h2>
<p>Unlike many programming languages, Python code is sensitive to whitespace. To avoid bad results as an impact of this sensitivity, make sure that you indent the code in .py files properly. This is easiest if you configure your text editor to replace Tabs with 4 spaces:</p>
<p><img src="static/Editor%20Setup.png" width="158" height="71" /></p>
<p>The screenshot is from <a href="http://notepad-plus-plus.org">Notepad++</a>, a recommended editor on Windows, where you can find this by going to Settings -&gt; Preferences... -&gt; Language Menu/Tab Settings -&gt; Tab Settings (group)</p>
<h2>Debug mode</h2>
<p>As a developer, you should normally  run the application in Debug mode.</p>
<p>This means that JavaScript &amp; CSS files are loaded in separate, uncompressed versions and also automatically reloads the core models in modules/s3db. Changes to other files in modules/ still require a restart of Web2Py to become visible.</p>
<p><strong><span>models/000_config.py</span></strong></p>
<pre><code>settings.base.debug = True</code></pre>
<h2>Which file do I edit?</h2>
<p>Sahana Eden runs as a Web2Py application. The code is in the folder:</p>
<p>web2py/applications/eden</p>
<p>Inside that folder are folders for Models (define the data structure), Controllers (provide URLs to enable access to the data) &amp; Views (HTML templates).</p>
<p>Each module within Sahana Eden will normally consist of one of each of these files:</p>
<ul>
<li><span>Model:</span> modules/s3db/<em>modulename</em>.py</li>
<li><span>Controller:</span> controllers/<em>modulename</em>.py</li>
<li><span>View:</span> views/<em>modulename</em>/index.html</li>
</ul>
<p>In order to know which file to edit in order to change a particular function, you need to look at the URL. The Web2Py web framework maps URLs as follows:<br />
</p>
<p><span>http://host</span>/<span>application</span>/<span>controller</span>/<span>function</span></p>
<p>So, if you want to edit the Home page with the URL:</p>
<p><span>http://host</span>/<span>eden</span>/<span>default</span>/index</p>
<p>This implies that you should look at the file <span>eden</span>/controllers/<span>default</span>.py and the index function within it which can be found by searching for the function title &quot;def <span>index</span>():&quot;</p>
<div class="tip">
<p>Tip: Sahana Eden makes heavy use of integrated resource controllers so the typical mapping is:</p>
<p><span></span><span>http://host</span>/<span>eden</span>/<span>module</span>/<span>resource</span></p>
<p><span>The resource refers to a table with the name</span> <span><em>module</em>_<em>resource</em></span><span> in the file</span> <span>modules/s3db/&lt;module&gt;.py</span></p>
</div>
<h2>Templates</h2>
<p>When making customizations, it is better if you can retain compatibility with the upstream trunk code, so that you can 'pull' updates with less chance of conflicts. For this reason it is better if all your customizations are contained within your own folder inside private/templates/<span> </span><span>eg.</span><span>  </span>private/templates/<em>template_name</em><span>. </span></p>
<p><span>If, on the other hand, you are fixing a bug or developing functionality useful to other Sahana users, then that should be done in the core code &amp; your changes submitted upstream via a 'pull request'. See the Git chapter.</span></p>
<p>To set the template used by Sahana Eden, edit this line in the file models/000_config.py</p>
<pre><code>settings.base.template = &quot;template_name&quot;</code></pre>
<p>Once you have created a folder for your template, you can place some of these files in:</p>
<ul>
<li>Module loader: private/templates/<em>template_name</em>/__init__.py</li>
<li>Main Configuration: private/templates/<em>template_name</em>/config.py</li>
<li>Prepopulate Configuration: private/templates/<em>template_name</em>/tasks.cfg</li>
<li>CSS Configuration: private/templates/<em>template_name</em>/css.cfg</li>
<li>Custom Controllers: private/templates/<em>template_name</em>/controllers.py</li>
<li>Custom Menus: private/templates/<em>template_name</em>/menus.py</li>
<li>Custom Layouts: private/templates/<em>template_name</em>/layouts.py</li>
<li>Custom Views: private/templates/<em>template_name</em>/views/</li>
</ul>
<p>Not all of these files are needed in every template. We will now go through what each of these are used for:</p>
<p>__init__.py is needed if there are custom controllers, menus or layouts. It is normally empty.</p>
<p>config.py is needed if there are any custom deployment_settings which are common to all instances of this deployment (e.g. production, Test, Demo &amp;/or Training) or customizations to standard controllers. Most templates will contain one of these unless the folder is just a collection of pre-populate files or just a theme.</p>
<p>tasks.cfg is a collection of pre-populate CSV files. These are used to configure the base system with lookup lists (e.g. Organization Types) and Map configuration. They can also contain Demo data. The CSV files can be in this folder, another folder or even downloaded from a remote server.</p>
<p>css.cfg is a collection of CSS files which are loaded in every page for this Theme (a template folder is often linked to a theme of the same name, however this is not mandatory. Many templates can share a common theme). In non-debug mode the files are compressed together and downloaded as one file, whereas in debug mode they are downloaded individually. The CSS files can be from libraries, such as jQueryUI, from other templates, such as the default template, or custom ones for this theme.</p>
<p>controllers.py allows the creation of fully custom controllers. The most common usage is to provide a fully custom homepage (default/index). Additional pages may be created as default/custom/<em>mycustompage</em>.</p>
<p>menus.py allows custom menus. </p>
<p>layouts.py allows custom design for menus.</p>
<p>views/ folder allows custom views. For some core system pages which are commonly changed (such as the homepage, About, Contact, Help), it is sufficient to simply drop an HTML file into this folder. A Theme will normally have a customized layout.html here.</p>
<h2>Home Page and other simple Views</h2>
<p>One of the common changes that needs to be made is modifying the main home page, individual module home pages and the Contact/About pages.</p>
<p>Some of these customizations can be done in pure HTML by editing the View files. For example, you can edit the contact page at URL /eden/default/contact by copying the file: views/default/contact.html to private/templates/<em>template_name</em><span>/</span><span>views/contact.html</span></p>
<p>This is a normal HTML page other than the part(s) inside double curly braces <span>{{...}}</span> which indicate Python code.</p>
<pre><code>{{extend &quot;layout.html&quot;}}</code></pre>
<p>This part should not be edited as it loads the generic page layout from views/layout.html or, if using a custom theme, from private/templates/<em>template_name</em><span>/views/layout.html</span>.</p>
<p>Most pages, such as the main home page, include the results of Python code executed in the controller file. This is executed before the view template is parsed and dynamically generates content which is inserted in the curly brackets inside the HTML. The controller file for the main home page is controllers/default.py</p>
<p>The simple way to start customizing this page is to ignore some or all of this dynamic content and replace it with simple HTML content in the view template:</p>
<p>private/templates/<em>template_name</em><span>/views/index.html</span></p>
<div class="tip">
<p>Tip: Sahana Eden doesn't make use of many custom views in the core modules – normally the generic view templates within the <span>views/</span> folder are used, such as _create.html and _list.html. Modifications are made by configuration in the Model and Controller files. However it is possible to customise these views by adding these into private/templates/<em>template_name</em>/views/</p>
</div>
<h2>Edit a Field Label</h2>
<p>This can be done by editing the 'label' attribute in the field properties within the model.</p>
<p><strong>Example:</strong></p>
<p>Change the text 'Year' to 'Year Founded' in the form at URL: /eden/org/organisation/create</p>
<p> <img src="static/year.png" /></p>
<p>You can lookup the fieldname in the main model  <strong>modules/s3db/org.py</strong>:</p>
<pre><code>tablename = &quot;org_organisation&quot;
table = define_table(tablename,
                     ...
                     Field(&quot;year&quot;, label = T(&quot;Year&quot;),</code></pre>
<p>Since we are putting our customizations into our Template, we need to customize the controller in <strong>private/templates/<em>template_name</em>/config.py</strong>:</p>
<pre><code>def customise_org_organisation_controller(**attr):
    table = current.s3db.org_organisation
    table.year.label = T(&quot;Year Founded&quot;)
    return attr
settings.customise_org_organisation_controller = customise_org_organisation_controller</code></pre>
<div class="tip">
<p>Tip: The strings are internationalized by wrapping them inside T(). If you change the labels then you need to update any translation files that you are using, even if the translation remains the same.   (Note the UK English spelling of variable names. Labels and other text that appears in the user interface are standardized to US English as they are used as identifiers for translated text.)</p>
</div>
<p>For consistency, you should also edit the heading of the help tooltip, and maybe the body, if the meaning is being changed. This is found in the 'comment' attribute:</p>
<pre><code>table.year.comment = DIV(_class=&quot;tooltip&quot;,
              _title=&quot;%s|%s&quot; % (T(&quot;Year Founded&quot;),
                                T(&quot;Year that the organization was founded.&quot;)))),</code></pre>
<p><img src="static/year_comment.png" /><br />
</p>
<h2>Hide a Field</h2>
<p>It is common to want to hide a field to simplify a form to allow efficient collection of the data that you need. Hiding a field is safer than removing it completely from the database as it eases upgrades by eliminating the need for database migration.</p>
<p><strong>Example:</strong></p>
<p>Hide the 'Code' field from the form at URL: /eden/org/office/create</p>
<p><img src="static/image2-before.png" /></p>
<p>Since we are putting our customizations into our Template, we need to customize the resource in <strong>private/templates/<em>template_name</em>/config.py</strong>:</p>
<pre><code>def customise_org_office_resource(r, tablename):
    table = current.s3db.org_office
    table.code.readable  = False
    table.code.writable  = False

settings.customise_org_office_resource = customise_org_office_resource</code></pre>
<div class="tip">
<p>Tip: Python variables are case-sensitive, as are the boolean values 'True' and 'False'.</p>
</div>
<p><img src="static/Code_removed.png" /></p>
<h2>Add a New Field</h2>
<p>If you need to collect extra data for an existing resource, then it isn't currently possible to do this within a template. However it is simple and relatively safe to add an extra field to the model for that table.</p>
<p><strong>Example:</strong></p>
<p>Add the ability to store a Facebook page for Organizations.</p>
<p>Look at <strong><span>modules/s3db/org.py</span></strong> and add the new field to:</p>
<p><img src="static/image3-before.png" /><br />
</p>
<pre><code>tablename = &quot;org_organisation&quot;
table = define_table(tablename,
                     ...
                     Field(&quot;facebook&quot;, label=T(&quot;Facebook Page&quot;)),</code></pre>
<p><img src="static/Add%20Field.png" /></p>
<div class="tip">
<p>Tip: Be careful to add trailing commas to each line in the table definition as this is a common source of errors.</p>
</div>
<h2>Edit the Menus</h2>
<p>If you wish to edit the left (second-level) menus (e.g. relabeling, reordering or hiding entries) then create the file <strong>private/templates/<em>template_name</em>/menus.py</strong>. We can copy from modules/s3menus.py and override the menu for just the modules that we need.</p>
<p><strong>Example:</strong></p>
<p>In the Organization Registry Module, re-name 'Offices' as 'Venues' and hide the 'Search' &amp; 'Map' options:</p>
<p><img src="static/image4-before.png" /><br />
</p>
<pre><code>from s3layouts import *
try:
    from .layouts import *
except ImportError:
    pass
import s3menus as default

class S3OptionsMenu(default.S3OptionsMenu):
    &quot;&quot;&quot; Custom Controller Menus &quot;&quot;&quot;
    def org(self):
        &quot;&quot;&quot; ORG / Organization Registry &quot;&quot;&quot;

       return M(c=&quot;org&quot;)(
                M(&quot;Organizations&quot;, f=&quot;organisation&quot;)(
                    M(&quot;New&quot;, m=&quot;create&quot;),
                    M(&quot;List All&quot;),
                    M(&quot;Search&quot;, m=&quot;search&quot;),
                    M(&quot;Import&quot;, m=&quot;import&quot;)
                ),
                M(&quot;Venues&quot;, f=&quot;office&quot;)(
                    M(&quot;New&quot;, m=&quot;create&quot;),
                    M(&quot;List All&quot;),
                    #M(&quot;Map&quot;, m=&quot;map&quot;),
                    #M(&quot;Search&quot;, m=&quot;search&quot;),
                    M(&quot;Import&quot;, m=&quot;import&quot;)
                ),
            )</code></pre>
<p>You can see this change in the Organization Registry Module at URL: /eden/org</p>
<p><img src="static/Edit%20Menu.png" /></p>
<p>Tip: The # character comments out the text after it on that line so that Python will ignore it.</p>
<p><span id="ch018_building-a-new-application.xhtml"></span></p>
<h1>Building a new Module</h1>
<p>This chapter walks you through the process of adding a new module. This may sound like a big project, but the Sahana Eden Framework supports Rapid Application Development (RAD), which allows simple functionality to be added easily.</p>
<h2>Example: Training Courses</h2>
<p>Imagine that we want to add the capability to manage training courses from within our Sahana Eden instance. Instead of installing a separate package (such as Moodle) for this, we have decided to integrate this into our Sahana Eden instance so that:</p>
<ul>
<li>The Human Resource Management (HRM) module can use training records of personnel</li>
<li>We don't need to define data (e.g. users, locations, training courses) in multiple systems</li>
<li>We can use Sahana Eden's messaging, scheduling and mapping capabilities for the training courses</li>
</ul>
<p>NOTE: This Training Course module is only an example as Sahana Eden includes functionality for managing trainings within the HRM module.</p>
<h2>Identify the Resources</h2>
<p>The first step in constructing a new module is to identify the <em>Resources</em> involved.</p>
<p>Here, the primary <em>Resource</em> for the Training module will be a 'course'. Each course includes:</p>
<ul>
<li>the date, time and site where the course will be held</li>
<li>the facilitator</li>
<li>participants</li>
<li>course materials</li>
</ul>
<div>
<h2>Define the Basic Data Model</h2>
</div>
<p>We'll start by defining a database table with a few simple fields:</p>
<div class="tip">
<p>Tip: By convention, database tables in Sahana Eden are named as 'module_resource'. Here, the module is 'training' and the resource is 'course'.</p>
</div>
<p>Create a new file in the models/ folder called training.py and add the following code (you may leave out the comments after the <span>#</span> characters).</p>
<p><strong><span>models/training.py</span></strong></p>
<pre><code>tablename = &quot;training_course&quot;
db.define_table(tablename,
                # A &#39;name&#39; field
                Field(&quot;name&quot;),
                # The start time
                Field(&quot;start&quot;),
                # The facilitator
                Field(&quot;facilitator&quot;),
                # This adds all the metadata to store
                # information on who created/updated
                # the record &amp; when
                *s3_meta_fields()
                )</code></pre>
<div class="tip">
<p><img src="static/rsz_1screenshot_from_2013-11-19_172147.png" /><br />
</p>
<p>Tip: If your configuration in models/000_config.py has<br />
settings.base.migrate = True<br />
then Web2py will automatically 'migrate' your database: creating and modifying tables according to your model changes.</p>
</div>
<h2>Add a Controller</h2>
<p>Next we add a <em>Controller</em>, which provides access to this resource.</p>
<p>Create another new file, this time in the controllers/ folder:</p>
<p><strong>controllers/training.py</strong></p>
<pre><code>def course():
    return s3_rest_controller()</code></pre>
<p>The s3_rest_controller function provides all the Sahana Eden framework support needed to access the resource, including automatic loading of the respective model definitions. You should now have a working module. You can see the <em>CRUD</em> (Create, Read, Update, Delete) user interface here:</p>
<p><a href="http://127.0.0.1:8000/eden/training/course" class="uri">http://127.0.0.1:8000/eden/training/course</a></p>
<p>Tip: You will need to register for a login to be able to create new courses. The 1st user to register gets the administrator role.</p>
<p>All resources can be accessed in other formats, such as XLS, XML or JSON, just by appending the representation name to the URL, e.g</p>
<ul>
<li><a href="http://127.0.0.1:8000/eden/training/course.xls" class="uri">http://127.0.0.1:8000/eden/training/course.xls</a></li>
<li><a href="http://127.0.0.1:8000/eden/training/course.xml" class="uri">http://127.0.0.1:8000/eden/training/course.xml</a></li>
<li><a href="http://127.0.0.1:8000/eden/training/course.json" class="uri">http://127.0.0.1:8000/eden/training/course.json</a></li>
</ul>
<h2>Reports </h2>
<p>Pivot table reports with bar charts and pie charts can be generated for all resources, by appending the method name to the URL, e.g. <a href="http://127.0.0.1:8000/eden/training/course/report" class="uri">http://127.0.0.1:8000/eden/training/course/report</a></p>
<h2>Field Types</h2>
<p>By default fields are created with type <span>string</span>, however we may wish to use other data types. All fields have both client-side widgets &amp; server-side validation automatically added based on their data type.</p>
<p><strong><span>models/training.py</span></strong> </p>
<pre><code>tablename = &quot;training_course&quot;
db.define_table(tablename,
                Field(&quot;name&quot;),
                # A date type field (includes widget &amp; validation)
                s3base.s3_date(),
                Field(&quot;facilitator&quot;),
                # This is a file attachment that contains
                # a welcome pack that will be sent to each participant:
                Field(&quot;welcome_pack&quot;, &quot;upload&quot;),
                *s3_meta_fields()
                )</code></pre>
<p> <img src="static/start_date.png" /></p>
<p> </p>
<p><img src="static/rsz_screenshot_from_2013-11-19_172256.png" /> </p>
<h2>Field Labels</h2>
<p>Field labels are automatically generated from the field names, however we are able to customize these by adding a 'label' attribute.</p>
<p><strong><span>models/training.py</span></strong> </p>
<pre><code>tablename = &quot;training_course&quot;
db.define_table(tablename,
                Field(&quot;name&quot;),
                s3base.s3_date(label=&quot;Start Date&quot;),
                Field(&quot;facilitator&quot;),
                Field(&quot;welcome_pack&quot;, &quot;upload&quot;),
                *s3_meta_fields()
                )</code></pre>
<p> </p>
<p><img src="static/rsz_screenshot_from_2013-11-19_172343.png" /></p>
<h2>Internationalize Field Labels</h2>
<p>By wrapping a string in the <span>T(...)</span>function they will be added to language files which can be translated, allowing the system to be localized into other languages. To localize the field labels we need to provide a 'label' attribute with the string wrapped in T(...), even if the English version of the label is the same as the automatically generated one.</p>
<p><strong><span>models/training.py</span></strong></p>
<pre><code>tablename = &quot;training_course&quot;
db.define_table(tablename,
                Field(&quot;name&quot;,
                      label=T(&quot;Name&quot;)),
                s3base.s3_date(label=T(&quot;Start Date&quot;)),
                Field(&quot;facilitator&quot;,
                      label=T(&quot;Facilitator&quot;)),
                Field(&quot;welcome_pack&quot;, &quot;upload&quot;,
                      label=T(&quot;Welcome Pack&quot;)),
                *s3_meta_fields()
                )</code></pre>
<h2>Add Links to other Resources</h2>
<p>The course resource needs connections to existing resources: people &amp; sites./p&gt;</p>
<p>These are represented in SQL databases as 'Foreign Keys' which are usually defined in Sahana Eden by using 'Reusable Fields' to make the process simple.</p>
<p>We can link to a person by adding a person_id to the table definition in the model:</p>
<p><strong><span>models/training.py</span></strong></p>
<pre><code>tablename = &quot;training_course&quot;
db.define_table(tablename,
                      Field(&quot;name&quot;,
                             label=T(&quot;Name&quot;)),
                      # Link to the Person Resource
                      s3db.pr_person_id(label=T(&quot;Facilitator&quot;)),
                      s3base.s3_date(label=T(&quot;Start Date&quot;)),
                      Field(&quot;welcome_pack&quot;, &quot;upload&quot;,
                            label=T(&quot;Welcome Pack&quot;)),
                      *s3_meta_fields()
                      )</code></pre>
<p> </p>
<p><img src="static/rsz_screenshot_from_2013-11-19_172643.png" /></p>
<p> </p>
<p>Note how we over-ride the default label to be more appropriate to this context.</p>
<p>The site link is a little more complex as this is a <a href="http://eden.sahanafoundation.org/wiki/S3/S3Model/SuperEntities"><em>Super Entity</em></a>:</p>
<p><strong><span>models/training.py</span></strong></p>
<pre><code>tablename = &quot;training_course&quot;
db.define_table(tablename,
                Field(&quot;name&quot;,
                      label=T(&quot;Name&quot;)),
                s3db.pr_person_id(label=T(&quot;Facilitator&quot;)),
                # Link to the Site resource
                s3db.super_link(&quot;site_id&quot;, &quot;org_site&quot;,
                                label = T(&quot;Venue&quot;),
                                # superlink fields are normally invisible
                                readable = True,
                                writable = True,
                                # we want users to see the site name
                                # rather than just the ID
                                represent = s3db.org_site_represent,
                                ),
                s3base.s3_date(label=T(&quot;Start Date&quot;)),
                Field(&quot;welcome_pack&quot;, &quot;upload&quot;,
                      label=T(&quot;Welcome Pack&quot;)),
                *s3_meta_fields()
                )</code></pre>
<p> </p>
<p><img src="static/rsz_screenshot_from_2013-11-19_172854.png" /></p>
<p> </p>
<p>Note that we make use of a 'represent' function so that users see site names in the drop-down and not just integer IDs</p>
<div class="tip">
<p>Tip: You will need to create a site (e.g. through /eden/org/office/create) to be able to see this</p>
</div>
<h2>CRUD Strings</h2>
<p>You can replace the default strings within the <em>CRUD</em> user interface with custom strings for your resource.</p>
<p><strong><span>models/training.py</span></strong></p>
<pre><code>s3.crud_strings[tablename] = Storage(
    label_create = T(&quot;Create Course&quot;),
    title_display = T(&quot;Course Details&quot;),
    title_list = T(&quot;List Courses&quot;),
    title_update = T(&quot;Edit Course&quot;),
    title_upload = T(&quot;Import Courses&quot;),
    subtitle_list = T(&quot;Courses&quot;),
    label_list_button = T(&quot;List Courses&quot;),
    label_delete_button = T(&quot;Delete Course&quot;),
    msg_record_created = T(&quot;Course added&quot;),
    msg_record_modified = T(&quot;Course updated&quot;),
    msg_record_deleted = T(&quot;Course deleted&quot;),
    msg_list_empty = T(&quot;No Courses currently registered&quot;))</code></pre>
<p> </p>
<p> <img src="static/CRUD_Strings_1.png" /></p>
<p> </p>
<h2>Module Index Page</h2>
<p>The &quot;course&quot; controller we created earlier, controls just a single page within our new module. More pages like it can be created by adding new controller functions. One such special controller function is the index function which handles the index page of the module. Any links we create to the module will be directed at this page.<br />
</p>
<p><strong>controllers/training.py</strong></p>
<pre><code>def index():
    return dict()</code></pre>
<p>This is a minimal controller function which passes control to a <em>View</em> template.</p>
<p>The default view template which is called has the same name as the function and is located in the folder named after the controller, so create this new file, and add the following code:</p>
<p><strong><span>views/training/index.html</span></strong></p>
<pre><code>{{extend &quot;layout.html&quot;}}
&lt;h2&gt;Welcome to the Training Module&lt;/h2&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href=&#39;{{=URL(f=&quot;course&quot;)}}&#39;&gt;
   List Training Courses
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;</code></pre>
<p>Note that this is normal HTML code, apart from sections which are enclosed within <span>{{...}}</span>, which are normal python code, other than the special terms 'extend' &amp; 'include' which allow HTML template fragments to be reused within each other.</p>
<div class="tip">
<p>Tip: The URL() function is an HTML helper which is used to generate a URL to access the course resource without hardcoding the application name.</p>
</div>
<h2>Menus</h2>
<p>There are two levels of menu within the system:</p>
<ul>
<li>The top-level 'Modules Menu' is visible in all modules.</li>
<li>Underneath that, each module has its own menu for for module-specific navigation.</li>
</ul>
<p>To change the top-level Modules menu, edit the following file and add a new entry for the Training Course module inside the 'modules' data structure:</p>
<p><strong>models/000_config.py (at end of file)</strong></p>
<pre><code>settings.modules[&quot;training&quot;] = Storage(
    name_nice=T(&quot;Training&quot;),
    module_type=2)</code></pre>
<p>Note: models/000_config.py is not in the version control system, and so is not changed when the software is updated. It is this instance's working copy, with local settings, of the configuration file. The template for this file is:<br />
private/templates/000_config.py<br />
</p>
<p>Adding the module to settings.modules through 000_config.py is just a quick way of making a small modification to the template currently in use. Most implementations of Sahana Eden will define their own template, in which the modules to be used will be listed. See the customisation and configuration chapters of this book for further details. When a new module is ready to be added to the main Eden code base, the above code should be removed from 000_config.py and inserted into the sequence of similar operations in the default template (private/templates/default/config.py). By convention, the default template has all modules enabled (except experimental ones and those under development). Implementations then disable unwanted modules when they define their own templates.<br />
</p>
<p>To add a menu for use within the new training module, edit the following file and add a new function within the S3OptionsMenu class, which provides access to the 'course' controller. Note that the S3OptionsMenu class already exists - you just need to add a new function within it.</p>
<p><strong>modules/s3menus.py</strong></p>
<pre><code>class S3OptionsMenu(object):

    def training(self):
        return M(c=&quot;training&quot;)(
                    M(&quot;Courses&quot;, f=&quot;course&quot;)(
                        M(&quot;Create&quot;, m=&quot;create&quot;),
                        M(&quot;Import&quot;, m=&quot;import&quot;),
                        M(&quot;Report&quot;, m=&quot;report&quot;),
                      )
                )</code></pre>
<p>You also need to add the training module to your list of active modules:</p>
<p><strong>private/templates/default/config.py</strong></p>
<pre><code>settings.modules = OrderedDict([
    ...
    (&quot;training&quot;, Storage(
        name_nice = T(&quot;Training&quot;),
        module_type = 10,
        )),
    ...</code></pre>
<p><img src="static/Courses_Menu.png" /></p>
<h2>Components</h2>
<div class="tip">
<p>Note: This section is significantly more advanced than the previous example, so should only be tackled if you're feeling comfortable with the material so far.</p>
</div>
<p>We'd like to be able to record information relating to each participant in the course, such as whether they actually attended and what grade they attained.</p>
<p>To do this, we need to build a 'link' table between the participants and the course.</p>
<p>The natural way to do this within Sahana Eden is to make the link table a 'component' of the course. The course is the 'primary resource', and participants are a 'component' of the course.</p>
<div class="tip">
<p>Tip: See the Resource Model chapter in the appendices for an explanation of the resource and components concept.</p>
</div>
<h3>Model</h3>
<p>Edit the following file and add this after the existing code:</p>
<p><strong>models/training.py</strong></p>
<pre><code>represent = S3Represent(lookup = tablename)
course_id = S3ReusableField(&quot;course_id&quot;, &quot;reference %s&quot; % tablename,
                            label = T(&quot;Course&quot;),
                            ondelete = &quot;RESTRICT&quot;,
                            represent = represent,
                            requires = IS_ONE_OF(db,
                                                 &quot;training_course.id&quot;,
                                                 represent),
                            ) </code></pre>
<p>This defines a 'reusable field' which can be added to other table definitions to provide a foreign key reference to the course table:</p>
<p>Note that this uses a 'represent' function to allow a record in the course table to be represented by its name (The S3Represent class allows bulk lookups for scalability).</p>
<p>It also adds a 'requires' validator function. This provides both server-side validation and a client-side widget (in this case a dropdown of records in the course table).</p>
<p>Define a set of options for the course grade attained by each participant:</p>
<p><strong>models/training.py</strong></p>
<pre><code>course_grade_opts = {
    1: T(&quot;No Show&quot;),
    2: T(&quot;Failed&quot;),
    3: T(&quot;Passed&quot;)
}</code></pre>
<p>These options associate a number, which is what will be stored in the database, with a label meaningful to the users.</p>
<p>Define the participant component resource, making use of the course reusable field and grade options we just defined. (Note that we make use of another validator -- the client-side widget is again a dropdown, although here the options come from the grade options dictionary rather than a database table.)</p>
<p><strong>models/training.py</strong></p>
<pre><code>tablename = &quot;training_participant&quot;
db.define_table(tablename,
                course_id(),
                s3db.pr_person_id(label=T(&quot;Participant&quot;)),
                Field(&quot;grade&quot;, &quot;integer&quot;,
                      label=T(&quot;Grade&quot;),
                      requires=IS_IN_SET(course_grade_opts),
                      ),
                *s3_meta_fields()
                )</code></pre>
<p>Note, that unlike before, no &quot;represent&quot; parameter is required to specify the mapping from grade labels to numbers. This is because the IS_IN_SET requirement (a part of Web2py) automatically does this for you if you give it a dictionary.</p>
<p>s3.meta_fields() is a helper that provides a set of fields commonly needed in each table, such as what user created the record and when it was created.</p>
<div class="tip">
<p>Tip: Functions, classes, and values that start with 's3' or 'S3' are part of the Sahana Eden framework - have a look for more of these.</p>
</div>
<p>Tell the framework that a participant is a component of a course:</p>
<p><strong>models/training.py</strong></p>
<pre><code>s3db.add_components(&quot;training_participant&quot;,
                    training_course = &quot;course_id&quot;)</code></pre>
<h3>Controller</h3>
<p>There is no need to create a separate REST controller to manage the component, since it will always be accessed via the existing course controller, however we must then extend the controller with 2 new elements to allow the Sahana Eden framework to display the component: 'tabs' and an 'rheader'.</p>
<p>Tabs are how the framework provides access to the different components in a web page for the primary resource.</p>
<p>The 'resource header' is a section of HTML that provides a summary of the primary resource record, in this case the course. This is displayed above the tabs so that when each component record is being viewed, its parent record is also visible at the same time.</p>
<p>Edit the following file, adding this content above the course controller:</p>
<p><strong><span>controllers/training.py</span></strong></p>
<pre><code>def course_rheader(r, tabs=[]):
    if r.representation != &quot;html&quot;:
        # RHeader is a UI facility &amp; so skip for other formats
        return None
    if r.record is None:
        # List or Create form: rheader makes no sense here
        return None

    tabs = [(T(&quot;Basic Details&quot;), None),
            (T(&quot;Participants&quot;), &quot;participant&quot;)]
    rheader_tabs = s3_rheader_tabs(r, tabs)

    course = r.record

    rheader = DIV(TABLE(
        TR(
            TH(&quot;%s: &quot; % T(&quot;Name&quot;)),
            course.name,
            TH(&quot;%s: &quot; % T(&quot;Start Date&quot;)),
            course.start,
            ),
        TR(
            TH(&quot;%s: &quot; % T(&quot;Facilitator&quot;)),
            s3db.pr_person_represent(course.person_id),
            )
        ), rheader_tabs)

    return rheader</code></pre>
<p>Modify the previous course controller with this code:</p>
<p><strong><span>controllers/training.py</span></strong></p>
<pre><code>def course():
    return s3_rest_controller(rheader=course_rheader)</code></pre>
<div class="tip">
<p>Tip: rheader is simply a variable passed through the REST controller unaltered &amp; then serialized as rheader.xml() in the views.</p>
</div>
<h2>Further Options</h2>
<p>The following are some possible directions for this module, although they are currently beyond the scope of this tutorial. Please feel free to experiment with implementing them!</p>
<h3>Instance-Specific Components</h3>
<p>If a course is offered multiple times, most of the course details should be the same between instances, so courses could be refactored into a generic course (e.g. in a course catalog) with static information (e.g. name, and maybe the course materials), and course instances representing each offering of the course (date / time, site, and participants would be associated with course instances). The generic course would be a primary resource, and course instances would be its components. With this, we would have two levels of resource and component: a generic course has instances, and each instance has participants.<br />
</p>
<h3>Authorization</h3>
<p>If we need to define a 'role' to manage the training courses, so that only people who have that role can modify courses, or a facilitator role that is allowed to set grades. That can be done by editing the file: private/templates/default/auth_roles.csv</p>
<h3>Messaging</h3>
<p>We could add a button to a course's web page, to mail the course materials to the participants. See how the dispatch() custom method does this within the Incident Reporting System (IRS) by calling msg.compose().</p>
<h3>Scheduler</h3>
<p>We could set a reminder to mail the facilitator two weeks before the course start so they can make sure the course materials are up to date and mail them out to the participants.</p>
<p>The Scheduler API is defined is modules/s3/s3task.py and tasks are defined in models/tasks.py.</p>
<h3>Mapping</h3>
<p>We could display a map of all upcoming training courses. This is done by calling gis.show_map() from modules/s3/s3gis.py. There are further instructions on the wiki - search for the Developer Guidelines on GIS.</p>
<h3>Conditional Model Loading</h3>
<p>Not all of the Eden data models may be needed for the processing of a particular request. For optimum performance, the S3 framework provides a mechanism to only load those models which are needed.</p>
<p>Data models are implemented as Python modules in modules/s3db, which contain the database table definitions. Apart from the table definitions, modules can also define global functions and variables.</p>
<p>In modules/s3db/skeleton.py you can find a comprehensively documented example for how to implement such a module.</p>
<p>Tip: When doing this we need to ensure that the model is loaded when-required, such as in our represent function, by accessing it as s3db.training_course, or in order to detect cases where it has been disabled:</p>
<pre><code>table = s3db.table(&quot;training_course&quot;)
if table is not None:
    # Code that depends on training_course
    ...
else:
    # Alternative code
    ...
# Independent code
...</code></pre>
<h3>Database Abstraction Layer</h3>
<p>When getting deeper into the code, you'll noptice that we use Web2Py's Database Abstraction Layer (DAL) to do a SQL query.The variable db is an instance of the DAL class, which represents a database. Queries are written in a syntax that is much like a Python expression, but not quite. Look at the Web2Py book (<a href="http://web2py.com/book" class="uri">http://web2py.com/book</a>) for more on the DAL.</p>
<p><span id="ch019_introduction-to-development.xhtml"></span></p>
<h1>Further Reading</h1>
<p>This manual is not designed to teach you Python, Web2Py, or Javascript as we encourage you to dive straight into Sahana Eden code to learn as you go. However this chapters provide additional reference resources for those who wish to get additional skills for more significant code changes.</p>
<h2>Python</h2>
<p>Python is a high-level scripting language suitable for rapid application development. It has a wealth of powerful libraries available. If you're interested in learning more about Python outside of our code, refer to these excellent Python resources:</p>
<ul>
<li>Dive Into Python (<a href="http://diveintopython.org" class="uri">http://diveintopython.org</a>)</li>
</ul>
<ul>
<li>How to Think like a Computer Scientist (<a href="http://diveintopython.org">http://openbookproject.net/thinkcs/python/english3e/</a>)</li>
</ul>
<h2>Web2Py</h2>
<p>Web2Py is a simple yet powerful framework to allow people to rapidly develop secure real world applications. We like the <a href="http://www.web2py.com/book">Official Web2Py book</a> (http://web2py.com/book) as a resource.</p>
<p>Here are a few tips about Web2Py:</p>
<ol>
<li>All Models are executed during every request in alphabetical order within web2py environment</li>
<li>The Controller is executed</li>
<li>The View template is parsed</li>
<li>(HTML) page returned to client</li>
</ol>
<div class="tip">
<p>Tip 1: Python Modules are not reloaded for every request, so if changes are made to these files then you would need to restart Web2Py to see the differences.</p>
<p>Tip 2: Because all the models are executed during every request, the code added there should be optimized - search for 'conditional model loading' in the code for guidance on how to do this. <br />
</p>
</div>
<h2>JavaScript</h2>
<p>Sahana Eden uses two JavaScript libraries: jQuery and ExtJS.</p>
<p><strong>jQuery</strong> offers a simple way of adding unobtrusive client-side interactivity to widgets. It has a wealth of plugins available (some of which we copy to static/scripts/S3, the Amazon Simple Storage Service) and excellent documentation at <a href="http://docs.jquery.com" class="uri">http://docs.jquery.com</a></p>
<ul>
</ul>
<p><strong>ExtJS</strong> provides some very advanced UI components that are primarily used for the Map. It has a wealth of plugins available (some of which we copy to static/scripts/S3, the Amazon Simple Storage Service) and excellent documentation at <a href="http://docs.sencha.com/ext-js/3-4/" class="uri">http://docs.sencha.com/ext-js/3-4/</a>.</p>
<h2>Sahana Eden Build and Debug Tips</h2>
<p>For end-user performance gains, Sahana Eden minimizes and compresses the CSS and JavaScript. While this approach works well for optimized end-user performance, to debug the CSS and JavaScript you should enable debug mode in models/000_config.py  in your Sahana Eden server with the following setting:</p>
<p>settings.base.debug = True</p>
<p><span class="Apple-style-span">Once any changes to the CSS and JavaScript are working, then you can </span>minimizes and compresses the CSS and JavaScript<span class="Apple-style-span"> using:</span></p>
<p>static/scripts/tools/build.sahana.py<br />
</p>
<p><span class="Apple-style-span">Although this uses a web service, you get better results by downloading a local version of the <a href="http://code.google.com/closure/compiler/">Closure Compiler</a> (a tool for making JavaScript download and run faster) to </span><span class="Apple-style-span">static/scripts/tools</span><span class="Apple-style-span">. </span></p>
<p>Tip: It is also possible to quickly view a single page in debug mode by adding the ?debug=1 variable to the end of a URL.<br />
</p>
<p><span id="ch021_sahana-software-foundation.xhtml"></span></p>
<h1>Sahana Software Foundation</h1>
<p>Sahana Eden is a project of the Sahana Software Foundation (SSF), which is dedicated to the mission of saving lives by providing information management solutions  that enable organizations and communities to better prepare for and respond to disasters. SSF provides different software tools to supplement the the process of disaster mitigation and response. SSF provides governance and direction to the Eden project among others.</p>
<p>For more, visit: <a href="http://www.sahanafoundation.org" class="uri" title="Sahana Foundation">http://www.sahanafoundation.org</a></p>
<h2>Membership</h2>
<p>The SSF is supported by members who have contributed and continue to support the to SSF's projects. These members include:</p>
<ul>
<li>Disaster Management practitioners who have used Sahana software tools.</li>
<li>Commercial companies that develop and support Sahana software.</li>
<li>Academics who use Sahana software in teaching and research.</li>
<li>Volunteer software developers, translators, testers and others.</li>
</ul>
<p>If you are interesting in becoming a member please contact community@sahanafoundation.org </p>
<h2><span class="Apple-style-span">Events</span></h2>
<h3>SahanaCamps</h3>
<p>SSF runs SahanaCamps to bring disaster management and relief professionals together with software deployers and developers to explore the use of Sahana software through simulations and participatory discussions. SahanaCamps also provide technical training for software developers wanting to deploy or contribute to the Sahana Software Foundation. SahanaCamps have been held in India, Taiwan, Vietnam, Portugal and the USA.</p>
<h3>Google Summer of Code</h3>
<p>Google Summer of Code (GSoC) allows college and university students to learn professional software development skills and develop code that will be used in live products. SSF has participated in the Google Summer of Code internship program every year since 2006. Experienced SSF software developers mentor the students to provide a rich learning experience.</p>
<p>For more information on Google Summer of Code, go to: <a href="http://code.google.com/soc/" class="uri" title="GSoC">http://code.google.com/soc/</a></p>
<h3>Google Code-in</h3>
<p>Google Code-in (GCI) is a program to give high school students the opportunity to participate in open source projects. SSF participated in the 2010 and 2011 Google Code-in, in which students from all over the world completed small tasks including testing, code reviews, bug fixing, translation, and writing documentation.</p>
<p>For more information on GCI, go to: <a href="http://code.google.com/opensource/gci" class="uri">http://code.google.com/opensource/gci</a><br />
</p>
<p><span id="ch022_community.xhtml"></span></p>
<h1>Getting Help</h1>
<p>There are several options for getting the support you need to use Sahana Eden, ranging from basic assistance from the voluntary community through professional support. </p>
<ul>
</ul>
<h2>Mailing List</h2>
<p>You can contact the mailing list to ask any questions you may have about Sahana Eden. This is the best way to engage with the entire Sahana Eden community, get answers to any questions you may have and share the work you are doing with Sahana Eden. </p>
<p>Details on the list are found here: <a href="http://eden.sahanafoundation.org/wiki/MailingList" class="uri" title="http://eden.sahanafoundation.org/wiki/MailingList">http://eden.sahanafoundation.org/wiki/MailingList</a></p>
<h2>Web Chat</h2>
<p>Real-time communication can help facilitate allow more rapid discussion of ideas. You can join the Sahana Eden Internet Relay Chat (IRC) channel to chat directly with members of the community.</p>
<p>If you have an IRC client you can join #sahana-eden channel on <a href="http://irc.freenode.net">irc.freenode.net</a>. Otherwise you can go to <a href="http://webchat.freenode.net/?channels=sahana-eden&amp;uio=d4" class="uri">http://webchat.freenode.net/?channels=sahana-eden&amp;uio=d4</a> </p>
<p>Please be aware that people on the Web Chat may be busy or otherwise occupied and it may be useful to also send an email with any queries you have to the mailing list.</p>
<p>For more information, see: <a href="http://eden.sahanafoundation.org/wiki/Chat" class="uri" title="http://eden.sahanafoundation.org/wiki/Chat">http://eden.sahanafoundation.org/wiki/Chat</a> </p>
<h2>Monthly Community Call</h2>
<p>The Sahana community also gets together on monthly voice calls to discuss ongoing work, new projects, upcoming events and other topics. This call is open to everyone.</p>
<p>For more information, see: <a href="http://wiki.sahanafoundation.org/doku.php/community:call" class="uri">http://wiki.sahanafoundation.org/doku.php/community:call</a> or contact: community@sahanafoundation.org.</p>
<h2>Wiki </h2>
<p>The Sahana Eden wiki contains detailed technical documentation, instructions for deploying the software, guides to contributing to the project and blueprints for future work. It is maintained by community member. You are welcome to register for an account to help improve and extend the wiki </p>
<p>The wiki is at: <span class="Apple-style-span"><a href="http://eden.sahanafoundation.org" class="uri">http://eden.sahanafoundation.org</a> </span></p>
<h2>Reporting Bugs</h2>
<p>You can help improve Sahana Eden by reporting any bugs you find in the software. To report a bug go to: <a href="http://eden.sahanafoundation.org/newticket" class="uri">http://eden.sahanafoundation.org/newticket</a> </p>
<p>This ensures that these bugs can be fixed in future releases of the Sahana Eden. </p>
<p>Some things to remember while filing a bug report:</p>
<ol>
<li>Please be explicit about what you were trying to do when you encountered the bug and what module you are using. A URL (website address) is very useful.</li>
<li>Be sure to write in detail the steps to reproduce the bugs. It would also be helpful if you could write out what your trying to achieve when you encountered the bug. For instance, if you were filling out a form and the application crashed as soon as you hit submit, it would helpful to put the data you were trying to put in and the module you were in the bug report.<br />
</li>
<li>You could also check the wiki for some information, perhaps the bug you encountered is unresolved issue which the developers are aware of. It also be possible that the feature might not be complete yet.</li>
<li>If you are a developer, make sure you have the latest version of the code. It is possible that the issue you are facing has been resolved.</li>
<li>Describe the environment you are running the system on in the bug report. If you can, please include the operating system, the browser, the version of Python you have, the Web2Py version, Sahana Eden revision and Python libraries installed. Listing out everything may be a little tedious, but the more specific you can be, the easier it will be to fix the bug. </li>
</ol>
<p>Refer to <a href="http://eden.sahanafoundation.org/wiki/BugReportingGuidelines" class="uri">http://eden.sahanafoundation.org/wiki/BugReportingGuidelines</a> before reporting a bug.<br />
</p>
<h2>Professional Support</h2>
<p>Unpaid volunteers from the Sahana Eden community can provide a basic level of support for deploying and using Sahana Eden. If you require more comprehensive support and guaranteed response, professional companies are available. Both AidIQ <a href="http://www.aidiq.com">(www.aidiq.com</a>) and Respere <a href="http://www.respere.com">(www.respere.com</a>) provide deployment, customization, hosting, training and support for Sahana Eden solutions. </p>
<p><span id="ch023_getting-involved.xhtml"></span></p>
<h1>Getting Involved</h1>
<p>Getting involved in Sahana Eden is a great way to support work in Disaster Management. You can contribute in a variety of ways.</p>
<h2><strong>Software Development </strong></h2>
<p>If you are a software developer who is interested in contributing to Sahana Eden there are a wide range of projects whcih you can get involved in.</p>
<p>See: <a href="http://eden.sahanafoundation.org/wiki/Projects" class="uri">http://eden.sahanafoundation.org/wiki/Projects</a>   </p>
<h2><strong>Documentation</strong></h2>
<p>The wiki and this book form the backbone of the documentation available for Sahana Eden. There is alway scope for improving and extending the documentation. Contributing to the documentation it is a good way for developers to to better understand Sahana Eden. If there is something in the documentation which is not clear to you or is missing, you can improve it. </p>
<p>You can also produce screencasts which are a quick and easy way for new users and developers to understand Sahana Eden.</p>
<h2><strong>Testing</strong></h2>
<p>By testing Sahana Eden you can help to make it more reliable. This can be done by writing test cases, performing manual tests and automating tests with Selenium. </p>
<h2><strong>Blueprints</strong></h2>
<p>Blueprints allow users to share their requirements and developers to document their ideas for Sahana Eden. Its a good way for users to engage with the Sahana Eden community communicate their needs.</p>
<h2><strong>System Administrators</strong></h2>
<p>System Administrators are essential for deployments of Sahana Eden. They also help us manage the servers where websites, wikis and demos are hosted. The system administration team has the opportunity to develop their skills while assisting the community.</p>
<h2><strong>Translators</strong></h2>
<p>Translators can help to make Sahana Eden more accessible by translating it into multiple languages.</p>
<h2><strong>Designers </strong></h2>
<p>Designers can help to make Sahana Eden more usable by adding a clear graphics, layout and icons to improve the user experience.</p>
<h2><strong>GIS Experts</strong></h2>
<p>GIS Experts can provide data and tools to improve GIS functionality in Sahana Eden, to ensure that key geographical knowledge is available.</p>
<p><span id="ch024_contributing-code.xhtml"></span></p>
<h1>Contributing Code</h1>
<p>We welcome contributions to the Sahana Eden code. Before any contributions can be accepted, contributors must sign a Contributor License Agreement to ensure that the code can be provided as open source software. This protects both you as a contributor as well as the Sahana Software Foundation. This can be downloaded at <a href="http://wiki.sahanafoundation.org/doku.php/foundation:start#contributor_license_agreement" class="uri">http://wiki.sahanafoundation.org/doku.php/foundation:start#contributor_license_agreement</a></p>
<p>Sahana Eden code is hosted on GitHub at <a href="https://github.com/flavour/eden" class="uri">https://github.com/flavour/eden</a> which uses the Git distributed version control system.</p>
<p>The bug tracker, which uses Trac, is at <a href="http://eden.sahanafoundation.org/report" class="uri">http://eden.sahanafoundation.org/report</a>.</p>
<h2>Using GitHub</h2>
<p>The initial GitHub configuration (1 &amp; 2) is covered in the 'Installing a Developer Environment' chapter.</p>
<p>Commit your code to your local branch (3 &amp; 4):</p>
<pre><code>git commit -a
git commit -a</code></pre>
<p>Before submitting it, you should ensure that it runs with the current version of the 'Trunk' branch (5):</p>
<pre><code>git pull upstream master</code></pre>
<p>You should also rebase it to keep the revision history cleaner and in more logical chunks for review (6):</p>
<pre><code>git rebase -i</code></pre>
<p>Push your code to your GitHub branch (7):</p>
<pre><code>git push</code></pre>
<p>You can then use GitHub to submit a 'Pull Request' to Trunk (8).</p>
<p><a href="https://github.com/mygitusername/eden/pull/new/master" class="uri">https://github.com/mygitusername/eden/pull/new/master</a></p>
<p>People subscribed to Trunk can then review the changes, request any necessary amendments before it can be accepted, and then merge your work into Trunk so that other users can benefit from your work.</p>
<p><img src="static/Git%20-%20Commiting%20Code.png" /><br />
</p>
<p><span id="ch025_where-to-go-next.xhtml"></span></p>
<h1>Where to Go Next</h1>
<p>Thank you for learning more about the Sahana Eden project.  We look forward to seeing you become more involved in our community.  For the latest news about the project please see the Sahana Software Foundation Website (http://sahanafoundation.org).</p>
<p> </p>
<p><span id="ch027_resource-model.xhtml"></span></p>
<h1>Resource Model</h1>
<p>To manage all the complex information in a broad variety of business processes in a flexible yet consistent way, the Sahana Eden framework uses the concept of &quot;resources&quot;.</p>
<p>A <em>resource</em> is a set of all database records which describe a complex entity in the business process (such as a person or an organization, or a request for items). <em>Resources</em> also provide all necessary methods to represent, modify and analyze the data.</p>
<h3>Records to Resources</h3>
<p>The following pictures illustrate the relationship between records in database tables and <em>resources</em>. Each Lego piece represents a single record in the database, while the different colors and sizes symbolize different database tables:</p>
<p><img src="static/component_model1_1.png" /> </p>
<blockquote>

</blockquote>
<p>The next picture shows the relationship between the records - every &quot;organization&quot; can have one or more &quot;offices&quot;.</p>
<p><img src="static/component_model2_1.png" /> </p>
<p>The last picture shows how each set of related records forms an instance of the &quot;organization&quot; resource.</p>
<blockquote>

</blockquote>
<p><img src="static/component_model3_1.png" /> </p>
<p>The database tables which are involved in a <em>resource</em> are called &quot;components&quot; of the <em>resource</em>. There is always one &quot;master&quot; component, typically containing the basic details, for example, a name or identification of the entity which the resource describes. </p>
<p>In the user interface, the resource concept is typically represented by navigation tabs:</p>
<p><img src="static/component_tabs.png" /></p>
<p>This shows the &quot;Organization&quot; <em>resource</em>, with its <em>components</em> as navigation tabs. Each tab handles a set of records in a different database table. All the records in all of the tabs together form the &quot;Organization&quot; resource.</p>
<p>The Sahana Eden Framework provides a set of integrated tools for the implementation of resources<em> </em>and resource methods such as CRUD (create, read, update, delete), Search, Mapping and Reporting, Data Export and Import as well as Web Services. This allows developers to rapidly develop new solutions or adapt existing modules to new requirements.<br />
</p>
<p><span id="ch028_mapping-gis.xhtml"></span></p>
<h1>Mapping &amp; GIS</h1>
<p>Seeing data located on a Map helps decision makers to be able to make more meaningful decisions. Sahana Eden's Mapping Client can combine data from both it's own database &amp; a range of external sources to provide a rich environment for display and analysis.</p>
<p>The GIS community within Sahana which has it's own home on the wiki:</p>
<p><a href="http://eden.sahanafoundation.org/wiki/GIS" class="uri">http://eden.sahanafoundation.org/wiki/GIS</a><br />
</p>
<h2>Map Viewing Client</h2>
<p>Sahana Eden's mapping client is based on <a href="http://openlayers.org">OpenLayers</a> &amp; <a href="http://geoext.org">GeoExt</a>.</p>
<p>OpenLayers provides access to a wide range of data sources, from public services like OpenStreetMap, Google Maps &amp; Bing Maps through to GIS services based on OGC standards like WMS &amp; WFS or feeds from other systems exposed as KML or GeoRSS.</p>
<p>GeoExt provides UI widgets to allow the user to interface with the map.</p>
<p><img src="static/Map%20Client%20PK.png" /><br />
</p>
<h2>Map Service Catalog</h2>
<p>These different 'Layers' are defined in Sahana Eden's 'Map Service Catalog', from which users can select which layers should be active in the client.</p>
<p>Map Layers using data from within the database simply requests the data through Web Services formatted as GeoJSON.</p>
<p>If multiple markers appear at the same location then they are 'clustered' together.</p>
<p>A 'refresh' strategy is available to reload the layer periodically so that a wall-mounted display can just reload the active layer(s) rather than the static basemap.</p>
<h2>Spatial Infrastructure</h2>
<p>Sahana Eden's mapping features are even more powerful when coupled with a <a href="http://geoserver.org/">GeoServer</a> installation as this can expose many different data sources, such as Shapefiles or Topography Rasters, as WMS or WFS for ready display in Sahana.</p>
<p>Another very useful tool to complete an infrastructure is <a href="http://mapproxy.org">MapProxy</a> as this allows WMS layers from external sources to be reprojected to be compatible with other data sources (typically allowing a WGS84 service to be accessible as an overlay with a Spherical Mercator basemap, such as OpenStreetMap or Google Maps).</p>
<div class="tip">
<p>Tip: Sahana Eden supports multiple Projections, but can only display one at a time!</p>
</div>
<p>This combination is what is used for the IFRC's Resource Mapping System.</p>
<h2>Configuration</h2>
<p>The initial configuration is defined in models/000_config.py. This then populates the gis_config table which is where subsequent modification should be done for this instance.</p>
<p>The system configuration can be inherited for both Personal configurations &amp; Event configurations.  There is also the option for Country-based configurations to store the labels for the different levels of the hierarchy.<br />
</p>
<p>Currently the selection of active layers from the Catalog is global, but this is planned to be made per-Config.<br />
</p>
<h2>Location Hierarchy</h2>
<p>All locations are stored in the gis_location table, to which other resources link through the location_id() reusable field (foreign key). The location records are hierarchical through the use of 'parent' &amp; 'path' fields. There are optimised routines in modules/s3/s3gis.py to populate &amp; search these fields. This hierarchy is flexible to accomodate different countries:</p>
<ul>
<li>L0: Country</li>
<li>L1: State or Province<br />
</li>
<li>L2: District or County<br />
</li>
<li>L3: City, Town or Village<br />
</li>
<li>L4: Neighborhood<br />
</li>
</ul>
<h2>Location Selector</h2>
<p>A Location Selector widget allows a simple location_id() reusable field in a source to provide an inline form to be able to select existing locations or create new ones, which includes the hierarchy &amp; the ability to pinpoint the location on a Map, the rough position for which can be obtained through either GeoCoding (lookup of the entered street address or hierarchy) or GeoLocation (detection of the current user's location by the browser).</p>
<p>The widget is defined in modules/s3/s3widgets.py.</p>
<p>This makes use of JavaScript in static/scripts/S3/s3.locationselector.widget.js.<br />
(Remember that any edits won't be visible unless you are running in debug mode or run the build script &amp; refresh your browser cache)<br />
</p>
<h2>API</h2>
<p>As well as the main Mapping Client, there is an API to allow developers to be able to display customised data output relevant to a specific module on the Map.</p>
<p>This functionality is avaialble via the GIS module's show_map() function.</p>
<p>A simple example for a controller function would be:<br />
</p>
<pre><code>table = db.mymodule_myresource
query = (table.id &gt; 0) &amp; \
        (db.gis_location.id == table.location_id)
rows = db(query).select()
queries = [{name: &quot;MyLayer&quot;,
            query: rows}]
map = gis.show_map(feature_queries=queries)
return dict(map=map)</code></pre>
<p>&amp; the view would include:</p>
<pre><code>{{=XML(map)}}</code></pre>
<p>Full documentation for this API can be found in the source code or on the wiki:</p>
<p><a href="http://eden.sahanafoundation.org/wiki/DeveloperGuidelinesGIS" class="uri">http://eden.sahanafoundation.org/wiki/DeveloperGuidelinesGIS</a><br />
</p>
<h2>Future Plans<br />
</h2>
<p>There are plans to make use of optimised Spatial Queries when PostGIS is available by extending Web2Py's DAL. This will open up a range of possibilities for deeper analysis.</p>
<p>The Cube (pivot table) output is planned to be displayable on Maps - as both Shaded Polygons and Popups within centroid Markers containing the charts for that area.</p>
<p>The connection to GeoServer could be made more transparent by making use of it's REST API.</p>
<p>We could include a tool to be able to browse &amp; select WMS services, auto-configuring an associated MapProxy to reproject, if-necessary.<br />
</p>
<p><span id="ch029_scheduler.xhtml"></span></p>
<h1>Scheduler</h1>
<p>The Scheduler allows non-interactive tasks to be run at specific times, repeatedly at regular intervals or once asynchronously for responsiveness of the user interface. This is required e.g. for Synchronization and Messaging.</p>
<p>The Scheduler is run as a separate web2py &quot;worker&quot; process.</p>
<p>It is normally run from /etc/rc.local as:</p>
<p>cd ~web2py &amp;&amp; python web2py.py -K eden -Q &gt;/dev/null 2&gt;&amp;1 &amp;</p>
<p>Tip: This should normally be set to run automatically by the Installation Script.</p>
<p>Scheduler logs can be checked using the appadmin interface:</p>
<p>http://host.domain/eden/appadmin/select/db?query=db.scheduler_run.id%3E0</p>
<p><span id="ch030_synchronization.xhtml"></span></p>
<h1>Synchronization</h1>
<p>The Synchronization module allows the synchronization of data resources between Sahana Eden instances. Synchronization jobs can be configured to be run automatically in the background and at regular intervals, without disrupting the current operation of the sites.<br />
<br />
This module is part of the site administration module, and requires administrator privileges to view or modify its configuration. The synchronization module requires web2py revision 3566 (1.99.0) or newer.</p>
<h2>Overview</h2>
<p>The synchronization process is controlled entirely by the &quot;active&quot; Sahana Eden instance (master instance).<br />
<br />
The active Eden instance runs the scheduler process, and initiates the update requests when they are due, while the passive repository (slave instance) merely responds to these requests.<br />
<br />
<img src="static/sync.png" /><br />
<br />
The active Eden instance first downloads the available updates from the passive repository (<em>pull</em>) and imports them into the local database, and then uploads all available updates from the local database to the passive repository (<em>push</em>).<br />
<br />
Both <em>pull</em> and <em>push</em> are each a RESTful HTTP-request, using S3XML as data format.<br />
</p>
<h2>Synchronization Homepage</h2>
<p>Login as administrator and open the <em>Administration</em> menu. In the left menu, you will then find the following entries:<br />
<br />
<img src="static/sync_menu.png" /><br />
<br />
Click on <em>Synchronization</em> here to open the homepage of the Synchronization Module:<br />
<br />
<img src="static/sync_homepage.png" /><br />
</p>
<h2>Configuration</h2>
<p>Follow this checklist to configure synchronization:<br />
</p>
<p>  1. Check the <strong>Prerequisites</strong><br />
  2. Make sure the <em>passive</em> site is up and running, and reachable over the network<br />
  3. Login as administrator at the <em>active</em> site and<br />
     1. Configure the default proxy server in <strong>Synchronization Settings</strong> as needed<br />
     2. Register the passive site in <strong>Repository Configuration</strong><br />
     3. Configure the resources to synchronize in <strong>Resource Configuration</strong><br />
     4. Set up the <strong>Synchronization Schedule</strong><br />
  4. Ensure you have a <strong>Worker</strong> process running at the <em>active</em> site</p>
<h3>Prerequisites</h3>
<p>Both sites must have Sahana Eden installed and running. To avoid problems with different database structures, both Sahana Eden instances should always use the same version of the software.</p>
<blockquote>
<div class="tip">
Important: It is important that the <strong>system clocks</strong> in both sites are <strong>synchronized</strong> with each other, which can best be achieved by synchronizing both sites with the same NTP service.
</div>
</blockquote>
<p>Decide which one is the <em>active</em> and which one is the <em>passive</em> instance. The <em>passive</em> instance is typically a permanently and publicly accessible Sahana Eden instance, while the <em>active</em> instance could be a protected Eden installation (e.g. behind a firewall), or one with only temporary network access (e.g. on a notebook).<br />
<br />
While performing synchronization jobs, the ''active'' site must be able to establish a connection to the ''passive'' site over the network using HTTP (or HTTPS).<br />
<br />
If a proxy server has to be used for the HTTP connection, this can be configured in the Synchronization Settings (proxy authentication is currently not supported).<br />
<br />
Check that both instances have the synchronization module enabled in the private/templates/&lt;templatename&gt;/config.py file. If the sync section is missing from the settings.modules dict, then add it as follows:<br />
<br />
</p>
<pre><code>settings.modules = OrderedDict([
    ...
    # Add or uncomment this section, if it is missing or commented:
    (&quot;sync&quot;, Storage(
            name_nice = T(&quot;Synchronization&quot;),
            description = T(&quot;Synchronization&quot;),
            restricted = True,
            access = &quot;|1|&quot;,     # Only Administrators can see this module in the default menu &amp; access the controller
            module_type = 0     # This item is handled separately for the menu
        )),
    ...
])</code></pre>
<h3>Synchronization Settings</h3>
<p>Go to the <strong>Synchronization Homepage</strong> and click <em>Settings</em> to open this page:<br />
<br />
<img src="static/sync_config.png" /><br />
<br />
This page shows you the <em>UUID</em> (universally unique identifier) of the repository you are logged in at. You will need this identifier to register the repository at a peer site. The <em>UUID</em> is created during the first run of a Sahana Eden instance, and cannot be changed.<br />
<br />
If needed, enter the complete URL of the proxy server (including port number if not 80) that is to be used when connecting to the <em>passive</em> site (this is only necessary at the <em>active</em> site). Click <em>Save</em> to update the configuration.<br />
</p>
<h3>Repository Configuration<br />
</h3>
<p>Go to the <strong>Synchronization Homepage</strong> and click <em>Repositories</em>. This will show you a list of all currently configured repositories:<br />
<br />
<img src="static/sync_repository.png" /><br />
<br />
To view and/or modify the configuration for a repository, click the <em>Open</em> button in the respective row in the list.<br />
<br />
By clicking <em>Add Repository</em>, you can register a new repository:<br />
<br />
<img src="static/sync_repository_add.png" /><br />
<br />
Fill in the fields as follows:</p>
<table>
<tbody>
<tr class="odd">
<td><strong>Field</strong></td>
<td> <strong>Instructions</strong></td>
<td><strong>at the active site</strong></td>
<td><strong>at the passive site</strong></td>
</tr>
<tr class="even">
<td>Name</td>
<td>Enter a name for the repository(for your own reference)</td>
<td>required</td>
<td> required</td>
</tr>
<tr class="odd">
<td>URL</td>
<td>Enter the URL of the repository (base URL of the Sahana Eden instance, e.g. http://www.example.org/eden)</td>
<td>required</td>
<td> </td>
</tr>
<tr class="even">
<td>Username</td>
<td>Enter the username to authenticate at the repository</td>
<td> required</td>
<td> </td>
</tr>
<tr class="odd">
<td>Password</td>
<td>Enter the password to authenticate at the repository</td>
<td> required</td>
<td><br />
</td>
</tr>
<tr class="even">
<td>Proxy Server</td>
<td>Enter the URL of a proxy server to connect to the repository, if different from the <strong>Synchronization Settings</strong></td>
<td> fill in as needed</td>
<td> </td>
</tr>
<tr class="odd">
<td>Accept Pushes</td>
<td>check this if the repository is allowed to push updates</td>
<td> </td>
<td> set as needed</td>
</tr>
<tr class="even">
<td>UUID</td>
<td>Enter the UUID from the <strong>Synchronization Settings</strong> of the repository</td>
<td> required</td>
<td> required</td>
</tr>
</tbody>
</table>
<h3>Resource Configuration</h3>
<p>Go to the <strong>Synchronization Homepage</strong>, click <em>Repositories</em>, then <em>Open</em> the repository you want to configure a resource for, and change to the <em>Resources</em> tab:<br />
<br />
<img src="static/sync_resource_add.png" /><br />
<br />
Fill in the fields as follows:<br />
</p>
<table>
<tbody>
<tr class="odd">
<td><strong>Field</strong></td>
<td><strong>Instructions</strong></td>
<td><strong>Example</strong></td>
</tr>
<tr class="even">
<td>Resource Name</td>
<td>Fill in the name of the master table of the resource. Details can be found in the documentation for the data model of your Sahana Eden application</td>
<td>req_req<br />
</td>
</tr>
<tr class="odd">
<td>Mode</td>
<td>Select the synchronization mode you wish to activate - pull, push or both. See <strong>Method Overview</strong> to understand the mode</td>
<td>pull and push</td>
</tr>
<tr class="even">
<td>Strategy</td>
<td>Choose the import methods you wish to allow for the synchronization of this resource</td>
<td>create, update, delete</td>
</tr>
<tr class="odd">
<td>Update Policy</td>
<td>Choose in which situation records shall be updated, see explanations below</td>
<td>NEWER</td>
</tr>
<tr class="even">
<td>Conflict Policy</td>
<td>Choose in which situation records shall be updated in case of conflicts, see explanations below</td>
<td>NEWER</td>
</tr>
</tbody>
</table>
<h4>Update Policy</h4>
<p>If a record has been modified in one of the repositories, then the synchronization process has to decide whether to update the other repository with the new data or not. For this decision you can define a policy:<br />
</p>
<table>
<tbody>
<tr class="odd">
<td><strong>Policy</strong></td>
<td><strong>Meaning</strong></td>
</tr>
<tr class="even">
<td>THIS</td>
<td>Always update the remote repository with the local version of the record (overwrite remote updates)</td>
</tr>
<tr class="odd">
<td>NEWER</td>
<td>Update both repositories to the newest version of the record (keep the newer data)</td>
</tr>
<tr class="even">
<td>MASTER</td>
<td>Update the record on either side only if the other side has originated the record (keep the master data)</td>
</tr>
<tr class="odd">
<td>OTHER</td>
<td>Always update the local repository with the remote version of the record (overwrite local updates)</td>
</tr>
</tbody>
</table>
<p><br />
Usually, you would choose &quot;NEWER&quot; here unless you have a good reason to do otherwise.<br />
</p>
<h4>Conflict Policy</h4>
<p>If a record has been modified both in the local repository <em>and</em> the remote repository since the last synchronization time, then this is called a <em>conflict</em> situation, in which two concurrent record updates are available at the same time. You can define a policy for which of the updates to apply, similar to the <strong>Update Policy</strong>.<br />
<br />
If you do not know what to select here, it is reasonable to choose the same option as for the <strong>Update Policy</strong>.<br />
</p>
<h4>Policy Transfer</h4>
<p>In most situations, you would want both repositories to apply the same policies. This is the default behavior - the policies from the active site are reported to the passive site during the synchronization, and are applied there as well (THIS and OTHER are replaced by the respective opposite at the passive site, of course).<br />
<br />
If for some reason you need to define different policies at the passive site, then you have to configure the same resource at the passive site as well, and choose the policies explicitly.<br />
</p>
<h3>Synchronization Schedule</h3>
<p>Go to the <strong>Synchronization Homepage</strong>, click <em>Repositories</em>, then <em>Open</em> the repository configuration you want to schedule a synchronization job for and change to the <em>Schedule</em> tab. If there are already jobs configured for this repository, you will see a list of those jobs. Otherwise (or by clicking <em>Add Job</em>), you get to this form:<br />
<br />
<img src="static/sync_schedule_add.png" /><br />
<br />
With every <em>Job</em>, all resources configured for this repository will be synchronized.<br />
<br />
Fill in the fields as follows:</p>
<table>
<tbody>
<tr class="odd">
<td> <strong>Field</strong></td>
<td> <strong>Instructions</strong></td>
<td> <strong>Example</strong></td>
</tr>
<tr class="even">
<td> Enabled</td>
<td> Set to True if the job shall actually be run, or set False to disable the job</td>
<td> True</td>
</tr>
<tr class="odd">
<td> Start Time</td>
<td> Select date and time for the first run of this job (UTC)</td>
<td> 2011-09-21 08:30</td>
</tr>
<tr class="even">
<td> End Time</td>
<td> Select date and time after which the job shall not be run anymore (UTC)</td>
<td> 2012-09-21 08:30</td>
</tr>
<tr class="odd">
<td> Repeat <em>n</em> times</td>
<td> Select how often the job shall be run, set to 0 to set no limit</td>
<td> 0</td>
</tr>
<tr class="even">
<td> Run every</td>
<td> Select the time interval after which to repeat the job</td>
<td> 5 minutes</td>
</tr>
<tr class="odd">
<td> Timeout</td>
<td> Set a maximum time after which to abort the action</td>
<td> 600 seconds</td>
</tr>
</tbody>
</table>
<p><br />
</p>
<p>If you need to switch between jobs (e.g. for maintenance periods, low-traffic periods), you can set up multiple schedules, and disable/enable them as needed.</p>
<h4>To consider:</h4>
<p>You should choose meaningful time interval and timeout settings: the more resources are to be synchronized, the longer it will take (in this regard, also note that THIS- and OTHER-policies will always exchange all records in a resource, thus taking significantly longer).<br />
<br />
How many records have to be exchanged per run depends on the average update frequency and the time interval between synchronizations: e.g. if there are on average 100 record updates per minute, and you set a 2-minute interval, then there would be 200 records on average to be transmitted every run. The import rate on a small server has been tested at on average 18 records/second, which means, the synchronization process would take around 11 seconds in this case. To be on the safe side, choose a timeout value at least 10 times as high as that - e.g. 120 seconds.<br />
<br />
Note that the network traffic arising from synchronization does not mainly depend on the frequency of synchronization, but on the record update rate at the sites. Smaller synchronization intervals would increase the traffic only slightly, but reduce the rate of conflicts and the risk of network-related problems. However, too small intervals (below the update rate of the site) may cause unnecessary network traffic with just empty transmissions.<br />
</p>
<h3>Worker</h3>
<p>The scheduled synchronization jobs are performed by a separate asynchronous web2py <em>worker</em> process at the <em>active</em> site. Make sure the worker process for the Scheduler is running at the active site, see chapter on Scheduler.</p>
<h2>Synchronization Log</h2>
<p>Go to the <strong>Synchronization Homepage</strong> and click <em>Log</em>. This shows you a list of all prior log entries for all repositories.<br />
<br />
If you instead want to see the log entries only for a particular repository, go to the Synchronization Homepage, click <em>Repositories</em>, then <em>Open</em> the respective repository configuration and go to the <em>Log</em> tab:<br />
<br />
<img src="static/sync_repository_log.png" /> Note: the newest entries are shown on top of the list.</p>
<p>Click on <em>Details</em> for a log entry to see the complete entry:<br />
<br />
<img src="static/sync_repository_log_entry.png" /><br />
<br />
Read the entries as follows:<br />
</p>
<table>
<tbody>
<tr class="odd">
<td><strong>Item</strong></td>
<td><strong>Explanation</strong></td>
</tr>
<tr class="even">
<td>Date/Time</td>
<td>Date and time of the transaction</td>
</tr>
<tr class="odd">
<td>Repository</td>
<td>Name of the repository synchronized with</td>
</tr>
<tr class="even">
<td>Resource Name</td>
<td>Name of the resource synchronized</td>
</tr>
<tr class="odd">
<td>Mode</td>
<td>Transaction mode (pull or push) and direction of transmission (incoming or outgoing)</td>
</tr>
<tr class="even">
<td>Action</td>
<td>Action performed to resolve problems (if any)</td>
</tr>
<tr class="odd">
<td>Result</td>
<td>Result of the transaction</td>
</tr>
<tr class="even">
<td>Remote Error</td>
<td>Was this error at <em>this</em> site or at the repository synchronized with?<br />
</td>
</tr>
<tr class="odd">
<td>Message</td>
<td>The log message</td>
</tr>
</tbody>
</table>
<p><span id="ch031_web-sevices.xhtml"></span></p>
<h1>Web Services</h1>
<p>Web Services in Sahana Eden are implemented as a RESTful API (Application Programming Interface).</p>
<p>This API allows other applications to access and manipulate Sahana Eden data resources directly over the web using the HTTP protocol, which means:</p>
<ul>
<li>URLs to address resources</li>
<li>HTTP requests to perform actions and transfer data</li>
<li>HTTP method verbs (GET, PUT, POST, DELETE) to specify the actions to be performed<br />
</li>
<li>HTTP status codes to report status and errors</li>
</ul>
<p>A powerful query language is available to address particular data elements:</p>
<pre><code>/eden/pr/person?person.first_name__like=Miriam
(all person records where the first name contains &quot;Miriam&quot;)</code></pre>
<p>...or to specify method parameters:</p>
<pre><code>/eden/org/office/analyze?col=location_id&amp;row=type&amp;fact=name&amp;aggregate=group_concat

(a pivot table of offices grouped by facility type vs. location)</code></pre>
<p>The RESTful API uses Sahana Eden's native S3XML format for data exchange. Other XML or JSON formats are supported using on-the-fly XSLT transformation - Sahana Eden provides built-in XSLT stylesheets for a variety of XML standards (e.g. KML, EDXL-HAVE), and can also accept custom stylesheets.</p>
<h2>URL Format<br />
</h2>
<h3>Basic URL Syntax</h3>
<p>Example of a URL to address a resource in the Sahana Eden RESTful API:<br />
</p>
<blockquote>

</blockquote>
<pre><code>http://vita.sahanafoundation.org/eden/hms/hospital/1/bed_capacity/create</code></pre>
<p>The basic URL format is:</p>
<p><em>(Parts in { } are optional, [ A | B ] indicates alternatives)</em><br />
</p>
<pre><code>http:// server / path / prefix / name { /&lt;arguments&gt; }{ ?&lt;query&gt; }</code></pre>
<blockquote>

</blockquote>
<blockquote>

</blockquote>
<p><em></em></p>
<ul>
<li><strong>server</strong> (<em>vita.sahanafoundation.org</em>) is the server domain name<br />
</li>
<li><strong>path</strong> (<em>/eden</em>) the path to the application</li>
</ul>
<ul>
<li><strong>prefix</strong> (<em>/hms</em>) is the name (prefix) of the Sahana Eden module</li>
<li><strong>name</strong> (<em>/hospital</em>) is the resource name</li>
</ul>
<p>The <strong>&lt;arguments</strong>&gt; list consists of:</p>
<blockquote>

</blockquote>
<pre><code>{ /id }{ / [ method | component { /component_id } { /method } ] } {.format}</code></pre>
<blockquote>

</blockquote>
<ul>
<li><strong>id</strong> (<em>/1</em>) is a record ID in the master table of the resource</li>
<li><strong>component</strong> (<em>/bed_capacity</em>) is a component name</li>
<li><strong>component_id</strong> is a record ID in the component</li>
<li><strong>method</strong> (<em>/create</em>) is a method of the resource</li>
<li><strong>format</strong> specifies the requested data format (e.g.: <em>&quot;.xml</em>&quot; for S3XML)<br />
</li>
</ul>
<p>For the <strong>&lt;query&gt;</strong> syntax, see the following section.</p>
<h3 id="ch031_web-sevices.xhtml#BasicQueryFormat">Basic Query Format</h3>
<p>Example of a URL query:</p>
<pre><code>?hospital.name__like=Example%20Hospital</code></pre>
<p>...as part the complete URL:</p>
<pre><code>http://vita.sahanafoundation.org/eden/hms/hospital?hospital.name__like=Example%20Hospital</code></pre>
<p>The basic query format is:</p>
<pre><code>?resource.{foreign key$}field{operator}=value(s)</code></pre>
<ul>
<li><strong>resource</strong> (<em>hospital</em>) is the name of the component, followed by a period (.)</li>
<li><strong>foreign key</strong> is the name of the foreign key field followed by a dollar sign (to filter against a value in the table referenced by this foreign key)</li>
<li><strong>field</strong> (<em>name</em>) is the name of the field in the target table</li>
<li><strong>operator</strong> (<em>__like</em>) is the operator</li>
<li><strong>value(s)</strong> (<em>Example%20Hospital</em>) is the value or a comma-separated list of values to test against (a comma will be treated as an OR)</li>
</ul>
<p><em>Note that special characters in values must be properly URL-encoded (the %20 in this example stands for a blank).</em><br />
</p>
<p>Supported operators:</p>
<table>
<tbody>
<tr class="odd">
<td><strong>Operator</strong></td>
<td><strong>Method</strong></td>
<td><strong>Comments</strong></td>
</tr>
<tr class="even">
<td>__eq</td>
<td>equal, =</td>
<td>can be omitted</td>
</tr>
<tr class="odd">
<td>__ne</td>
<td>not equal, !=</td>
<td></td>
</tr>
<tr class="even">
<td>__lt</td>
<td>less than, &lt;</td>
<td>numeric and date/time types only</td>
</tr>
<tr class="odd">
<td>__le</td>
<td>less than or equal, &lt;=</td>
<td>numeric and date/time types only</td>
</tr>
<tr class="even">
<td>__gt</td>
<td>greater than, &gt;</td>
<td>numeric and date/time types only</td>
</tr>
<tr class="odd">
<td>__ge</td>
<td>greater than or equal, &gt;=</td>
<td>numeric and date/time types only</td>
</tr>
<tr class="even">
<td>__like</td>
<td>wildcard comparison, LIKE(%value%)</td>
<td>string/text types only</td>
</tr>
<tr class="odd">
<td>__unlike</td>
<td>negative wildcard comparison, NOT LIKE(%value%)</td>
<td>string/text types only</td>
</tr>
<tr class="even">
<td>__in</td>
<td>containment, contains(value)</td>
<td>list types only</td>
</tr>
<tr class="odd">
<td>__ex</td>
<td>negative containment, excludes(value)</td>
<td>list types only</td>
</tr>
</tbody>
</table>
<h3>Other Queries<br />
</h3>
<h4>Boundary Box Queries</h4>
<p>For resources with location references (e.g. Hospitals), you can use boundary box queries to select records. The general format of the query variable is:</p>
<pre><code>?bbox=minLon,minLat,maxLon,maxLat</code></pre>
<ul>
</ul>
<p>You can also specify the foreign key field name of the location reference the query relates to (e.g. in case there are multiple location references in that resource):</p>
<pre><code>?bbox.FKFieldName=minLon,minLat,maxLon,maxLat</code></pre>
<ul>
</ul>
<p>Examples:</p>
<pre class="wiki"><code>/hms/hospital?bbox=123,13.5,124,13.7</code></pre>
<pre class="wiki"><code>/hms/hospital?bbox.location_id=123,13.5,124,13.7</code></pre>
<h3 id="ch031_web-sevices.xhtml#URLExamples">URL Examples</h3>
<h4 id="ch031_web-sevices.xhtml#InteractiveHTMLFormat">Interactive (HTML) Format</h4>
<p>All &quot;person&quot; records in the Person Registry module (pr):<br />
</p>
<pre><code>http://localhost:8000/eden/pr/person </code></pre>
<h4 id="ch031_web-sevices.xhtml#Non-interactiveFormats">Non-interactive Formats</h4>
<p>All &quot;person&quot; records in the Person Registry module (pr), in other data formats:</p>
<pre><code>http://localhost:8000/eden/pr/person.pdf
http://localhost:8000/eden/pr/person.rss
http://localhost:8000/eden/pr/person.xml</code></pre>
<h4 id="ch031_web-sevices.xhtml#RecordbyID">Record by ID</h4>
<pre><code>http://localhost:8000/eden/pr/person/1
http://localhost:8000/eden/pr/person/1.pfif
http://localhost:8000/eden/pr/person/1.xml</code></pre>
<h4>Record by UUID</h4>
<pre><code>http://localhost:8000/eden/pr/person?person.uuid= urn:uuid:839bab5a-a401-4be3-8616-27fbc1810ef4</code></pre>
<h4 id="ch031_web-sevices.xhtml#URLQueries">URL Queries</h4>
<pre><code>http://localhost:8000/eden/pr/person?person.id=1,2,3

http://localhost:8000/eden/org/office?office.type=None,1,2&amp;office.obsolete=False

http://localhost:8000/eden/org/office?office.modified_on__gt=20110926T10:00:00</code></pre>
<div class="tip">
Note that in URL queries, date/time values must be in UTC and use the ISO-8601 combined format YYYMMDD<strong>T</strong>hh:mm:ss.
</div>
<h2>Standard Methods</h2>
<p>Standard methods include:</p>
<ul>
<li>interactive create, read, update and delete (CRUD) including list views</li>
<li>data export/import in various formats, including on-the-fly transformation</li>
</ul>
<p><strong>Note</strong>:</p>
<ul>
<li>in XML and JSON, resources are always exported/imported including all their components and referenced resources.</li>
<li>in all other formats, the components need to be addressed separately</li>
</ul>
<h3 id="ch031_web-sevices.xhtml#GET">GET</h3>
<h4 id="ch031_web-sevices.xhtml#InteractiveFormats">Interactive Formats</h4>
<p>Interactive formats are HTML (Extension &quot;.html&quot;), or PLAIN (Extension &quot;.plain&quot;). If no format extension is specified, HTML format is assumed.<br />
</p>
<ul>
<li>without <strong>method</strong> specified in the URL:
<ul>
<li>if no record ID in the URL: <strong>list</strong> view of the resource</li>
<li>with a record ID in the URL: <strong>read</strong> view of the specified record (if the user is permitted to update the record, an <strong>update</strong> form returned instead)</li>
</ul></li>
</ul>
<blockquote>
<p><em>Example:</em> <strong>read</strong> view of the person record #1:</p>
<pre class="wiki"><code>http://localhost:8000/eden/pr/person/1</code></pre>
</blockquote>
<ul>
<li>with <strong>method</strong> specified in the URL:
<ul>
<li>method <strong>create</strong> returns a create-form</li>
<li>method <strong>read</strong> returns a view of the specified record (other than with blank method, no update form is returned in this case)</li>
<li>method <strong>update</strong> returns an update form for the specified record</li>
<li>method <strong>delete</strong> returns a delete confirmation form together with a list of the specified records (if there is exactly one record identified by its ID in the URL, then the record will be deleted instead of a form being returned, see POST)</li>
</ul></li>
</ul>
<blockquote>
<p><em>Example:</em> <strong>create</strong> form for a new person record:</p>
<pre class="wiki"><code>http://localhost:8000/eden/pr/person/create</code></pre>
</blockquote>
<ul>
<li>some resources support other methods, e.g.
<ul>
<li><strong>search</strong> returns a search form for the resource<br />
</li>
</ul></li>
</ul>
<blockquote>
<p><em>Example:</em> <strong>search</strong> for a person by name or ID:</p>
<pre class="wiki"><code>http://localhost:8000/eden/pr/person/search</code></pre>
</blockquote>
<h4 id="ch031_web-sevices.xhtml#Non-interactiveformats">Non-interactive formats</h4>
<p>Any format extension that is not listed under the interactive formats, is treated as non-interactive.<br />
</p>
<ul>
<li>without <strong>method</strong> in the URL:
<ul>
<li>returns all matching records in the specified format</li>
</ul></li>
</ul>
<blockquote>
<p><em>Example:</em> all <code>person</code> records the user is allowed to read, in S3XML format:</p>
<pre class="wiki"><code>GET http://localhost:8000/eden/pr/person.xml</code></pre>
</blockquote>
<ul>
<li>with <strong>method</strong> in the URL:
<ul>
<li>method <strong>create</strong> or <strong>update</strong> returns a schema document of the resource</li>
<li>method <strong>create</strong> or <strong>update</strong> together with a source imports the data into the specified resource (see chapter S3XML)<br />
</li>
<li>method <strong>options</strong> returns a field options document of the resource<br />
</li>
<li>other methods are not supported<br />
</li>
</ul></li>
</ul>
<blockquote>
<p><em>Example:</em> get a schema document of the person resource:</p>
<pre class="wiki"><code>GET http://localhost:8000/eden/pr/person/create.xml</code></pre>
</blockquote>
<ul>
<li>XLS and PDF formats work read-only (create/update/delete being ignored)</li>
</ul>
<h3 id="ch031_web-sevices.xhtml#POST">POST</h3>
<h4 id="ch031_web-sevices.xhtml#InteractiveFormats1">Interactive Formats</h4>
<ul>
<li>performs the respective <strong>method</strong> (if specified in the request)
<ul>
<li>method <strong>create</strong> creates a new record</li>
<li>method <strong>update</strong> updates the specified record</li>
<li>method <strong>delete</strong> deletes the specified record</li>
</ul></li>
<li>expects the form data as multi-part request body</li>
</ul>
<h4 id="ch031_web-sevices.xhtml#Non-interactiveFormats">Non-interactive Formats</h4>
<ul>
<li>enters an interactive review of the source data before importing the data into the resource<br />
</li>
</ul>
<h3 id="ch031_web-sevices.xhtml#PUT">PUT</h3>
<h4 id="ch031_web-sevices.xhtml#Interactiveformats">Interactive formats</h4>
<ul>
<li>see POST</li>
</ul>
<h4 id="ch031_web-sevices.xhtml#Non-interactiveformats1">Non-interactive formats</h4>
<ul>
<li>import data from the request body (which must be in the specified format) into the resource</li>
<li>records being matched by the UIDs specified in the data, while any record IDs in the URL restrict the selection</li>
</ul>
<h3 id="ch031_web-sevices.xhtml#DELETE">DELETE</h3>
<ul>
<li>deletes those of the addressed records which are deletable by the current user</li>
</ul>
<h2>Authorization</h2>
<p>It is possible to access privileged resources by providing the username/password within each request, rather than the usual method of having the login stored within the session.</p>
<p>The RESTful API supports HTTP Basic Authentication (<a href="http://en.wikipedia.org/wiki/Basic_access_authentication" class="uri">http://en.wikipedia.org/wiki/Basic_access_authentication</a>).</p>
<p>Note: for some command-line tools like <em>wget</em> or <em>RESTClient</em> you might need to additionally activate an option for pre-emptive authentication (unsolicited sending of credentials). E.g. for <em>wget</em>, use the <em>--auth-no-challenge</em> option.</p>
<h3 id="ch031_web-sevices.xhtml#AJAX">AJAX Examples</h3>
<p>Here some examples how to add the HTTP Basic Authentication header to AJAX requests:<br />
</p>
<pre class="wiki"><code>function make_base_auth(user, password) {
 var tok = user + &#39;:&#39; + pass;
 var hash = Base64.encode(tok);
 return &#39;Basic &#39; + hash;
}

var auth = make_basic_auth(&#39;username@example.com&#39;, &#39;password&#39;);
var url = &#39;http://host.domain/eden/controller/function?vars&#39;;

// RAW
request = new XMLHttpRequest();
request.setRequestHeader(&#39;Authorization&#39;, auth);
request.open(&#39;PUT&#39;, url, true); // async=true
request.send(bodyContent);

// ExtJS
Ext.Ajax.request({
    url : url,
    method : &#39;GET&#39;,
    headers : { Authorization : auth }
});

// jQuery
$.ajax({
    url : url,
    method : &#39;GET&#39;,
    beforeSend : function(req) {
        req.setRequestHeader(&#39;Authorization&#39;, auth);
    }
});</code></pre>
<h2 id="ch031_web-sevices.xhtml#ErrorHandling">Error Handling</h2>
<p>The HTTP status code in the response indicates the success or failure of a request:</p>
<table>
<tbody>
<tr class="odd">
<td><strong>Status Code</strong></td>
<td><strong>Cause</strong></td>
<td> <strong>Response Body</strong></td>
</tr>
<tr class="even">
<td> 200 OK</td>
<td>Success</td>
<td>results or JSON message</td>
</tr>
<tr class="odd">
<td>400 BAD REQUEST</td>
<td>Syntax error or method not supported for the specified resource<br />
</td>
<td>JSON message</td>
</tr>
<tr class="even">
<td>401 UNAUTHORIZED</td>
<td>Authorization required</td>
<td>Clear text error</td>
</tr>
<tr class="odd">
<td>403 FORBIDDEN</td>
<td>Insufficient permissions</td>
<td>Clear text error</td>
</tr>
<tr class="even">
<td>404 NOT FOUND</td>
<td>Non-existent Resource</td>
<td>Clear text error</td>
</tr>
<tr class="odd">
<td>50x</td>
<td>Unrecoverable internal error</td>
<td>Ticket issued or clear text error</td>
</tr>
</tbody>
</table>
<p> </p>
<p>Where a JSON message is returned, it has the following structure:</p>
<pre class="wiki"><code>  {
    success= &quot;True&quot; | &quot;False&quot;,
    statuscode = &quot;XXX&quot;,
    message = &quot;clear text error message&quot;,
    tree = {
      /* element tree */
    }
  }</code></pre>
<p>If there was an input element tree and it contained any errors, a subtree with the invalid elements will be added to the JSON message (&quot;tree&quot;). This subtree is expressed in <a href="http://eden.sahanafoundation.org/wiki/S3XML#JSONFormat1" class="wiki">JSON Format</a>. Invalid elements will have an additional <em>@error</em> attribute containing a clear-text error desription.</p>
<p><strong>Skipping invalid records at import:</strong></p>
<p>By default, an import request will be rolled back (completely) and an HTTP 400 BAD REQUEST error be returned if the source contains any invalid data.</p>
<p>You can override this behavior by using the <em>ignore_errors</em> URL variable (<code>?ignore_errors=True</code>). Invalid records will then be skipped, while the valid records will be committed to the database and the request returns a HTTP 200 OK. The JSON message in the response body would however contain the error message and the element tree with the invalid elements.</p>
<p>Note that ignore_errors applies to Validation Errors only. Any other type of error (e.g. XML syntax error) will be handled as usual (=rollback + error message).</p>
<p>The <em>ignore_errors</em> option is meant for &quot;dirty&quot; data, e.g. cases where you need to import from a source but do not have permission and/or means to clean it up before import. In all other cases, where possible, you should avoid <em>ignore_errors</em> and rather sanitize the source.</p>
<h2>S3XML On-the-fly Transformation<a href="http://eden.sahanafoundation.org/wiki/S3XRC/S3XML/Transformation?action=edit&amp;section=1" class="anchor" title="Edit this section"><span></span></a></h2>
<h1 id="ch031_web-sevices.xhtml#S3XMLOn-the-flyTransformation"></h1>
<p>The Sahana Eden RESTful API can perform XSLT transformation of XML sources into the S3XML format on-the-fly when exporting or importing data.</p>
<p> </p>
<div data-align="center">
<a href="http://eden.sahanafoundation.org/attachment/wiki/S3XRC/S3XML/Transformation/s3xml.png"><img src="static/s3xml.png" /></a><br />

</div>
<p>The XSLT stylesheets to use for this transformation can be:</p>
<ul>
<li>a static file on the server or a web URL</li>
<li>a file attached to the request (at import)</li>
<li>an integrated stylesheet of Eden (folder static/formats)</li>
</ul>
<p><strong>Note:</strong></p>
<ul>
<li>You cannot use the .xml or .json extension if the source is to be transformed. By these extensions, the interface assumes the source is already S3XML.<br />
</li>
<li>Non-XML formats such as PDF or XLS do not support on-the-fly transformation.<br />
</li>
</ul>
<h3>Integrated Transformation Stylesheets<a href="http://eden.sahanafoundation.org/wiki/S3XRC/S3XML/Transformation?action=edit&amp;section=3" class="anchor" title="Edit this section"><span></span></a></h3>
<p>Sahana Eden provides a number of internal XSLT stylesheets for various formats. These will be automatically used if no other stylesheet is specified (fallback). The internal stylesheets reside in:</p>
<ul>
<li>static/formats/&lt;format&gt;/export.xsl to transform S3XML into another format</li>
<li>static/formats/&lt;format&gt;/import.xsl to transform another format into S3XML</li>
</ul>
<p>Example:<br />
</p>
<ul>
<li>static/formats/have/import.xsl transforms EDXL-HAVE (*.have) into S3XML<br />
</li>
<li>static/formats/have/export.xsl transforms S3XML into EDXL-HAVE<br />
</li>
</ul>
<h3>XSLT Stylesheets on the Server<a href="http://eden.sahanafoundation.org/wiki/S3XRC/S3XML/Transformation?action=edit&amp;section=4" class="anchor" title="Edit this section"><span></span></a></h3>
<p>You can use the URL variable <em><code>transform</code></em> to specify a transformation stylesheet at a file system location on the server, e.g.:</p>
<pre class="wiki"><code>http://127.0.0.1:8000/eden/pr/person.pfif?transform=/home/dominic/stylesheets/pfif.xsl</code></pre>
<p>...or at another location on the web,e.g.:<br />
</p>
<pre class="wiki"><code>http://127.0.0.1:8000/eden/pr/person.rss?transform=http://pub.nursix.org/eden/formats/rss.xsl</code></pre>
<p>If you use <em>transform</em> to specify the stylesheet location explicitly, any existing internal stylesheet for the format extension would not be used.<br />
</p>
<p>Note:</p>
<ul>
<li>the Eden web server must be permitted to access the stylesheet without authentication</li>
<li>the request must not use &quot;.xml&quot; as data format extension, otherwise no transformation will be performed at all (<em>transform</em> would be ignored then)</li>
</ul>
<p>This feature is especially useful to create custom feeds to integrate into remote sites, e.g. RSS:</p>
<ul>
<li>create your own <code>rss.xsl</code> to transform S3XML into RSS</li>
<li>place it on a public (e.g. your own) web server, e.g.: <code></code></li>
</ul>
<blockquote>
<pre><code>http://www.example.org/eden-access/rss.xsl</code></pre>
</blockquote>
<ul>
<li><p>provide a feed link to Eden resources using your RSS stylesheet:<br />
</p>
<pre><code>http://edensite.org/eden/hms/hospital.rss?transform=http://www.mysite.org/eden-access/rss.xsl</code></pre></li>
</ul>
<p>This does work with any XML format, e.g. KML - if you wanted to provide a map rather than a feed link.</p>
<h3>Attached XSLT Stylesheets</h3>
<p>For data import, an XSLT stylesheet to transform foreign XML into S3XML can be attached to the request.</p>
<p>The filename of the attached stylesheet is expected to be <code>&lt;resourcename&gt;.xsl</code>, where <code>&lt;resourcename&gt;</code> is the name of the target resource (without module prefix, e.g. <code>person</code> or <code>hospital</code>).</p>
<p>Note:</p>
<ul>
<li><code>document()</code>, <code>xsl:include</code> and <code>xsl:import</code> will need absolute paths in this case (safer to avoid these)</li>
</ul>
<p><span id="ch032_s3xml.xhtml"></span></p>
<h1>S3XML</h1>
<p>S3XML is a data exchange format for Sahana Eden.</p>
<p>S3XML is a meta-format and does not specify any particular data elements. The interface is entirely introspective to the underlying data model, thus the specific constraints defined in the data model also apply for S3XML documents.</p>
<h2>Conventions</h2>
<h3 id="ch032_s3xml.xhtml#NameSpace">Name Space</h3>
<p>In the current implementation of S3XML, no name space identifier shall be used. Where a name space identifier for the native S3XML format is needed (e.g. when embedding S3XML in other XML), it shall be:</p>
<blockquote>
<pre><code>xmlns:s3xml=&quot;http://eden.sahanafoundation.org/wiki/S3XML&quot;</code></pre>
</blockquote>
<ul>
</ul>
<h3>Character Encoding</h3>
<h3 id="ch032_s3xml.xhtml#CharacterEncoding"></h3>
<p>Generally, XML documents can specify their character encoding in the XML header:</p>
<blockquote>
<pre><code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></pre>
</blockquote>
<p>Sources in non-XML formats (JSON, CSV) used with S3XML on-the-fly conversion/transformation are expected to be UTF-8 encoded.</p>
<p>All exported data are always UTF-8 encoded.</p>
<h2>Import Sources</h2>
<p>There are 3 different ways to specify or submit data sources for import:</p>
<h4 id="ch032_s3xml.xhtml#FilesontheServer">Files on the Server</h4>
<p>A source file in the server file system can be specified using the <em>filename</em> URL variable:</p>
<pre class="wiki"><code>PUT http://&lt;server&gt;/&lt;controller&gt;/&lt;resource&gt;.xml?filename=&lt;path&gt;</code></pre>
<p>Multiple files can be specified as list of comma-separated pathnames:</p>
<pre class="wiki"><code>PUT http://&lt;server&gt;/&lt;controller&gt;/&lt;resource&gt;.xml?filename=&lt;path&gt;,&lt;path&gt;</code></pre>
<h4 id="ch032_s3xml.xhtml#URLs">Remote Files</h4>
<p>A source file can be specified by its URL using the <em>fetchurl</em> URL variable:</p>
<pre class="wiki"><code>PUT http://&lt;server&gt;/&lt;controller&gt;/&lt;resource&gt;.xml?fetchurl=&lt;url&gt;</code></pre>
<p>Multiple files can be specified as list of comma-separated pathnames:</p>
<pre class="wiki"><code>PUT http://&lt;server&gt;/&lt;controller&gt;/&lt;resource&gt;.xml?fetchurl=&lt;url&gt;,&lt;url&gt;</code></pre>
<p>Supported protocols are http, ftp and file, where file is interpreted in the server file system context. URLs of different protocols can be mixed.</p>
<p>The specified URLs must be accessible either without authentication, or (if you specify credentials in the URLs) they must support unsolicited HTTP basic authentication - HTTP 403 retries are not handled by the interface.</p>
<p>The URLs must be properly <span class="icon"></span>quoted (see <a href="http://www.w3schools.com/tags/ref_urlencode.asp" class="uri">http://www.w3schools.com/tags/ref_urlencode.asp</a>  for more details), and must not contain commas.</p>
<h4 id="ch032_s3xml.xhtml#RequestAttachments">Request Attachments</h4>
<p>Source files can also be attached to a multipart-request. In this case the file extension of the source file must match the request URL file extension. Multiple files can be attached.</p>
<h4 id="ch032_s3xml.xhtml#MultipleSources">Multiple Sources</h4>
<p>Where multiple sources are specified or attached, they are first converted and transformed one-by-one and then combined into a single element tree before import.</p>
<h2 id="ch032_s3xml.xhtml#DuplicateResolution">Duplicate Resolution</h2>
<p>The S3XML Importer does not handle duplicates within the same source. As the order of elements in the resulting element tree is not defined, and the last update time attribute is not mandatory in source elements, there is no predictable rule of precedence.</p>
<p>Records in the source must not be fractionated, but submitted in one element. Fractions of records will not be merged by the Importer, and which of the fractions finally would be imported is not predictable</p>
<p>Source elements using unique keys are automatically matched with existing records. Where the match is ambiguous (e.g. a set of keys matching multiple existing records), the import element will be rejected as invalid. For certain resources, the server may have additional duplicate finders and resolvers configured. How duplicates are handled by these resolvers, can differ from resource to resource.</p>
<p>The duplicate resolution strategy in standard import mode is to update the existing record with the values from the source record. In synchronization mode the default strategy is to accept/keep the newest data (the last update time attribute is mandatory in this case).</p>
<h2>XML Format</h2>
<h3 id="ch032_s3xml.xhtml#DocumentTypesandStructure">Document Types and Structure</h3>
<p>S3XML defines 3 types of documents:</p>
<table>
<tbody>
<tr class="odd">
<td><strong>Document Type</strong><br />
</td>
<td><strong>Description<br />
</strong></td>
</tr>
<tr class="even">
<td>Schema Documents<br />
</td>
<td>describe the data schema for a resource</td>
</tr>
<tr class="odd">
<td>Field Option Documents<br />
</td>
<td>describe the currently acceptable options for fields in a record<br />
</td>
</tr>
<tr class="even">
<td>Data Documents<br />
</td>
<td>provide the current contents (data) of resources</td>
</tr>
</tbody>
</table>
<p> </p>
<h4 id="ch032_s3xml.xhtml#SchemaDocuments">Schema Documents</h4>
<p><strong>Schema documents</strong> describe the data schema for a resource. Clients can use these documents e.g. for automatic generation of forms.</p>
<p>Schema documents can be retrieved from Sahana Eden by sending an empty GET request (i.e. without source) to the <em>create.xml</em> method of a resource, e.g.:</p>
<pre><code>GET http://localhost:8000/eden/pr/person/create.xml</code></pre>
<p>Document Tree:</p>
<pre class="wiki"><code>&lt;s3xml&gt;
  &lt;resource&gt;
    &lt;field&gt;
    ...
    &lt;resource&gt;
      &lt;field&gt;
      ...
    &lt;/resource&gt;
  &lt;/resource&gt;
&lt;/s3xml&gt;</code></pre>
<p>or (if requested from the <em>fields.xml</em> method):</p>
<pre class="wiki"><code>&lt;fields resource=&quot;name&quot;&gt;
  &lt;field/&gt;
  &lt;field/&gt;
  &lt;field/&gt;
  ...
&lt;/fields&gt;</code></pre>
<p><em>Note:</em></p>
<ul>
<li>These documents can only be requested (GET), but not submitted for import</li>
<li>Schema documents support on-the-fly transformation (see chapter <strong>Web Services</strong>)<br />
</li>
<li>the URL query parameter <code>?options=true</code> adds a list of field options to those fields where options are defined, and combined with the parameter <code>&amp;reference=true</code>, even options for foreign key references will be included</li>
<li>the URL query parameter <code>?meta=true</code> will include the meta fields (as &lt;meta&gt; elements). In data documents, the meta fields appear as attributes of the &lt;resource&gt; element</li>
</ul>
<h4 id="ch032_s3xml.xhtml#FieldOptionDocuments">Field Options Documents<a href="http://eden.sahanafoundation.org/wiki/S3XML?action=edit&amp;section=22" class="anchor" title="Edit this section"><span></span></a></h4>
<p><strong>Field options documents</strong> describe the currently acceptable options for fields in a record. Clients can use these documents e.g. for automatic generation and/or client-side validation of forms.</p>
<p>Field options documents can be requested from Sahana Eden by sending a GET request to the <em>options.xml</em> method of a resource, e.g.:</p>
<pre><code>GET http://localhost:8000/eden/pr/person/options.xml</code></pre>
<p>Document Tree:</p>
<pre class="wiki"><code>&lt;options&gt;
  &lt;select&gt;
    &lt;option&gt;
    &lt;option&gt;
    &lt;option&gt;
    ...
  &lt;/select&gt;
  &lt;select&gt;
    ...
  &lt;/select&gt;
  ...
&lt;/options&gt;</code></pre>
<p><em>Note:</em></p>
<ul>
<li>the <em>field</em> URL variable can be used to specify a particular field in the resource, the enclosing &lt;options&gt; element would then be omitted (i.e. &lt;select&gt; becomes root element)</li>
<li>on-the-fly transformation of field options documents is not supported</li>
<li>Field option documents can only be requested (GET), but not submitted for import<br />
</li>
</ul>
<h4 id="ch032_s3xml.xhtml#DataDocuments">Data Documents<a href="http://eden.sahanafoundation.org/wiki/S3XML?action=edit&amp;section=23" class="anchor" title="Edit this section"><span></span></a></h4>
<p><strong>Data documents</strong> provide the current contents (data) of resources.</p>
<p>Data documents can be requested from Sahana Eden by sending a GET request to the URL of the resource, e.g.:</p>
<pre><code>GET http://localhost:8000/eden/pr/person.xml</code></pre>
<p>Data documents can be submitted to Sahana Eden by sending PUT requests to the URL of the resource, e.g.:</p>
<pre><code>PUT http://localhost:8000/eden/pr/person.xml</code></pre>
<p>Note that sending data with POST will enter an interactive review of the source data before importing them, thus POST cannot be used by merely non-interactive clients.<br />
</p>
<p>Document Tree:</p>
<pre class="wiki"><code>&lt;s3xml&gt;
  &lt;resource&gt; &lt;!-- primary resource element --&gt;
    &lt;data&gt; &lt;!-- field data --&gt;
    &lt;data&gt;
    ...
    &lt;resource&gt; &lt;!-- component resource inside the primary resource --&gt;
      &lt;data&gt;
      &lt;data&gt;
      &lt;reference/&gt; &lt;!-- reference --&gt;
      ...
    &lt;/resource&gt;
    &lt;reference/&gt; &lt;!-- reference --&gt;
    &lt;reference&gt; &lt;!-- reference with embedded resource element --&gt;
       &lt;resource&gt;
         &lt;data&gt;
         ...
       &lt;/resource&gt;
    &lt;/reference&gt;
  &lt;/resource&gt;
&lt;/s3xml&gt;</code></pre>
<h4 id="ch032_s3xml.xhtml#Components">Components</h4>
<p>Components of resources are &lt;resource&gt; elements nested inside the master &lt;resource&gt; element. Component records will be automatically imported and the required key references be added (=no explicit reference-element required).</p>
<p>Foreign key references of component records to their primary record will not be exported, and where they appear in import sources, they will be ignored.</p>
<p>Components of components are not allowed (maximum depth 1), and where they appear in import sources, they will be ignored.</p>
<h4 id="ch032_s3xml.xhtml#References">References</h4>
<p>Foreign key references (except those linking components to their primary record) are represented by &lt;reference&gt; elements.</p>
<p>Foreign keys can be importable UIDs (<em>uuid</em>-attribute, which will be both imported and used to find and/or link to existing records in the DB) or temporary UIDs (<em>tuid</em>-attribute, which will not be imported but only used to find records within the current tree), If a &lt;resource&gt; element with a matching UID key attribute is found in the same tree, it will be automatically imported.</p>
<p>References inside referenced elements will be resolved (unlimited depth) and also be imported. Circular references will be detected and properly resolved.</p>
<p>Multi-references (list:reference type in web2py) use a list of UID keys separated by vertical dashes like <code>uuid=|uid1|uid2|uid3|</code>. The leading and trailing vertical dashes must be present.</p>
<p>If a &lt;resource&gt; element is nested inside the &lt;reference&gt;, either or both of the UID keys can be omitted. Where both keys are however used, they must match. Multiple embedded &lt;resource&gt; elements are allowed for multi-references.</p>
<h3 id="ch032_s3xml.xhtml#ElementDescriptions">Element Descriptions</h3>
<h4 id="ch032_s3xml.xhtml#s3xml">&lt;s3xml&gt;</h4>
<p>This is the root element (in schema and data documents).</p>
<pre class="wiki"><code>&lt;s3xml success=&quot;true&quot; results=&quot;2&quot; domain=&quot;mycomputer&quot; url=&quot;http://127.0.0.1:8000/eden&quot; latmin=&quot;-90.0&quot; latmax=&quot;90.0&quot; lonmin=&quot;-180.0&quot; lonmax=&quot;180.0&quot;&gt;
   ...
&lt;/s3xml&gt;</code></pre>
<table>
<tbody>
<tr class="odd">
<td><strong>Parent elements:</strong></td>
<td><em>none (root element)</em></td>
</tr>
<tr class="even">
<td><strong>Child elements:</strong></td>
<td>&lt;resource&gt;</td>
</tr>
<tr class="odd">
<td><strong>Contents:</strong></td>
<td><em>empty</em></td>
</tr>
</tbody>
</table>
<p><strong>Attributes:</strong></p>
<table>
<tbody>
<tr class="odd">
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong></td>
<td><strong>mandatory?</strong></td>
</tr>
<tr class="even">
<td><strong>domain</strong></td>
<td>string</td>
<td>the domain name of the data repository</td>
<td>no</td>
</tr>
<tr class="odd">
<td><strong>url</strong></td>
<td>string</td>
<td>the URL of the data repository</td>
<td>no</td>
</tr>
<tr class="even">
<td><strong>success</strong></td>
<td>boolean</td>
<td>true if the page contains any records, otherwise false</td>
<td>no</td>
</tr>
<tr class="odd">
<td><strong>results</strong></td>
<td>integer</td>
<td>the total number of records matching the request</td>
<td>no</td>
</tr>
<tr class="even">
<td><strong>start</strong></td>
<td>integer</td>
<td>the index of the first record returned (in paginated requests)</td>
<td>no<br />
</td>
</tr>
<tr class="odd">
<td><strong>limit</strong></td>
<td>integer</td>
<td>the maximum number of records returned (in paginated requests)</td>
<td>no<br />
</td>
</tr>
<tr class="even">
<td><strong>latmin</strong>, <strong>latmax</strong>, <strong>lonmin</strong>, <strong>lonmax</strong></td>
<td>float</td>
<td>geo-location boundary box of the results</td>
<td>no</td>
</tr>
</tbody>
</table>
<h4 id="ch032_s3xml.xhtml#resource">&lt;resource&gt;</h4>
<p>This element represents a record (in data documents) or a database table (in schema documents).</p>
<pre class="wiki"><code>&lt;s3xml&gt;
  &lt;resource name=&quot;xxx_yyy&quot;&gt;
     ...
  &lt;/resource&gt;
&lt;/s3xml&gt;</code></pre>
<table>
<tbody>
<tr class="odd">
<td><strong>Parent elements:</strong></td>
<td>&lt;s3xml&gt;, &lt;resource&gt;, &lt;reference&gt;</td>
</tr>
<tr class="even">
<td><strong>Child elements:</strong></td>
<td>&lt;resource&gt;, &lt;data&gt;, &lt;field&gt;</td>
</tr>
<tr class="odd">
<td><strong>Contents:</strong></td>
<td><em>empty</em></td>
</tr>
</tbody>
</table>
<p><strong>Attributes:</strong></p>
<table>
<tbody>
<tr class="odd">
<td> <strong>Name</strong></td>
<td> <strong>Type</strong></td>
<td> <strong>Description</strong></td>
<td><strong>mandatory?</strong><br />
</td>
</tr>
<tr class="even">
<td> <strong>name</strong></td>
<td> string</td>
<td> the name of the database table<br />
</td>
<td> <em>yes</em></td>
</tr>
<tr class="odd">
<td> <strong>uuid</strong></td>
<td> string</td>
<td> a unique identifier for the record</td>
<td> <em>no</em>*</td>
</tr>
<tr class="even">
<td> <strong>tuid</strong></td>
<td> string</td>
<td> a temporary unique identifier for the record</td>
<td> <em>no</em>*</td>
</tr>
<tr class="odd">
<td> <strong>created_on</strong></td>
<td> datetime</td>
<td> date and time when the record was created</td>
<td> <em>no</em>**</td>
</tr>
<tr class="even">
<td> <strong>modified_on</strong></td>
<td> datetime</td>
<td> date and time when the record was last updated</td>
<td> <em>no, default: time of the request</em>** ***</td>
</tr>
<tr class="odd">
<td> <strong>created_by</strong></td>
<td> string</td>
<td>email-address of the user who created the record</td>
<td> <em>no</em></td>
</tr>
<tr class="even">
<td> <strong>modified_by</strong></td>
<td> string</td>
<td>email-address of the user who last updated the record</td>
<td> <em>no</em></td>
</tr>
<tr class="odd">
<td> <strong>owned_by_user</strong></td>
<td> string</td>
<td>email-address of the user who owns the record*****</td>
<td> <em>no</em></td>
</tr>
<tr class="even">
<td> <strong>owned_by_role</strong></td>
<td> string</td>
<td> name of the user group who collectively own the record*****</td>
<td> <em>no</em></td>
</tr>
<tr class="odd">
<td> <strong>mci</strong></td>
<td> integer</td>
<td> master-copy-index</td>
<td> <em>no, default: 2</em>*** ****</td>
</tr>
</tbody>
</table>
<ul>
<li>(*) Records will be identified within the input file by their <code>uuid</code>, or, if no <code>uuid</code> is specified, by their <code>tuid</code>.</li>
<li>(**) as YYYY-MM-DDTHH:mm:ssZ, always UTC</li>
<li>(***) the last update date/time and mci are required in synchronization</li>
<li>(****) the master copy index specifies how often a record has been copied across sites, see below</li>
<li>(*****) record ownership will be retained if the record owners can be matched against existing users/user groups</li>
</ul>
<p>The <code>uuid</code> will be stored in the database together with the record. If <code>uuid</code> is present and matches an existing record in the database, then this record will be updated. If there's no match or no <code>uuid</code> specified in the <code>resource</code> element, then the importer will create a new record in the database (and automatically generate a <code>uuid</code> if required).</p>
<p>The <code>mci</code> - master-copy-index - indicates how often this record has been copied across sites:</p>
<ul>
<li>when importing a new record the <code>mci</code> value is always *imported* as-is from the source</li>
<li>when updating a record, the <code>mci</code> of the database record remains unchanged</li>
<li>the <code>mci</code> of a record is *exported* as its current database value + 1.</li>
<li>the repository first creating a record sets mci=0 in the database record, which appears as mci=1 in the exported XML.</li>
<li>a copying site then imports mci=1 into its database, which appears as mci=2 in its export XML, and so forth...</li>
</ul>
<p>The <code>mci</code> can be used to filter records for whether they have been originated at a repository or not. If there's a fixed set of synchronization paths between a number of Sahana Eden instances, the <code>mci</code> can be used for conflict resolution. If the <code>mci</code> is not specified, it defaults to 2.</p>
<p>MCI handling is optional for non-synchronizing peers.</p>
<h4 id="ch032_s3xml.xhtml#data">&lt;data&gt;</h4>
<p>This element represents the value of a single field in the record.</p>
<pre class="wiki"><code>&lt;s3xml&gt;
  &lt;resource&gt;
    &lt;data field=&quot;fieldname&quot; value=&quot;value&quot;&gt;...&lt;/data&gt;
  &lt;/resource&gt;
&lt;/s3xml&gt;</code></pre>
<table>
<tbody>
<tr class="odd">
<td><strong>Parent elements:</strong></td>
<td>resource</td>
</tr>
<tr class="even">
<td><strong>Child elements:</strong></td>
<td><em>none (leaf element)</em></td>
</tr>
<tr class="odd">
<td><strong>Contents:</strong></td>
<td>Text</td>
</tr>
</tbody>
</table>
<p><strong>Attributes:</strong></p>
<table>
<tbody>
<tr class="odd">
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Description</strong><br />
</td>
<td><strong>mandatory?</strong></td>
</tr>
<tr class="even">
<td><strong>field</strong></td>
<td>string</td>
<td>the field name in the record</td>
<td><em>yes</em></td>
</tr>
<tr class="odd">
<td><strong>value</strong></td>
<td>JSON<br />
</td>
<td>the native field value</td>
<td><em>no</em></td>
</tr>
<tr class="even">
<td><strong>url</strong></td>
<td>URL</td>
<td>the URL to download the contents from*</td>
<td><em>no</em></td>
</tr>
<tr class="odd">
<td><strong>filename</strong></td>
<td>filename</td>
<td>the filename of the attached contents*</td>
<td><em>no</em></td>
</tr>
</tbody>
</table>
<p>(*) If the field is for file upload, a <code>url</code> attribute should be provided to specify the location of the file. The importer will try to download and store the file (file transfer) from that URL (<em>pull</em>). It is also possible to send the file together with the HTTP request - in this case the <code>filename</code> must be specified instead of<code> </code>the<code> url</code> (<em>push</em>). The <em>push</em> variant for uploads is meant for peers which do not support pulling for some reason (e.g. mobile phones). Normal servers would always provide a URL for download in order to allow the consuming site to decide which files to download and when (saves bandwidth).</p>
<p>The text node in the <code>data</code> element provides a human-readable representation of the field value.<br />
</p>
<p>The <em>value</em> attribute contains a JSON representation of the field value, retaining the original data type (i.e. strings must be double-quoted) except for <em>date</em>, <em>time</em> and <em>datetime</em> values, which are to be represented as simple strings in the respective standard format (no double quotes). The standard format for <em>datetime</em> values is <em>YYYY-MM-ddTHH:mm:ssZ</em> (ISO format, UTC), <em>date</em> shall be represented as <em>YYYY-MM-dd</em>, and <em>time</em> as <em>HH:mm:ss</em>.</p>
<p><em>data</em> elements representing passwords can contain the clear text password in the <em>value</em> attribute, or the encrypted password in the text node. Where a clear text password is given as <em>value</em> attribute, it will be stored encrypted, otherwise the password will be stored as-is. Note that clear-text representation of passwords will be accepted by the interface, but never be exported.</p>
<h3>&lt;reference&gt;</h3>
<h4 id="ch032_s3xml.xhtml#reference"></h4>
<p>Represents a foreign key reference.</p>
<pre class="wiki"><code>&lt;s3xml&gt;
    &lt;resource name=&quot;xxx_yyy&quot;&gt;
        &lt;reference field=&quot;xy&quot; resource=&quot;aaabbb&quot; uuid=&quot;urn:uuid:e4bcb9fd-d890-4f2f-b221-1d75fff79e2d&quot;/&gt;
    &lt;/resource&gt;
&lt;/s3xml&gt;</code></pre>
<table>
<tbody>
<tr class="odd">
<td><strong>Parent elements:</strong></td>
<td>&lt;resource&gt;</td>
</tr>
<tr class="even">
<td><strong>Child elements:</strong></td>
<td>&lt;resource&gt;</td>
</tr>
<tr class="odd">
<td><strong>Contents:</strong></td>
<td>Text</td>
</tr>
</tbody>
</table>
<p><strong>Attributes:</strong></p>
<table>
<tbody>
<tr class="odd">
<td> <strong>Name</strong></td>
<td> <strong>Type</strong></td>
<td> <strong>Description</strong></td>
<td> <strong>mandatory?</strong></td>
</tr>
<tr class="even">
<td> <strong>field</strong></td>
<td> string</td>
<td> the field name in the record</td>
<td> <em>yes</em></td>
</tr>
<tr class="odd">
<td> <strong>resource</strong></td>
<td> string</td>
<td> the name of the referenced database table<br />
</td>
<td> <em>yes</em></td>
</tr>
<tr class="even">
<td> <strong>uuid</strong></td>
<td> string</td>
<td> the unique identifier of the referenced record (foreign key)*</td>
<td> <em>(yes)</em>**</td>
</tr>
<tr class="odd">
<td> <strong>tuid</strong></td>
<td> string</td>
<td> a temporary identifier for a referenced record (foreign key)*</td>
<td> <em>(yes)</em>**</td>
</tr>
</tbody>
</table>
<p>(*) Referenced records would always be exported in the same output file. If a referenced record is found in the same input file, then it will be automatically imported.</p>
<p>(**) Records will be identified within the input file by their <code>uuid</code>, or, if no <code>uuid</code> is specified, by their <code>tuid</code>.</p>
<p>If the referenced record is enclosed in the <em>reference</em> element, then <code>uuid</code> and <code>tuid</code> can be omitted:</p>
<pre class="wiki"><code>&lt;s3xml&gt;
   &lt;resource name=&quot;xxxyyy&quot;&gt;
       &lt;!-- content of the record goes here --&gt;
       &lt;reference field=&quot;xy&quot; resource=&quot;aaabbb&quot;&gt;
          &lt;resource name=&quot;aaabbb&quot;&gt;
            &lt;!-- content of the referenced record goes here --&gt;
          &lt;/resource&gt;
       &lt;/reference&gt;
   &lt;/resource&gt;
&lt;/s3xml&gt;</code></pre>
<p><span id="ch033_glossary.xhtml"></span></p>
<h1>Glossary</h1>
<p><strong><em>Amazon's EC2</em></strong> - Amazon's Elastic Compute Cloud, a hosted cloud service <br />
</p>
<p><strong><em>API</em></strong> - Application Programming Interface, an interface which software programs can use to communicate with each other </p>
<p><em><strong>CRUD</strong></em> - Create, Read, Update, Delete</p>
<p><strong><em>Debian</em></strong> - A free and open source community based Linux distribution<br />
</p>
<p><strong><em>GIS</em></strong> - Geographic Information System/Geographic Information Services</p>
<p><em><strong>Git </strong></em>- A distributed revision control system </p>
<p><em><strong>GitHub</strong></em> - A free and open source suite of tools that help people and teams to work together on software projects; code hosting, bug tracking, mailing lists, etc.. <strong><em></em></strong></p>
<p><em><strong>GSoC</strong></em> - Google Summer of Code, a program sponsored by Google that encourages college students to participate in open source software projects.<br />
</p>
<p><em><strong>IDE</strong></em> - Integrated Development Environment. An IDE is a software application that provides comprehensive facilities to computer programmers for software development. An IDE will normally consist of a source code editor as well as facilities to access other development tools such as compiler and/or interpreter, build automation tools, a debugger etc.<br />
</p>
<p><strong><em>IFRC</em></strong> - International Federation of Red Cross and Red Crescent Societies<br />
</p>
<p><strong><em>Instance</em></strong> - A single installation of the Sahana Eden software whether it be on a single server, USB drive or virtual machine.</p>
<p><em><strong>ISCRAM</strong></em> - Information Systems for Crisis Response and Management</p>
<p><em><strong>Module</strong></em> - A part of the software that creates functionality in Sahana Eden.<br />
</p>
<p><em><strong>NGO</strong></em> - Non-Government Organizations</p>
<p><em><strong>Pootle</strong></em> - An online translation management tool</p>
<p><em><strong>RAD</strong></em> - Rapid Application Development</p>
<p><em><strong>Repository</strong></em> - A source for software packages</p>
<p><em><strong>RESTful</strong></em> - Conforming to the REST constraints, see REST<br />
</p>
<p><em><strong>Representational state transfer</strong> (<strong>REST</strong>)</em> - a style of software architecture for distributed hypermedia systems, see <a href="http://en.wikipedia.org/wiki/Representational_state_transfer" class="uri">http://en.wikipedia.org/wiki/Representational_state_transfer</a><br />
</p>
<p><em><strong><em>Resource -</em></strong></em> Modules define different resources are sets of all database records which descibe a complex entity in the business process such as a person or an organization, or a request for items. A module's controller contains functions which provide an interface to its resources. See &quot;Resource Model&quot; appendix for a more detailed explanation.  <em><strong><em></em></strong></em></p>
<p><em><strong><em></em></strong></em></p>
<p><em><strong>Super-Entity</strong></em> - Allows sharing components across multiple resources: Instead of having several foreign keys for different primary resources, the shared component contains only one foreign key to the link table, the so-called <em>super-key</em>. See <a href="http://eden.sahanafoundation.org/wiki/S3XRC/ModelExtensions/SuperEntities" class="uri">http://eden.sahanafoundation.org/wiki/S3XRC/ModelExtensions/SuperEntities</a></p>
<p><em><strong><em>UNDAC</em></strong></em> - United Nations Disaster Assessment Coordination</p>
<p><em><strong><em>UN OCHA</em></strong></em>- United Nations Office for the Coordination of Humanitarian Affair<br />
</p>
<p><em><strong><em>UUID</em></strong></em> - Universally Unique Identifier</p>
<p><em><strong>Web2Py</strong></em> - A free and open source web framework for agile development of secure database-driven web applications; written and programmable in Python.<br />
</p>
<p><span id="ch034_credits.xhtml"></span></p>
<h1>CREDITS</h1>
<p>This book was written during a three-day book sprint held during the Google Summer of Code Documentation Summit in Mountain View, California between the 18th and 20th of October 2011 by a team of Sahana Developers with assistance from book writing experts.</p>
<p> <img src="static/IMG_2120.JPG" /></p>
<div id="ch034_credits.xhtml#recordEditors">
<p><strong>Authors:</strong> (from left to right) Pat Tressel, Fran Boon, Shikhar Kohli, Dominic Koenig, Belinda Lopez, Eli Lev, Michael Howden, Anne Goldenberg (not present)</p>
<strong>Subjects:</strong> Disaster Management System
</div>
<div id="ch034_credits.xhtml#noticeSujets">
<p><strong>Summary :</strong><span> </span></p>
<p>Sahana Eden is an open source software platform for Disaster Management practioners. It allows tracking the needs of the affected populations and coordinating the responding agencies and their resources. This book is targeted at decision makers looking for solutions, users about to deploy the platform and developers who want to contribute to the project.</p>
<strong>Cover Art:</strong> Laleh Torabi
<p><strong>Publisher:</strong> Lulu.com</p>
<p><strong>Type of Document:</strong> collective handbook</p>
</div>
<div id="ch034_credits.xhtml#noticeNote">

</div>
<div id="ch034_credits.xhtml#licence">
<p><strong>Language:</strong> English</p>
<p><strong>License:</strong> MIT</p>
</div>
<div id="ch034_credits.xhtml#noticebibliographie">

</div>
</body>
</html>
